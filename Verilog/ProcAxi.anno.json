[
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"ProcAxiWrap.BlackBoxBRAMTDP",
    "name":"BlackBoxBRAMTDP.v",
    "text":"\n// Dual-Port Block RAM with Two Write Ports\n\nmodule BlackBoxBRAMTDP #(\n                         parameter ADDR_WIDTH_A = 10,\n                         parameter DATA_WIDTH_A = 36,\n                         parameter ADDR_WIDTH_B = 10,\n                         parameter DATA_WIDTH_B = 36,\n                         parameter SIZE_A       = 1024,\n                         parameter SIZE_B       = 1024)\n   (clk,enA,enB,weA,weB,addrA,addrB,diA,diB,doA,doB);\n\n   input clk,enA,enB,weA,weB;\n   input [ADDR_WIDTH_A-1:0] addrA;\n   input [ADDR_WIDTH_B-1:0] addrB;\n   input [DATA_WIDTH_A-1:0] diA;\n   input [DATA_WIDTH_B-1:0] diB;\n   output [DATA_WIDTH_A-1:0] doA;\n   output [DATA_WIDTH_B-1:0] doB;\n\n`define max(a,b) {(a) > (b) ? (a) : (b)}\n`define min(a,b) {(a) < (b) ? (a) : (b)}\n\n   function integer log2;\n      input integer          value;\n      reg [31:0]             shifted;\n      integer                res;\n      begin\n         if (value < 2)\n  \t       log2 = value;\n         else\n           begin\n  \t          shifted = value-1;\n  \t          for (res=0; shifted>0; res=res+1)\n  \t\t          shifted = shifted>>1;\n  \t          log2 = res;\n           end\n      end\n   endfunction\n\n   localparam maxSIZE  = `max(SIZE_A, SIZE_B);\n   localparam maxWIDTH = `max(DATA_WIDTH_A, DATA_WIDTH_B);\n   localparam minWIDTH = `min(DATA_WIDTH_A, DATA_WIDTH_B);\n\n   localparam RATIO = maxWIDTH / minWIDTH;\n   localparam log2RATIO = log2(RATIO);\n\n   reg[minWIDTH-1:0] ram [0:maxSIZE-1];\n   reg [DATA_WIDTH_A-1:0] readA;\n   reg [DATA_WIDTH_B-1:0] readB;\n\n   always @(posedge clk)\n     begin\n        if (enB)\n          begin\n             if (weB)\n               ram[addrB] <= diB;\n             readB <= ram[addrB];\n          end\n     end\n\n   always @(posedge clk)\n     begin\n        if (enA)\n          begin\n             if (weA)\n               ram[addrA] <= diA;\n             readA <= ram[addrA];\n          end\n     end\n\n   assign doA = readA;\n   assign doB = readB;\n\nendmodule\n  "
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"ProcAxiWrap.BlackBoxBRAMTDP_1",
    "name":"BlackBoxBRAMTDP.v",
    "text":"\n// Dual-Port Block RAM with Two Write Ports\n\nmodule BlackBoxBRAMTDP #(\n                         parameter ADDR_WIDTH_A = 10,\n                         parameter DATA_WIDTH_A = 36,\n                         parameter ADDR_WIDTH_B = 10,\n                         parameter DATA_WIDTH_B = 36,\n                         parameter SIZE_A       = 1024,\n                         parameter SIZE_B       = 1024)\n   (clk,enA,enB,weA,weB,addrA,addrB,diA,diB,doA,doB);\n\n   input clk,enA,enB,weA,weB;\n   input [ADDR_WIDTH_A-1:0] addrA;\n   input [ADDR_WIDTH_B-1:0] addrB;\n   input [DATA_WIDTH_A-1:0] diA;\n   input [DATA_WIDTH_B-1:0] diB;\n   output [DATA_WIDTH_A-1:0] doA;\n   output [DATA_WIDTH_B-1:0] doB;\n\n`define max(a,b) {(a) > (b) ? (a) : (b)}\n`define min(a,b) {(a) < (b) ? (a) : (b)}\n\n   function integer log2;\n      input integer          value;\n      reg [31:0]             shifted;\n      integer                res;\n      begin\n         if (value < 2)\n  \t       log2 = value;\n         else\n           begin\n  \t          shifted = value-1;\n  \t          for (res=0; shifted>0; res=res+1)\n  \t\t          shifted = shifted>>1;\n  \t          log2 = res;\n           end\n      end\n   endfunction\n\n   localparam maxSIZE  = `max(SIZE_A, SIZE_B);\n   localparam maxWIDTH = `max(DATA_WIDTH_A, DATA_WIDTH_B);\n   localparam minWIDTH = `min(DATA_WIDTH_A, DATA_WIDTH_B);\n\n   localparam RATIO = maxWIDTH / minWIDTH;\n   localparam log2RATIO = log2(RATIO);\n\n   reg[minWIDTH-1:0] ram [0:maxSIZE-1];\n   reg [DATA_WIDTH_A-1:0] readA;\n   reg [DATA_WIDTH_B-1:0] readB;\n\n   always @(posedge clk)\n     begin\n        if (enB)\n          begin\n             if (weB)\n               ram[addrB] <= diB;\n             readB <= ram[addrB];\n          end\n     end\n\n   always @(posedge clk)\n     begin\n        if (enA)\n          begin\n             if (weA)\n               ram[addrA] <= diA;\n             readA <= ram[addrA];\n          end\n     end\n\n   assign doA = readA;\n   assign doB = readB;\n\nendmodule\n  "
  }
]