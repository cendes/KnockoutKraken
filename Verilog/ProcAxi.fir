;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.12.4, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:43:20.285, builtAtMillis: 1562607800285
circuit ProcAxiWrap : 
  module AxiMemoryMapped : 
    input clock : Clock
    input reset : UInt<1>
    output io : {axiLite : {flip awaddr : UInt<4>, flip awprot : UInt<3>, flip awvalid : UInt<1>, awready : UInt<1>, flip wdata : UInt<32>, flip wstrb : UInt<4>, flip wvalid : UInt<1>, wready : UInt<1>, bresp : UInt<2>, bvalid : UInt<1>, flip bready : UInt<1>, flip araddr : UInt<4>, flip arprot : UInt<3>, flip arvalid : UInt<1>, arready : UInt<1>, rdata : UInt<32>, rresp : UInt<2>, rvalid : UInt<1>, flip rready : UInt<1>}, flip regPort : {flip writeValid : UInt<1>, flip writeAddr : UInt<2>, flip writeData : UInt<32>, flip writeStrobe : UInt<4>, writeError : UInt<1>, flip readAddr : UInt<2>, readData : UInt<32>, readError : UInt<1>}}
    
    wire _T_78 : UInt @[axiLite.scala 97:23]
    wire _T_80 : UInt<1> @[axiLite.scala 98:23]
    wire _T_82 : UInt<1> @[axiLite.scala 99:23]
    _T_78 <= io.axiLite.awaddr @[axiLite.scala 102:17]
    _T_80 <= io.axiLite.awvalid @[axiLite.scala 103:17]
    io.axiLite.awready <= _T_82 @[axiLite.scala 104:17]
    wire writeAddressEnq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>} @[axiLite.scala 123:21]
    _T_82 <= writeAddressEnq.ready @[axiLite.scala 129:19]
    writeAddressEnq.valid <= _T_80 @[axiLite.scala 130:19]
    writeAddressEnq.bits <= _T_78 @[axiLite.scala 131:19]
    wire _T_90 : UInt @[axiLite.scala 97:23]
    wire _T_92 : UInt<1> @[axiLite.scala 98:23]
    wire _T_94 : UInt<1> @[axiLite.scala 99:23]
    _T_90 <= io.axiLite.wdata @[axiLite.scala 106:17]
    _T_92 <= io.axiLite.wvalid @[axiLite.scala 107:17]
    io.axiLite.wready <= _T_94 @[axiLite.scala 108:17]
    wire writeDataEnq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>} @[axiLite.scala 123:21]
    _T_94 <= writeDataEnq.ready @[axiLite.scala 129:19]
    writeDataEnq.valid <= _T_92 @[axiLite.scala 130:19]
    writeDataEnq.bits <= _T_90 @[axiLite.scala 131:19]
    wire _T_102 : UInt @[axiLite.scala 97:23]
    wire _T_104 : UInt<1> @[axiLite.scala 98:23]
    wire _T_106 : UInt<1> @[axiLite.scala 99:23]
    io.axiLite.bresp <= _T_102 @[axiLite.scala 110:17]
    io.axiLite.bvalid <= _T_104 @[axiLite.scala 111:17]
    _T_106 <= io.axiLite.bready @[axiLite.scala 112:17]
    wire writeResponseDeq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>} @[axiLite.scala 123:21]
    writeResponseDeq.ready <= _T_106 @[axiLite.scala 133:19]
    _T_104 <= writeResponseDeq.valid @[axiLite.scala 134:19]
    _T_102 <= writeResponseDeq.bits @[axiLite.scala 135:19]
    wire _T_114 : UInt @[axiLite.scala 97:23]
    wire _T_116 : UInt<1> @[axiLite.scala 98:23]
    wire _T_118 : UInt<1> @[axiLite.scala 99:23]
    _T_114 <= io.axiLite.araddr @[axiLite.scala 114:17]
    _T_116 <= io.axiLite.arvalid @[axiLite.scala 115:17]
    io.axiLite.arready <= _T_118 @[axiLite.scala 116:17]
    wire readAddressEnq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>} @[axiLite.scala 123:21]
    _T_118 <= readAddressEnq.ready @[axiLite.scala 129:19]
    readAddressEnq.valid <= _T_116 @[axiLite.scala 130:19]
    readAddressEnq.bits <= _T_114 @[axiLite.scala 131:19]
    wire _T_126 : UInt @[axiLite.scala 97:23]
    wire _T_128 : UInt<1> @[axiLite.scala 98:23]
    wire _T_130 : UInt<1> @[axiLite.scala 99:23]
    io.axiLite.rdata <= _T_126 @[axiLite.scala 118:17]
    io.axiLite.rvalid <= _T_128 @[axiLite.scala 119:17]
    _T_130 <= io.axiLite.rready @[axiLite.scala 120:17]
    wire readDataDeq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>} @[axiLite.scala 123:21]
    readDataDeq.ready <= _T_130 @[axiLite.scala 133:19]
    _T_128 <= readDataDeq.valid @[axiLite.scala 134:19]
    _T_126 <= readDataDeq.bits @[axiLite.scala 135:19]
    node _T_138 = and(writeAddressEnq.ready, writeAddressEnq.valid) @[Decoupled.scala 37:37]
    reg writeAddr : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when _T_138 : @[Reg.scala 20:19]
      writeAddr <= writeAddressEnq.bits @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    writeAddressEnq.ready <= UInt<1>("h01") @[axiMemoryMapped.scala 41:25]
    wire validWriteAddressEnable : UInt<1> @[axiMemoryMapped.scala 51:37]
    node _T_142 = and(writeAddressEnq.ready, writeAddressEnq.valid) @[Decoupled.scala 37:37]
    reg validWriteAddress : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when validWriteAddressEnable : @[Reg.scala 20:19]
      validWriteAddress <= _T_142 @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_145 = not(validWriteAddress) @[axiMemoryMapped.scala 53:31]
    node _T_146 = and(writeResponseDeq.ready, writeResponseDeq.valid) @[Decoupled.scala 37:37]
    node _T_147 = or(_T_145, _T_146) @[axiMemoryMapped.scala 53:51]
    validWriteAddressEnable <= _T_147 @[axiMemoryMapped.scala 53:27]
    wire validWriteEnable : UInt<1> @[axiMemoryMapped.scala 54:30]
    node _T_149 = and(writeDataEnq.ready, writeDataEnq.valid) @[Decoupled.scala 37:37]
    reg validWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when validWriteEnable : @[Reg.scala 20:19]
      validWrite <= _T_149 @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_152 = not(validWrite) @[axiMemoryMapped.scala 56:24]
    node _T_153 = and(writeResponseDeq.ready, writeResponseDeq.valid) @[Decoupled.scala 37:37]
    node _T_154 = or(_T_152, _T_153) @[axiMemoryMapped.scala 56:37]
    validWriteEnable <= _T_154 @[axiMemoryMapped.scala 56:20]
    node _T_155 = and(writeDataEnq.ready, writeDataEnq.valid) @[Decoupled.scala 37:37]
    reg writeValid : UInt<1>, clock @[axiMemoryMapped.scala 60:28]
    writeValid <= _T_155 @[axiMemoryMapped.scala 60:28]
    node _T_158 = and(writeDataEnq.ready, writeDataEnq.valid) @[Decoupled.scala 37:37]
    reg writeData : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when _T_158 : @[Reg.scala 20:19]
      writeData <= writeDataEnq.bits @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_161 = and(writeDataEnq.ready, writeDataEnq.valid) @[Decoupled.scala 37:37]
    reg writeStrobe : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when _T_161 : @[Reg.scala 20:19]
      writeStrobe <= io.axiLite.wstrb @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    writeDataEnq.ready <= validWriteAddress @[axiMemoryMapped.scala 63:22]
    node _T_163 = and(writeValid, validWriteAddress) @[axiMemoryMapped.scala 66:40]
    io.regPort.writeValid <= _T_163 @[axiMemoryMapped.scala 66:26]
    node _T_164 = shr(writeAddr, 2) @[axiMemoryMapped.scala 67:39]
    io.regPort.writeAddr <= _T_164 @[axiMemoryMapped.scala 67:26]
    io.regPort.writeData <= writeData @[axiMemoryMapped.scala 68:26]
    io.regPort.writeStrobe <= writeStrobe @[axiMemoryMapped.scala 69:26]
    node _T_165 = and(validWriteAddress, validWrite) @[axiMemoryMapped.scala 72:50]
    reg validWriteResp : UInt<1>, clock @[axiMemoryMapped.scala 72:31]
    validWriteResp <= _T_165 @[axiMemoryMapped.scala 72:31]
    writeResponseDeq.valid <= validWriteResp @[axiMemoryMapped.scala 73:26]
    when io.regPort.writeError : @[axiMemoryMapped.scala 74:30]
      writeResponseDeq.bits <= UInt<2>("h02") @[axiMemoryMapped.scala 75:27]
      skip @[axiMemoryMapped.scala 74:30]
    else : @[axiMemoryMapped.scala 76:14]
      writeResponseDeq.bits <= UInt<1>("h00") @[axiMemoryMapped.scala 77:27]
      skip @[axiMemoryMapped.scala 76:14]
    node readAddrFire = and(readAddressEnq.ready, readAddressEnq.valid) @[Decoupled.scala 37:37]
    reg readAddr : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when readAddrFire : @[Reg.scala 20:19]
      readAddr <= readAddressEnq.bits @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_171 = shr(readAddr, 2) @[axiMemoryMapped.scala 84:36]
    io.regPort.readAddr <= _T_171 @[axiMemoryMapped.scala 84:24]
    readAddressEnq.ready <= UInt<1>("h01") @[axiMemoryMapped.scala 85:24]
    wire readValidNext : UInt<1> @[axiMemoryMapped.scala 90:27]
    reg readValid : UInt<1>, clock @[axiMemoryMapped.scala 91:26]
    readValid <= readValidNext @[axiMemoryMapped.scala 91:26]
    node _T_175 = not(readDataDeq.ready) @[axiMemoryMapped.scala 92:20]
    node _T_176 = and(readValid, _T_175) @[axiMemoryMapped.scala 92:18]
    when _T_176 : @[axiMemoryMapped.scala 92:39]
      readValidNext <= readValid @[axiMemoryMapped.scala 93:19]
      skip @[axiMemoryMapped.scala 92:39]
    else : @[axiMemoryMapped.scala 94:15]
      node _T_177 = and(readAddressEnq.ready, readAddressEnq.valid) @[Decoupled.scala 37:37]
      readValidNext <= _T_177 @[axiMemoryMapped.scala 95:19]
      skip @[axiMemoryMapped.scala 94:15]
    readDataDeq.valid <= readValid @[axiMemoryMapped.scala 98:21]
    readDataDeq.bits <= io.regPort.readData @[axiMemoryMapped.scala 99:21]
    when io.regPort.readError : @[axiMemoryMapped.scala 101:29]
      io.axiLite.rresp <= UInt<2>("h02") @[axiMemoryMapped.scala 102:23]
      skip @[axiMemoryMapped.scala 101:29]
    else : @[axiMemoryMapped.scala 103:14]
      io.axiLite.rresp <= UInt<1>("h00") @[axiMemoryMapped.scala 104:23]
      skip @[axiMemoryMapped.scala 103:14]
    
  module RegisterMap : 
    input clock : Clock
    input reset : UInt<1>
    output io : {port : {flip writeValid : UInt<1>, flip writeAddr : UInt<2>, flip writeData : UInt<32>, flip writeStrobe : UInt<4>, writeError : UInt<1>, flip readAddr : UInt<2>, readData : UInt<32>, readError : UInt<1>}, flip moduleInputs : UInt<32>[4], regsValues : UInt<32>[4]}
    
    wire regsNext : UInt<32>[4] @[registerMap.scala 41:22]
    reg regs : UInt<32>[4], clock @[registerMap.scala 42:25]
    regs[0] <= regsNext[0] @[registerMap.scala 42:25]
    regs[1] <= regsNext[1] @[registerMap.scala 42:25]
    regs[2] <= regsNext[2] @[registerMap.scala 42:25]
    regs[3] <= regsNext[3] @[registerMap.scala 42:25]
    io.regsValues[0] <= regs[0] @[registerMap.scala 44:17]
    io.regsValues[1] <= regs[1] @[registerMap.scala 44:17]
    io.regsValues[2] <= regs[2] @[registerMap.scala 44:17]
    io.regsValues[3] <= regs[3] @[registerMap.scala 44:17]
    wire readOnlyVec : UInt<1>[4] @[registerMap.scala 46:25]
    readOnlyVec[0] <= UInt<1>("h00") @[registerMap.scala 47:46]
    readOnlyVec[1] <= UInt<1>("h01") @[registerMap.scala 47:46]
    readOnlyVec[2] <= UInt<1>("h00") @[registerMap.scala 47:46]
    readOnlyVec[3] <= UInt<1>("h00") @[registerMap.scala 47:46]
    node _T_108 = neq(io.port.writeStrobe, UInt<1>("h00")) @[registerMap.scala 48:63]
    node writeValid = and(io.port.writeValid, _T_108) @[registerMap.scala 48:39]
    node validWriteAddr = leq(io.port.writeAddr, UInt<2>("h03")) @[registerMap.scala 52:44]
    node writeRegReadOnly = eq(readOnlyVec[io.port.writeAddr], UInt<1>("h01")) @[registerMap.scala 53:57]
    node _T_112 = not(validWriteAddr) @[registerMap.scala 54:41]
    node _T_113 = or(_T_112, writeRegReadOnly) @[registerMap.scala 54:58]
    node writeErrorNext = and(writeValid, _T_113) @[registerMap.scala 54:37]
    reg writeErrorReg : UInt<1>, clock @[Reg.scala 11:16]
    when io.port.writeValid : @[Reg.scala 12:19]
      writeErrorReg <= writeErrorNext @[Reg.scala 12:23]
      skip @[Reg.scala 12:19]
    io.port.writeError <= writeErrorReg @[registerMap.scala 56:22]
    node validReadAddr = leq(io.port.readAddr, UInt<2>("h03")) @[registerMap.scala 59:41]
    node _T_116 = not(validReadAddr) @[registerMap.scala 60:24]
    io.port.readError <= _T_116 @[registerMap.scala 60:21]
    io.port.readData <= regs[io.port.readAddr] @[registerMap.scala 61:21]
    wire writeAddressOH : UInt<4> @[registerMap.scala 66:28]
    node _T_122 = eq(writeErrorNext, UInt<1>("h01")) @[registerMap.scala 67:23]
    node _T_124 = eq(writeValid, UInt<1>("h00")) @[registerMap.scala 67:47]
    node _T_125 = or(_T_122, _T_124) @[registerMap.scala 67:34]
    when _T_125 : @[registerMap.scala 67:59]
      writeAddressOH <= UInt<1>("h00") @[registerMap.scala 68:20]
      skip @[registerMap.scala 67:59]
    else : @[registerMap.scala 69:14]
      node _T_127 = bits(io.port.writeAddr, 1, 0) @[OneHot.scala 51:49]
      node _T_129 = dshl(UInt<1>("h01"), _T_127) @[OneHot.scala 52:12]
      node _T_130 = bits(_T_129, 3, 0) @[OneHot.scala 52:27]
      writeAddressOH <= _T_130 @[registerMap.scala 70:20]
      skip @[registerMap.scala 69:14]
    wire strobedWriteDataBytes : UInt<8>[4] @[registerMap.scala 74:35]
    node _T_140 = bits(io.port.writeStrobe, 0, 0) @[registerMap.scala 77:56]
    node _T_141 = bits(io.port.writeData, 7, 0) @[registerMap.scala 75:49]
    node _T_145 = bits(regs[io.port.writeAddr], 7, 0) @[registerMap.scala 75:49]
    node _T_146 = mux(_T_140, _T_141, _T_145) @[registerMap.scala 77:36]
    strobedWriteDataBytes[0] <= _T_146 @[registerMap.scala 77:30]
    node _T_147 = bits(io.port.writeStrobe, 1, 1) @[registerMap.scala 77:56]
    node _T_148 = bits(io.port.writeData, 15, 8) @[registerMap.scala 75:49]
    node _T_152 = bits(regs[io.port.writeAddr], 15, 8) @[registerMap.scala 75:49]
    node _T_153 = mux(_T_147, _T_148, _T_152) @[registerMap.scala 77:36]
    strobedWriteDataBytes[1] <= _T_153 @[registerMap.scala 77:30]
    node _T_154 = bits(io.port.writeStrobe, 2, 2) @[registerMap.scala 77:56]
    node _T_155 = bits(io.port.writeData, 23, 16) @[registerMap.scala 75:49]
    node _T_159 = bits(regs[io.port.writeAddr], 23, 16) @[registerMap.scala 75:49]
    node _T_160 = mux(_T_154, _T_155, _T_159) @[registerMap.scala 77:36]
    strobedWriteDataBytes[2] <= _T_160 @[registerMap.scala 77:30]
    node _T_161 = bits(io.port.writeStrobe, 3, 3) @[registerMap.scala 77:56]
    node _T_162 = bits(io.port.writeData, 31, 24) @[registerMap.scala 75:49]
    node _T_166 = bits(regs[io.port.writeAddr], 31, 24) @[registerMap.scala 75:49]
    node _T_167 = mux(_T_161, _T_162, _T_166) @[registerMap.scala 77:36]
    strobedWriteDataBytes[3] <= _T_167 @[registerMap.scala 77:30]
    node _T_168 = cat(strobedWriteDataBytes[1], strobedWriteDataBytes[0]) @[registerMap.scala 81:48]
    node _T_169 = cat(strobedWriteDataBytes[3], strobedWriteDataBytes[2]) @[registerMap.scala 81:48]
    node strobedWriteData = cat(_T_169, _T_168) @[registerMap.scala 81:48]
    node _T_170 = bits(writeAddressOH, 0, 0) @[registerMap.scala 92:26]
    node _T_172 = eq(_T_170, UInt<1>("h01")) @[registerMap.scala 92:30]
    node _T_175 = mux(UInt<1>("h01"), UInt<1>("h00"), regs[0]) @[Mux.scala 61:16]
    node _T_176 = mux(_T_172, strobedWriteData, _T_175) @[Mux.scala 61:16]
    regsNext[0] <= _T_176 @[registerMap.scala 90:19]
    regsNext[1] <= io.moduleInputs[1] @[registerMap.scala 87:19]
    node _T_177 = bits(writeAddressOH, 2, 2) @[registerMap.scala 92:26]
    node _T_179 = eq(_T_177, UInt<1>("h01")) @[registerMap.scala 92:30]
    node _T_182 = mux(UInt<1>("h00"), UInt<1>("h00"), regs[2]) @[Mux.scala 61:16]
    node _T_183 = mux(_T_179, strobedWriteData, _T_182) @[Mux.scala 61:16]
    regsNext[2] <= _T_183 @[registerMap.scala 90:19]
    node _T_184 = bits(writeAddressOH, 3, 3) @[registerMap.scala 92:26]
    node _T_186 = eq(_T_184, UInt<1>("h01")) @[registerMap.scala 92:30]
    node _T_189 = mux(UInt<1>("h00"), UInt<1>("h00"), regs[3]) @[Mux.scala 61:16]
    node _T_190 = mux(_T_186, strobedWriteData, _T_189) @[Mux.scala 61:16]
    regsNext[3] <= _T_190 @[registerMap.scala 90:19]
    
  module AxiMemoryMappedWithRegs : 
    input clock : Clock
    input reset : UInt<1>
    output io : {axiLite : {flip awaddr : UInt<4>, flip awprot : UInt<3>, flip awvalid : UInt<1>, awready : UInt<1>, flip wdata : UInt<32>, flip wstrb : UInt<4>, flip wvalid : UInt<1>, wready : UInt<1>, bresp : UInt<2>, bvalid : UInt<1>, flip bready : UInt<1>, flip araddr : UInt<4>, flip arprot : UInt<3>, flip arvalid : UInt<1>, arready : UInt<1>, rdata : UInt<32>, rresp : UInt<2>, rvalid : UInt<1>, flip rready : UInt<1>}, flip moduleInputs : UInt<32>[4], regsValues : UInt<32>[4]}
    
    inst axiMemoryMapped of AxiMemoryMapped @[axiMemoryMapped.scala 122:33]
    axiMemoryMapped.clock <= clock
    axiMemoryMapped.reset <= reset
    inst registerMap of RegisterMap @[axiMemoryMapped.scala 123:33]
    registerMap.clock <= clock
    registerMap.reset <= reset
    axiMemoryMapped.io.axiLite.rready <= io.axiLite.rready @[axiMemoryMapped.scala 125:25]
    io.axiLite.rvalid <= axiMemoryMapped.io.axiLite.rvalid @[axiMemoryMapped.scala 125:25]
    io.axiLite.rresp <= axiMemoryMapped.io.axiLite.rresp @[axiMemoryMapped.scala 125:25]
    io.axiLite.rdata <= axiMemoryMapped.io.axiLite.rdata @[axiMemoryMapped.scala 125:25]
    io.axiLite.arready <= axiMemoryMapped.io.axiLite.arready @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.arvalid <= io.axiLite.arvalid @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.arprot <= io.axiLite.arprot @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.araddr <= io.axiLite.araddr @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.bready <= io.axiLite.bready @[axiMemoryMapped.scala 125:25]
    io.axiLite.bvalid <= axiMemoryMapped.io.axiLite.bvalid @[axiMemoryMapped.scala 125:25]
    io.axiLite.bresp <= axiMemoryMapped.io.axiLite.bresp @[axiMemoryMapped.scala 125:25]
    io.axiLite.wready <= axiMemoryMapped.io.axiLite.wready @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.wvalid <= io.axiLite.wvalid @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.wstrb <= io.axiLite.wstrb @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.wdata <= io.axiLite.wdata @[axiMemoryMapped.scala 125:25]
    io.axiLite.awready <= axiMemoryMapped.io.axiLite.awready @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.awvalid <= io.axiLite.awvalid @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.awprot <= io.axiLite.awprot @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.axiLite.awaddr <= io.axiLite.awaddr @[axiMemoryMapped.scala 125:25]
    axiMemoryMapped.io.regPort.readError <= registerMap.io.port.readError @[axiMemoryMapped.scala 126:25]
    axiMemoryMapped.io.regPort.readData <= registerMap.io.port.readData @[axiMemoryMapped.scala 126:25]
    registerMap.io.port.readAddr <= axiMemoryMapped.io.regPort.readAddr @[axiMemoryMapped.scala 126:25]
    axiMemoryMapped.io.regPort.writeError <= registerMap.io.port.writeError @[axiMemoryMapped.scala 126:25]
    registerMap.io.port.writeStrobe <= axiMemoryMapped.io.regPort.writeStrobe @[axiMemoryMapped.scala 126:25]
    registerMap.io.port.writeData <= axiMemoryMapped.io.regPort.writeData @[axiMemoryMapped.scala 126:25]
    registerMap.io.port.writeAddr <= axiMemoryMapped.io.regPort.writeAddr @[axiMemoryMapped.scala 126:25]
    registerMap.io.port.writeValid <= axiMemoryMapped.io.regPort.writeValid @[axiMemoryMapped.scala 126:25]
    registerMap.io.moduleInputs[0] <= io.moduleInputs[0] @[axiMemoryMapped.scala 127:25]
    registerMap.io.moduleInputs[1] <= io.moduleInputs[1] @[axiMemoryMapped.scala 127:25]
    registerMap.io.moduleInputs[2] <= io.moduleInputs[2] @[axiMemoryMapped.scala 127:25]
    registerMap.io.moduleInputs[3] <= io.moduleInputs[3] @[axiMemoryMapped.scala 127:25]
    io.regsValues[0] <= registerMap.io.regsValues[0] @[axiMemoryMapped.scala 128:25]
    io.regsValues[1] <= registerMap.io.regsValues[1] @[axiMemoryMapped.scala 128:25]
    io.regsValues[2] <= registerMap.io.regsValues[2] @[axiMemoryMapped.scala 128:25]
    io.regsValues[3] <= registerMap.io.regsValues[3] @[axiMemoryMapped.scala 128:25]
    
  extmodule BlackBoxBRAMTDP : 
    output doB : UInt<36>
    output doA : UInt<36>
    input diB : UInt<36>
    input diA : UInt<36>
    input addrB : UInt<10>
    input addrA : UInt<10>
    input weB : UInt<1>
    input weA : UInt<1>
    input enB : UInt<1>
    input enA : UInt<1>
    input clk : Clock
    
    defname = BlackBoxBRAMTDP
    parameter SIZE_B = 1024
    parameter ADDR_WIDTH_A = 10
    parameter DATA_WIDTH_A = 36
    parameter DATA_WIDTH_B = 36
    parameter SIZE_A = 1024
    parameter ADDR_WIDTH_B = 10
    
  module BRAMTDP : 
    input clock : Clock
    input reset : UInt<1>
    output io : {portA : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, portB : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    inst blackBoxBRAMTDP of BlackBoxBRAMTDP @[bram.scala 169:31]
    blackBoxBRAMTDP.doB is invalid
    blackBoxBRAMTDP.doA is invalid
    blackBoxBRAMTDP.diB is invalid
    blackBoxBRAMTDP.diA is invalid
    blackBoxBRAMTDP.addrB is invalid
    blackBoxBRAMTDP.addrA is invalid
    blackBoxBRAMTDP.weB is invalid
    blackBoxBRAMTDP.weA is invalid
    blackBoxBRAMTDP.enB is invalid
    blackBoxBRAMTDP.enA is invalid
    blackBoxBRAMTDP.clk is invalid
    blackBoxBRAMTDP.clk <= clock @[bram.scala 170:26]
    blackBoxBRAMTDP.weA <= io.portA.writeEn @[bram.scala 173:28]
    blackBoxBRAMTDP.enA <= io.portA.en @[bram.scala 174:28]
    blackBoxBRAMTDP.addrA <= io.portA.addr @[bram.scala 175:28]
    blackBoxBRAMTDP.diA <= io.portA.dataIn @[bram.scala 176:28]
    io.portA.dataOut <= blackBoxBRAMTDP.doA @[bram.scala 177:28]
    blackBoxBRAMTDP.weB <= io.portB.writeEn @[bram.scala 180:28]
    blackBoxBRAMTDP.enB <= io.portB.en @[bram.scala 181:28]
    blackBoxBRAMTDP.addrB <= io.portB.addr @[bram.scala 182:28]
    blackBoxBRAMTDP.diB <= io.portB.dataIn @[bram.scala 183:28]
    io.portB.dataOut <= blackBoxBRAMTDP.doB @[bram.scala 184:28]
    
  module BRAM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {portA : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, portB : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    inst bram of BRAMTDP @[bram.scala 151:20]
    bram.clock <= clock
    bram.reset <= reset
    io.portB.dataOut <= bram.io.portB.dataOut @[bram.scala 158:6]
    bram.io.portB.dataIn <= io.portB.dataIn @[bram.scala 158:6]
    bram.io.portB.addr <= io.portB.addr @[bram.scala 158:6]
    bram.io.portB.en <= io.portB.en @[bram.scala 158:6]
    bram.io.portB.writeEn <= io.portB.writeEn @[bram.scala 158:6]
    io.portA.dataOut <= bram.io.portA.dataOut @[bram.scala 158:6]
    bram.io.portA.dataIn <= io.portA.dataIn @[bram.scala 158:6]
    bram.io.portA.addr <= io.portA.addr @[bram.scala 158:6]
    bram.io.portA.en <= io.portA.en @[bram.scala 158:6]
    bram.io.portA.writeEn <= io.portA.writeEn @[bram.scala 158:6]
    
  extmodule BlackBoxBRAMTDP_1 : 
    output doB : UInt<36>
    output doA : UInt<36>
    input diB : UInt<36>
    input diA : UInt<36>
    input addrB : UInt<10>
    input addrA : UInt<10>
    input weB : UInt<1>
    input weA : UInt<1>
    input enB : UInt<1>
    input enA : UInt<1>
    input clk : Clock
    
    defname = BlackBoxBRAMTDP
    parameter SIZE_B = 1024
    parameter ADDR_WIDTH_A = 10
    parameter DATA_WIDTH_A = 36
    parameter DATA_WIDTH_B = 36
    parameter SIZE_A = 1024
    parameter ADDR_WIDTH_B = 10
    
  module BRAMTDP_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {portA : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, portB : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    inst blackBoxBRAMTDP of BlackBoxBRAMTDP_1 @[bram.scala 169:31]
    blackBoxBRAMTDP.doB is invalid
    blackBoxBRAMTDP.doA is invalid
    blackBoxBRAMTDP.diB is invalid
    blackBoxBRAMTDP.diA is invalid
    blackBoxBRAMTDP.addrB is invalid
    blackBoxBRAMTDP.addrA is invalid
    blackBoxBRAMTDP.weB is invalid
    blackBoxBRAMTDP.weA is invalid
    blackBoxBRAMTDP.enB is invalid
    blackBoxBRAMTDP.enA is invalid
    blackBoxBRAMTDP.clk is invalid
    blackBoxBRAMTDP.clk <= clock @[bram.scala 170:26]
    blackBoxBRAMTDP.weA <= io.portA.writeEn @[bram.scala 173:28]
    blackBoxBRAMTDP.enA <= io.portA.en @[bram.scala 174:28]
    blackBoxBRAMTDP.addrA <= io.portA.addr @[bram.scala 175:28]
    blackBoxBRAMTDP.diA <= io.portA.dataIn @[bram.scala 176:28]
    io.portA.dataOut <= blackBoxBRAMTDP.doA @[bram.scala 177:28]
    blackBoxBRAMTDP.weB <= io.portB.writeEn @[bram.scala 180:28]
    blackBoxBRAMTDP.enB <= io.portB.en @[bram.scala 181:28]
    blackBoxBRAMTDP.addrB <= io.portB.addr @[bram.scala 182:28]
    blackBoxBRAMTDP.diB <= io.portB.dataIn @[bram.scala 183:28]
    io.portB.dataOut <= blackBoxBRAMTDP.doB @[bram.scala 184:28]
    
  module BRAM_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {portA : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, portB : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    inst bram of BRAMTDP_1 @[bram.scala 151:20]
    bram.clock <= clock
    bram.reset <= reset
    io.portB.dataOut <= bram.io.portB.dataOut @[bram.scala 158:6]
    bram.io.portB.dataIn <= io.portB.dataIn @[bram.scala 158:6]
    bram.io.portB.addr <= io.portB.addr @[bram.scala 158:6]
    bram.io.portB.en <= io.portB.en @[bram.scala 158:6]
    bram.io.portB.writeEn <= io.portB.writeEn @[bram.scala 158:6]
    io.portA.dataOut <= bram.io.portA.dataOut @[bram.scala 158:6]
    bram.io.portA.dataIn <= io.portA.dataIn @[bram.scala 158:6]
    bram.io.portA.addr <= io.portA.addr @[bram.scala 158:6]
    bram.io.portA.en <= io.portA.en @[bram.scala 158:6]
    bram.io.portA.writeEn <= io.portA.writeEn @[bram.scala 158:6]
    
  module TransplantUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {host2tpu : {flip fire : UInt<1>, flip fireTag : UInt<1>, done : UInt<1>, doneTag : UInt<1>}, tpu2cpu : {flush : UInt<1>, freeze : UInt<1>, fire : UInt<1>, flip done : UInt<1>, flushTag : UInt<1>, fireTag : UInt<1>, freezeTag : UInt<1>, flip doneTag : UInt<1>}, tpu2cpuStateReg : {valid : UInt<1>, bits : UInt<2>}, tpu2cpuState : {PC : UInt<64>, SP : UInt<32>, EL : UInt<32>, NZCV : UInt<4>}, flip cpu2tpuState : {PC : UInt<64>, SP : UInt<32>, EL : UInt<32>, NZCV : UInt<4>}, flip rfile : {flip rs1_addr : UInt<5>, rs1_data : UInt<64>, flip rs2_addr : UInt<5>, rs2_data : UInt<64>, flip waddr : UInt<5>, flip wdata : UInt<64>, flip wen : UInt<1>}, flip stateBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    reg bramOFFST : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[transplant.scala 83:26]
    node _T_103 = bits(io.stateBRAM.dataOut, 31, 0) @[transplant.scala 84:50]
    wire bramOut : UInt
    bramOut <= _T_103
    reg bramOut1CD : UInt, clock @[transplant.scala 86:27]
    bramOut1CD <= bramOut @[transplant.scala 86:27]
    node _T_106 = cat(bramOut1CD, bramOut) @[Cat.scala 30:58]
    wire bramOut64b : UInt
    bramOut64b <= _T_106
    node regDataInMSB = bits(io.rfile.rs1_data, 63, 32) @[transplant.scala 91:31]
    node regDataInLSB = bits(io.rfile.rs1_data, 31, 0) @[transplant.scala 92:31]
    node regAddr = dshr(bramOFFST, UInt<1>("h01")) @[transplant.scala 95:27]
    io.rfile.rs1_addr <= regAddr @[transplant.scala 96:21]
    io.rfile.rs2_addr <= UInt<1>("h00") @[transplant.scala 97:21]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[transplant.scala 101:22]
    reg stateDir : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[transplant.scala 102:25]
    reg stateRegType : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[transplant.scala 103:29]
    reg freeze : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[transplant.scala 106:23]
    reg freezeTag : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[transplant.scala 107:26]
    wire flushSig : UInt<1>
    flushSig <= UInt<1>("h00")
    reg flushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[transplant.scala 110:25]
    wire fireSig : UInt<1>
    fireSig <= UInt<1>("h00")
    wire doneSig : UInt<1>
    doneSig <= UInt<1>("h00")
    node _T_124 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_124 : @[Conditional.scala 40:58]
      when io.host2tpu.fire : @[transplant.scala 126:30]
        freeze <= UInt<1>("h01") @[transplant.scala 127:16]
        freezeTag <= io.host2tpu.fireTag @[transplant.scala 128:19]
        stateDir <= UInt<1>("h00") @[transplant.scala 129:18]
        stateRegType <= UInt<2>("h01") @[transplant.scala 130:22]
        bramOFFST <= UInt<1>("h00") @[transplant.scala 131:19]
        state <= UInt<1>("h01") @[transplant.scala 133:15]
        skip @[transplant.scala 126:30]
      else : @[transplant.scala 134:35]
        when io.tpu2cpu.done : @[transplant.scala 134:35]
          freeze <= UInt<1>("h01") @[transplant.scala 135:16]
          freezeTag <= io.tpu2cpu.doneTag @[transplant.scala 136:19]
          stateDir <= UInt<1>("h01") @[transplant.scala 137:18]
          stateRegType <= UInt<2>("h01") @[transplant.scala 138:22]
          bramOFFST <= UInt<1>("h00") @[transplant.scala 139:19]
          flushSig <= UInt<1>("h01") @[transplant.scala 140:18]
          state <= UInt<1>("h01") @[transplant.scala 142:15]
          skip @[transplant.scala 134:35]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_130 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_130 : @[Conditional.scala 39:67]
        node _T_132 = add(bramOFFST, UInt<1>("h01")) @[transplant.scala 147:30]
        node _T_133 = tail(_T_132, 1) @[transplant.scala 147:30]
        bramOFFST <= _T_133 @[transplant.scala 147:17]
        node _T_135 = eq(bramOFFST, UInt<6>("h03f")) @[transplant.scala 148:22]
        when _T_135 : @[transplant.scala 148:49]
          stateRegType <= UInt<2>("h02") @[transplant.scala 149:22]
          skip @[transplant.scala 148:49]
        else : @[transplant.scala 150:60]
          node _T_137 = eq(bramOFFST, UInt<7>("h041")) @[transplant.scala 150:29]
          when _T_137 : @[transplant.scala 150:60]
            stateRegType <= UInt<2>("h03") @[transplant.scala 151:22]
            skip @[transplant.scala 150:60]
          else : @[transplant.scala 152:58]
            node _T_139 = eq(bramOFFST, UInt<7>("h042")) @[transplant.scala 152:29]
            when _T_139 : @[transplant.scala 152:58]
              stateRegType <= UInt<2>("h00") @[transplant.scala 153:22]
              skip @[transplant.scala 152:58]
            else : @[transplant.scala 154:44]
              node _T_140 = eq(stateRegType, UInt<2>("h00")) @[transplant.scala 154:32]
              when _T_140 : @[transplant.scala 154:44]
                node _T_141 = eq(stateDir, UInt<1>("h00")) @[transplant.scala 155:23]
                when _T_141 : @[transplant.scala 155:39]
                  fireSig <= UInt<1>("h01") @[transplant.scala 156:19]
                  skip @[transplant.scala 155:39]
                else : @[transplant.scala 157:45]
                  node _T_143 = eq(stateDir, UInt<1>("h01")) @[transplant.scala 157:29]
                  when _T_143 : @[transplant.scala 157:45]
                    doneSig <= UInt<1>("h01") @[transplant.scala 158:19]
                    skip @[transplant.scala 157:45]
                bramOFFST <= UInt<1>("h00") @[transplant.scala 117:15]
                stateRegType <= UInt<2>("h00") @[transplant.scala 118:18]
                freeze <= UInt<1>("h00") @[transplant.scala 119:12]
                state <= UInt<1>("h00") @[transplant.scala 121:11]
                skip @[transplant.scala 154:44]
        skip @[Conditional.scala 39:67]
    io.stateBRAM.en <= UInt<1>("h01") @[transplant.scala 165:19]
    node _T_148 = eq(stateDir, UInt<1>("h01")) @[transplant.scala 166:40]
    node _T_149 = neq(stateRegType, UInt<2>("h00")) @[transplant.scala 166:71]
    node _T_150 = and(_T_148, _T_149) @[transplant.scala 166:55]
    io.stateBRAM.writeEn <= _T_150 @[transplant.scala 166:28]
    io.stateBRAM.addr <= bramOFFST @[transplant.scala 167:21]
    node _T_151 = eq(stateRegType, UInt<2>("h01")) @[transplant.scala 168:21]
    when _T_151 : @[transplant.scala 168:34]
      node _T_152 = bits(bramOFFST, 0, 0) @[transplant.scala 169:45]
      node _T_153 = mux(_T_152, regDataInLSB, regDataInMSB) @[transplant.scala 169:35]
      io.stateBRAM.dataIn <= _T_153 @[transplant.scala 169:29]
      skip @[transplant.scala 168:34]
    else : @[transplant.scala 170:37]
      node _T_154 = eq(stateRegType, UInt<2>("h02")) @[transplant.scala 170:27]
      when _T_154 : @[transplant.scala 170:37]
        node _T_155 = bits(bramOFFST, 0, 0) @[transplant.scala 171:45]
        node _T_156 = bits(io.cpu2tpuState.PC, 31, 0) @[transplant.scala 171:68]
        node _T_157 = bits(io.cpu2tpuState.PC, 63, 32) @[transplant.scala 171:94]
        node _T_158 = mux(_T_155, _T_156, _T_157) @[transplant.scala 171:35]
        io.stateBRAM.dataIn <= _T_158 @[transplant.scala 171:29]
        skip @[transplant.scala 170:37]
      else : @[transplant.scala 172:45]
        node _T_159 = eq(stateRegType, UInt<2>("h03")) @[transplant.scala 172:27]
        when _T_159 : @[transplant.scala 172:45]
          node _T_161 = bits(io.cpu2tpuState.SP, 0, 0) @[transplant.scala 173:59]
          node _T_162 = bits(io.cpu2tpuState.EL, 0, 0) @[transplant.scala 173:82]
          node _T_163 = bits(io.cpu2tpuState.NZCV, 3, 0) @[transplant.scala 173:107]
          node _T_164 = cat(_T_162, _T_163) @[Cat.scala 30:58]
          node _T_165 = cat(UInt<1>("h00"), _T_161) @[Cat.scala 30:58]
          node _T_166 = cat(_T_165, _T_164) @[Cat.scala 30:58]
          io.stateBRAM.dataIn <= _T_166 @[transplant.scala 173:29]
          skip @[transplant.scala 172:45]
        else : @[transplant.scala 174:15]
          io.stateBRAM.dataIn <= UInt<1>("h00") @[transplant.scala 175:29]
          skip @[transplant.scala 174:15]
    node _T_168 = eq(stateDir, UInt<1>("h00")) @[transplant.scala 179:36]
    node _T_169 = eq(stateRegType, UInt<2>("h01")) @[transplant.scala 179:67]
    node _T_170 = and(_T_168, _T_169) @[transplant.scala 179:51]
    reg _T_172 : UInt<1>, clock @[transplant.scala 179:26]
    _T_172 <= _T_170 @[transplant.scala 179:26]
    io.rfile.wen <= _T_172 @[transplant.scala 179:16]
    reg _T_174 : UInt, clock @[transplant.scala 180:28]
    _T_174 <= regAddr @[transplant.scala 180:28]
    io.rfile.waddr <= _T_174 @[transplant.scala 180:18]
    io.rfile.wdata <= bramOut64b @[transplant.scala 181:18]
    io.tpu2cpuState.PC <= bramOut64b @[transplant.scala 183:22]
    node _T_175 = bits(bramOut, 5, 5) @[transplant.scala 209:44]
    io.tpu2cpuState.SP <= _T_175 @[transplant.scala 184:22]
    node _T_176 = bits(bramOut, 4, 4) @[transplant.scala 208:44]
    io.tpu2cpuState.EL <= _T_176 @[transplant.scala 185:22]
    node _T_177 = bits(bramOut, 3, 0) @[transplant.scala 207:46]
    io.tpu2cpuState.NZCV <= _T_177 @[transplant.scala 186:24]
    reg _T_179 : UInt, clock @[transplant.scala 188:37]
    _T_179 <= stateRegType @[transplant.scala 188:37]
    io.tpu2cpuStateReg.bits <= _T_179 @[transplant.scala 188:27]
    node _T_180 = eq(stateDir, UInt<1>("h00")) @[transplant.scala 189:48]
    reg _T_182 : UInt<1>, clock @[transplant.scala 189:38]
    _T_182 <= _T_180 @[transplant.scala 189:38]
    io.tpu2cpuStateReg.valid <= _T_182 @[transplant.scala 189:28]
    reg freezeTag1D : UInt, clock @[transplant.scala 192:28]
    freezeTag1D <= freezeTag @[transplant.scala 192:28]
    reg _T_185 : UInt<1>, clock @[transplant.scala 193:29]
    _T_185 <= fireSig @[transplant.scala 193:29]
    io.tpu2cpu.fire <= _T_185 @[transplant.scala 193:19]
    io.tpu2cpu.fireTag <= freezeTag1D @[transplant.scala 194:22]
    io.tpu2cpu.freeze <= freeze @[transplant.scala 195:21]
    io.tpu2cpu.freezeTag <= freezeTag @[transplant.scala 196:24]
    reg _T_187 : UInt<1>, clock @[transplant.scala 197:30]
    _T_187 <= flushSig @[transplant.scala 197:30]
    io.tpu2cpu.flush <= _T_187 @[transplant.scala 197:20]
    io.tpu2cpu.flushTag <= freezeTag1D @[transplant.scala 198:23]
    reg _T_189 : UInt<1>, clock @[transplant.scala 199:30]
    _T_189 <= doneSig @[transplant.scala 199:30]
    io.host2tpu.done <= _T_189 @[transplant.scala 199:20]
    io.host2tpu.doneTag <= freezeTag1D @[transplant.scala 200:23]
    
  module RFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_addr : UInt<5>, rs1_data : UInt<64>, flip rs2_addr : UInt<5>, rs2_data : UInt<64>, flip waddr : UInt<5>, flip wdata : UInt<64>, flip wen : UInt<1>}
    
    cmem regfile : UInt<64>[32] @[pstate.scala 77:20]
    when io.wen : @[pstate.scala 80:3]
      infer mport _T_21 = regfile[io.waddr], clock @[pstate.scala 81:12]
      _T_21 <= io.wdata @[pstate.scala 81:23]
      skip @[pstate.scala 80:3]
    infer mport _T_22 = regfile[io.rs1_addr], clock @[pstate.scala 84:25]
    io.rs1_data <= _T_22 @[pstate.scala 84:15]
    infer mport _T_23 = regfile[io.rs2_addr], clock @[pstate.scala 85:25]
    io.rs2_data <= _T_23 @[pstate.scala 85:15]
    
  module RFile_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_addr : UInt<5>, rs1_data : UInt<64>, flip rs2_addr : UInt<5>, rs2_data : UInt<64>, flip waddr : UInt<5>, flip wdata : UInt<64>, flip wen : UInt<1>}
    
    cmem regfile : UInt<64>[32] @[pstate.scala 77:20]
    when io.wen : @[pstate.scala 80:3]
      infer mport _T_21 = regfile[io.waddr], clock @[pstate.scala 81:12]
      _T_21 <= io.wdata @[pstate.scala 81:23]
      skip @[pstate.scala 80:3]
    infer mport _T_22 = regfile[io.rs1_addr], clock @[pstate.scala 84:25]
    io.rs1_data <= _T_22 @[pstate.scala 84:15]
    infer mport _T_23 = regfile[io.rs2_addr], clock @[pstate.scala 85:25]
    io.rs2_data <= _T_23 @[pstate.scala 85:15]
    
  module FetchUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip PC : UInt<64>, flip tagIn : UInt<1>, incr : UInt<1>, flip flush : UInt<1>, flip ppageBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {inst : UInt<32>, tag : UInt<1>, pc : UInt<64>}}}
    
    io.ppageBRAM.en <= UInt<1>("h01") @[fetch.scala 36:19]
    node _T_57 = dshr(io.PC, UInt<2>("h02")) @[fetch.scala 37:30]
    io.ppageBRAM.addr <= _T_57 @[fetch.scala 37:21]
    io.ppageBRAM.dataIn <= UInt<1>("h00") @[fetch.scala 38:27]
    io.ppageBRAM.writeEn <= UInt<1>("h00") @[fetch.scala 39:28]
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fetch.scala 42:22]
    reg tag : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[fetch.scala 43:20]
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[fetch.scala 44:19]
    node readIns = or(io.deq.ready, io.flush) @[fetch.scala 45:30]
    when readIns : @[fetch.scala 46:17]
      valid <= io.en @[fetch.scala 47:11]
      tag <= io.tagIn @[fetch.scala 48:9]
      pc <= io.PC @[fetch.scala 49:8]
      skip @[fetch.scala 46:17]
    else : @[fetch.scala 50:15]
      valid <= valid @[fetch.scala 51:11]
      tag <= tag @[fetch.scala 52:9]
      pc <= pc @[fetch.scala 53:8]
      skip @[fetch.scala 50:15]
    wire _T_69 : {valid : UInt<1>, bits : UInt<32>} @[fetch.scala 58:20]
    _T_69.valid <= UInt<1>("h00") @[fetch.scala 59:16]
    _T_69.bits <= UInt<1>("h00") @[fetch.scala 60:15]
    reg instV : {valid : UInt<1>, bits : UInt<32>}, clock with : (reset => (reset, _T_69)) @[fetch.scala 64:22]
    node _T_77 = eq(io.deq.ready, UInt<1>("h00")) @[fetch.scala 65:8]
    reg _T_79 : UInt<1>, clock @[fetch.scala 65:32]
    _T_79 <= io.deq.ready @[fetch.scala 65:32]
    node _T_80 = and(_T_77, _T_79) @[fetch.scala 65:22]
    when _T_80 : @[fetch.scala 65:48]
      instV.valid <= UInt<1>("h01") @[fetch.scala 66:17]
      instV.bits <= io.ppageBRAM.dataOut @[fetch.scala 67:16]
      skip @[fetch.scala 65:48]
    when io.deq.ready : @[fetch.scala 70:22]
      instV.valid <= UInt<1>("h00") @[fetch.scala 71:17]
      skip @[fetch.scala 70:22]
    node _T_83 = and(io.deq.ready, io.en) @[fetch.scala 74:27]
    io.incr <= _T_83 @[fetch.scala 74:11]
    node _T_85 = eq(io.flush, UInt<1>("h00")) @[fetch.scala 75:28]
    node _T_86 = and(valid, _T_85) @[fetch.scala 75:25]
    io.deq.valid <= _T_86 @[fetch.scala 75:16]
    io.deq.bits.tag <= tag @[fetch.scala 76:19]
    io.deq.bits.pc <= pc @[fetch.scala 77:18]
    node _T_87 = mux(instV.valid, instV.bits, io.ppageBRAM.dataOut) @[fetch.scala 78:26]
    io.deq.bits.inst <= _T_87 @[fetch.scala 78:20]
    
  module DecodeUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip finst : {inst : UInt<32>, tag : UInt<1>, pc : UInt<64>}, tp_req : UInt<1>, dinst : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}
    
    node _T_39 = bits(io.finst.inst, 7, 0) @[decode.scala 130:33]
    node _T_40 = bits(io.finst.inst, 15, 8) @[decode.scala 130:44]
    node _T_41 = bits(io.finst.inst, 23, 16) @[decode.scala 130:56]
    node _T_42 = bits(io.finst.inst, 31, 24) @[decode.scala 130:69]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 30:58]
    node _T_44 = cat(_T_39, _T_40) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    wire instBE : UInt
    instBE <= _T_45
    wire dinst : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>} @[decode.scala 131:19]
    node _T_50 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_51 = eq(UInt<32>("h08a000000"), _T_50) @[Lookup.scala 9:38]
    node _T_54 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_55 = eq(UInt<32>("h08a200000"), _T_54) @[Lookup.scala 9:38]
    node _T_58 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_59 = eq(UInt<32>("h0aa000000"), _T_58) @[Lookup.scala 9:38]
    node _T_62 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_63 = eq(UInt<32>("h0aa200000"), _T_62) @[Lookup.scala 9:38]
    node _T_66 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_67 = eq(UInt<32>("h0ca000000"), _T_66) @[Lookup.scala 9:38]
    node _T_70 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_71 = eq(UInt<32>("h0ca200000"), _T_70) @[Lookup.scala 9:38]
    node _T_74 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_75 = eq(UInt<32>("h0ea000000"), _T_74) @[Lookup.scala 9:38]
    node _T_78 = and(instBE, UInt<32>("h0ff200000")) @[Lookup.scala 9:38]
    node _T_79 = eq(UInt<32>("h0ea200000"), _T_78) @[Lookup.scala 9:38]
    node _T_82 = and(instBE, UInt<32>("h0fc000000")) @[Lookup.scala 9:38]
    node _T_83 = eq(UInt<29>("h014000000"), _T_82) @[Lookup.scala 9:38]
    node _T_86 = and(instBE, UInt<32>("h0fc000000")) @[Lookup.scala 9:38]
    node _T_87 = eq(UInt<32>("h094000000"), _T_86) @[Lookup.scala 9:38]
    node _T_90 = and(instBE, UInt<32>("h0ff000010")) @[Lookup.scala 9:38]
    node _T_91 = eq(UInt<31>("h054000000"), _T_90) @[Lookup.scala 9:38]
    node _T_94 = and(instBE, UInt<32>("h0ff800000")) @[Lookup.scala 9:38]
    node _T_95 = eq(UInt<32>("h091000000"), _T_94) @[Lookup.scala 9:38]
    node _T_98 = and(instBE, UInt<32>("h0ff800000")) @[Lookup.scala 9:38]
    node _T_99 = eq(UInt<32>("h0b1000000"), _T_98) @[Lookup.scala 9:38]
    node _T_102 = and(instBE, UInt<32>("h0ff800000")) @[Lookup.scala 9:38]
    node _T_103 = eq(UInt<32>("h0d1000000"), _T_102) @[Lookup.scala 9:38]
    node _T_106 = and(instBE, UInt<32>("h0ff800000")) @[Lookup.scala 9:38]
    node _T_107 = eq(UInt<32>("h0f1000000"), _T_106) @[Lookup.scala 9:38]
    node _T_110 = and(instBE, UInt<32>("h0ff000000")) @[Lookup.scala 9:38]
    node _T_111 = eq(UInt<31>("h058000000"), _T_110) @[Lookup.scala 9:38]
    node _T_112 = mux(_T_111, UInt<3>("h05"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_113 = mux(_T_107, UInt<3>("h04"), _T_112) @[Lookup.scala 11:37]
    node _T_114 = mux(_T_103, UInt<3>("h04"), _T_113) @[Lookup.scala 11:37]
    node _T_115 = mux(_T_99, UInt<3>("h04"), _T_114) @[Lookup.scala 11:37]
    node _T_116 = mux(_T_95, UInt<3>("h04"), _T_115) @[Lookup.scala 11:37]
    node _T_117 = mux(_T_91, UInt<3>("h03"), _T_116) @[Lookup.scala 11:37]
    node _T_118 = mux(_T_87, UInt<3>("h02"), _T_117) @[Lookup.scala 11:37]
    node _T_119 = mux(_T_83, UInt<3>("h02"), _T_118) @[Lookup.scala 11:37]
    node _T_120 = mux(_T_79, UInt<3>("h01"), _T_119) @[Lookup.scala 11:37]
    node _T_121 = mux(_T_75, UInt<3>("h01"), _T_120) @[Lookup.scala 11:37]
    node _T_122 = mux(_T_71, UInt<3>("h01"), _T_121) @[Lookup.scala 11:37]
    node _T_123 = mux(_T_67, UInt<3>("h01"), _T_122) @[Lookup.scala 11:37]
    node _T_124 = mux(_T_63, UInt<3>("h01"), _T_123) @[Lookup.scala 11:37]
    node _T_125 = mux(_T_59, UInt<3>("h01"), _T_124) @[Lookup.scala 11:37]
    node _T_126 = mux(_T_55, UInt<3>("h01"), _T_125) @[Lookup.scala 11:37]
    node _T_127 = mux(_T_51, UInt<3>("h01"), _T_126) @[Lookup.scala 11:37]
    node _T_128 = mux(_T_111, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 11:37]
    node _T_129 = mux(_T_107, UInt<3>("h07"), _T_128) @[Lookup.scala 11:37]
    node _T_130 = mux(_T_103, UInt<3>("h07"), _T_129) @[Lookup.scala 11:37]
    node _T_131 = mux(_T_99, UInt<3>("h06"), _T_130) @[Lookup.scala 11:37]
    node _T_132 = mux(_T_95, UInt<3>("h06"), _T_131) @[Lookup.scala 11:37]
    node _T_133 = mux(_T_91, UInt<3>("h01"), _T_132) @[Lookup.scala 11:37]
    node _T_134 = mux(_T_87, UInt<3>("h00"), _T_133) @[Lookup.scala 11:37]
    node _T_135 = mux(_T_83, UInt<3>("h00"), _T_134) @[Lookup.scala 11:37]
    node _T_136 = mux(_T_79, UInt<3>("h01"), _T_135) @[Lookup.scala 11:37]
    node _T_137 = mux(_T_75, UInt<3>("h00"), _T_136) @[Lookup.scala 11:37]
    node _T_138 = mux(_T_71, UInt<3>("h05"), _T_137) @[Lookup.scala 11:37]
    node _T_139 = mux(_T_67, UInt<3>("h04"), _T_138) @[Lookup.scala 11:37]
    node _T_140 = mux(_T_63, UInt<3>("h03"), _T_139) @[Lookup.scala 11:37]
    node _T_141 = mux(_T_59, UInt<3>("h02"), _T_140) @[Lookup.scala 11:37]
    node _T_142 = mux(_T_55, UInt<3>("h01"), _T_141) @[Lookup.scala 11:37]
    node _T_143 = mux(_T_51, UInt<3>("h00"), _T_142) @[Lookup.scala 11:37]
    node _T_144 = mux(_T_111, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_145 = mux(_T_107, UInt<1>("h01"), _T_144) @[Lookup.scala 11:37]
    node _T_146 = mux(_T_103, UInt<1>("h01"), _T_145) @[Lookup.scala 11:37]
    node _T_147 = mux(_T_99, UInt<1>("h01"), _T_146) @[Lookup.scala 11:37]
    node _T_148 = mux(_T_95, UInt<1>("h01"), _T_147) @[Lookup.scala 11:37]
    node _T_149 = mux(_T_91, UInt<1>("h00"), _T_148) @[Lookup.scala 11:37]
    node _T_150 = mux(_T_87, UInt<1>("h00"), _T_149) @[Lookup.scala 11:37]
    node _T_151 = mux(_T_83, UInt<1>("h00"), _T_150) @[Lookup.scala 11:37]
    node _T_152 = mux(_T_79, UInt<1>("h01"), _T_151) @[Lookup.scala 11:37]
    node _T_153 = mux(_T_75, UInt<1>("h01"), _T_152) @[Lookup.scala 11:37]
    node _T_154 = mux(_T_71, UInt<1>("h01"), _T_153) @[Lookup.scala 11:37]
    node _T_155 = mux(_T_67, UInt<1>("h01"), _T_154) @[Lookup.scala 11:37]
    node _T_156 = mux(_T_63, UInt<1>("h01"), _T_155) @[Lookup.scala 11:37]
    node _T_157 = mux(_T_59, UInt<1>("h01"), _T_156) @[Lookup.scala 11:37]
    node _T_158 = mux(_T_55, UInt<1>("h01"), _T_157) @[Lookup.scala 11:37]
    node _T_159 = mux(_T_51, UInt<1>("h01"), _T_158) @[Lookup.scala 11:37]
    node _T_160 = mux(_T_111, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_161 = mux(_T_107, UInt<1>("h01"), _T_160) @[Lookup.scala 11:37]
    node _T_162 = mux(_T_103, UInt<1>("h01"), _T_161) @[Lookup.scala 11:37]
    node _T_163 = mux(_T_99, UInt<1>("h01"), _T_162) @[Lookup.scala 11:37]
    node _T_164 = mux(_T_95, UInt<1>("h01"), _T_163) @[Lookup.scala 11:37]
    node _T_165 = mux(_T_91, UInt<1>("h00"), _T_164) @[Lookup.scala 11:37]
    node _T_166 = mux(_T_87, UInt<1>("h00"), _T_165) @[Lookup.scala 11:37]
    node _T_167 = mux(_T_83, UInt<1>("h00"), _T_166) @[Lookup.scala 11:37]
    node _T_168 = mux(_T_79, UInt<1>("h01"), _T_167) @[Lookup.scala 11:37]
    node _T_169 = mux(_T_75, UInt<1>("h01"), _T_168) @[Lookup.scala 11:37]
    node _T_170 = mux(_T_71, UInt<1>("h01"), _T_169) @[Lookup.scala 11:37]
    node _T_171 = mux(_T_67, UInt<1>("h01"), _T_170) @[Lookup.scala 11:37]
    node _T_172 = mux(_T_63, UInt<1>("h01"), _T_171) @[Lookup.scala 11:37]
    node _T_173 = mux(_T_59, UInt<1>("h01"), _T_172) @[Lookup.scala 11:37]
    node _T_174 = mux(_T_55, UInt<1>("h01"), _T_173) @[Lookup.scala 11:37]
    node _T_175 = mux(_T_51, UInt<1>("h01"), _T_174) @[Lookup.scala 11:37]
    node _T_176 = mux(_T_111, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_177 = mux(_T_107, UInt<1>("h00"), _T_176) @[Lookup.scala 11:37]
    node _T_178 = mux(_T_103, UInt<1>("h00"), _T_177) @[Lookup.scala 11:37]
    node _T_179 = mux(_T_99, UInt<1>("h00"), _T_178) @[Lookup.scala 11:37]
    node _T_180 = mux(_T_95, UInt<1>("h00"), _T_179) @[Lookup.scala 11:37]
    node _T_181 = mux(_T_91, UInt<1>("h00"), _T_180) @[Lookup.scala 11:37]
    node _T_182 = mux(_T_87, UInt<1>("h00"), _T_181) @[Lookup.scala 11:37]
    node _T_183 = mux(_T_83, UInt<1>("h00"), _T_182) @[Lookup.scala 11:37]
    node _T_184 = mux(_T_79, UInt<1>("h01"), _T_183) @[Lookup.scala 11:37]
    node _T_185 = mux(_T_75, UInt<1>("h01"), _T_184) @[Lookup.scala 11:37]
    node _T_186 = mux(_T_71, UInt<1>("h01"), _T_185) @[Lookup.scala 11:37]
    node _T_187 = mux(_T_67, UInt<1>("h01"), _T_186) @[Lookup.scala 11:37]
    node _T_188 = mux(_T_63, UInt<1>("h01"), _T_187) @[Lookup.scala 11:37]
    node _T_189 = mux(_T_59, UInt<1>("h01"), _T_188) @[Lookup.scala 11:37]
    node _T_190 = mux(_T_55, UInt<1>("h01"), _T_189) @[Lookup.scala 11:37]
    node _T_191 = mux(_T_51, UInt<1>("h01"), _T_190) @[Lookup.scala 11:37]
    node _T_192 = mux(_T_111, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_193 = mux(_T_107, UInt<1>("h01"), _T_192) @[Lookup.scala 11:37]
    node _T_194 = mux(_T_103, UInt<1>("h01"), _T_193) @[Lookup.scala 11:37]
    node _T_195 = mux(_T_99, UInt<1>("h01"), _T_194) @[Lookup.scala 11:37]
    node _T_196 = mux(_T_95, UInt<1>("h01"), _T_195) @[Lookup.scala 11:37]
    node _T_197 = mux(_T_91, UInt<1>("h01"), _T_196) @[Lookup.scala 11:37]
    node _T_198 = mux(_T_87, UInt<1>("h01"), _T_197) @[Lookup.scala 11:37]
    node _T_199 = mux(_T_83, UInt<1>("h01"), _T_198) @[Lookup.scala 11:37]
    node _T_200 = mux(_T_79, UInt<1>("h00"), _T_199) @[Lookup.scala 11:37]
    node _T_201 = mux(_T_75, UInt<1>("h00"), _T_200) @[Lookup.scala 11:37]
    node _T_202 = mux(_T_71, UInt<1>("h00"), _T_201) @[Lookup.scala 11:37]
    node _T_203 = mux(_T_67, UInt<1>("h00"), _T_202) @[Lookup.scala 11:37]
    node _T_204 = mux(_T_63, UInt<1>("h00"), _T_203) @[Lookup.scala 11:37]
    node _T_205 = mux(_T_59, UInt<1>("h00"), _T_204) @[Lookup.scala 11:37]
    node _T_206 = mux(_T_55, UInt<1>("h00"), _T_205) @[Lookup.scala 11:37]
    node _T_207 = mux(_T_51, UInt<1>("h00"), _T_206) @[Lookup.scala 11:37]
    node _T_208 = mux(_T_111, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_209 = mux(_T_107, UInt<1>("h01"), _T_208) @[Lookup.scala 11:37]
    node _T_210 = mux(_T_103, UInt<1>("h01"), _T_209) @[Lookup.scala 11:37]
    node _T_211 = mux(_T_99, UInt<1>("h01"), _T_210) @[Lookup.scala 11:37]
    node _T_212 = mux(_T_95, UInt<1>("h01"), _T_211) @[Lookup.scala 11:37]
    node _T_213 = mux(_T_91, UInt<1>("h00"), _T_212) @[Lookup.scala 11:37]
    node _T_214 = mux(_T_87, UInt<1>("h00"), _T_213) @[Lookup.scala 11:37]
    node _T_215 = mux(_T_83, UInt<1>("h00"), _T_214) @[Lookup.scala 11:37]
    node _T_216 = mux(_T_79, UInt<1>("h01"), _T_215) @[Lookup.scala 11:37]
    node _T_217 = mux(_T_75, UInt<1>("h01"), _T_216) @[Lookup.scala 11:37]
    node _T_218 = mux(_T_71, UInt<1>("h01"), _T_217) @[Lookup.scala 11:37]
    node _T_219 = mux(_T_67, UInt<1>("h01"), _T_218) @[Lookup.scala 11:37]
    node _T_220 = mux(_T_63, UInt<1>("h01"), _T_219) @[Lookup.scala 11:37]
    node _T_221 = mux(_T_59, UInt<1>("h01"), _T_220) @[Lookup.scala 11:37]
    node _T_222 = mux(_T_55, UInt<1>("h01"), _T_221) @[Lookup.scala 11:37]
    node _T_223 = mux(_T_51, UInt<1>("h01"), _T_222) @[Lookup.scala 11:37]
    node _T_224 = mux(_T_111, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_225 = mux(_T_107, UInt<1>("h00"), _T_224) @[Lookup.scala 11:37]
    node _T_226 = mux(_T_103, UInt<1>("h00"), _T_225) @[Lookup.scala 11:37]
    node _T_227 = mux(_T_99, UInt<1>("h00"), _T_226) @[Lookup.scala 11:37]
    node _T_228 = mux(_T_95, UInt<1>("h00"), _T_227) @[Lookup.scala 11:37]
    node _T_229 = mux(_T_91, UInt<1>("h01"), _T_228) @[Lookup.scala 11:37]
    node _T_230 = mux(_T_87, UInt<1>("h00"), _T_229) @[Lookup.scala 11:37]
    node _T_231 = mux(_T_83, UInt<1>("h00"), _T_230) @[Lookup.scala 11:37]
    node _T_232 = mux(_T_79, UInt<1>("h00"), _T_231) @[Lookup.scala 11:37]
    node _T_233 = mux(_T_75, UInt<1>("h00"), _T_232) @[Lookup.scala 11:37]
    node _T_234 = mux(_T_71, UInt<1>("h00"), _T_233) @[Lookup.scala 11:37]
    node _T_235 = mux(_T_67, UInt<1>("h00"), _T_234) @[Lookup.scala 11:37]
    node _T_236 = mux(_T_63, UInt<1>("h00"), _T_235) @[Lookup.scala 11:37]
    node _T_237 = mux(_T_59, UInt<1>("h00"), _T_236) @[Lookup.scala 11:37]
    node _T_238 = mux(_T_55, UInt<1>("h00"), _T_237) @[Lookup.scala 11:37]
    node _T_239 = mux(_T_51, UInt<1>("h00"), _T_238) @[Lookup.scala 11:37]
    node _T_240 = mux(_T_111, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_241 = mux(_T_107, UInt<1>("h01"), _T_240) @[Lookup.scala 11:37]
    node _T_242 = mux(_T_103, UInt<1>("h00"), _T_241) @[Lookup.scala 11:37]
    node _T_243 = mux(_T_99, UInt<1>("h01"), _T_242) @[Lookup.scala 11:37]
    node _T_244 = mux(_T_95, UInt<1>("h00"), _T_243) @[Lookup.scala 11:37]
    node _T_245 = mux(_T_91, UInt<1>("h00"), _T_244) @[Lookup.scala 11:37]
    node _T_246 = mux(_T_87, UInt<1>("h00"), _T_245) @[Lookup.scala 11:37]
    node _T_247 = mux(_T_83, UInt<1>("h00"), _T_246) @[Lookup.scala 11:37]
    node _T_248 = mux(_T_79, UInt<1>("h01"), _T_247) @[Lookup.scala 11:37]
    node _T_249 = mux(_T_75, UInt<1>("h01"), _T_248) @[Lookup.scala 11:37]
    node _T_250 = mux(_T_71, UInt<1>("h00"), _T_249) @[Lookup.scala 11:37]
    node _T_251 = mux(_T_67, UInt<1>("h00"), _T_250) @[Lookup.scala 11:37]
    node _T_252 = mux(_T_63, UInt<1>("h00"), _T_251) @[Lookup.scala 11:37]
    node _T_253 = mux(_T_59, UInt<1>("h00"), _T_252) @[Lookup.scala 11:37]
    node _T_254 = mux(_T_55, UInt<1>("h00"), _T_253) @[Lookup.scala 11:37]
    node _T_255 = mux(_T_51, UInt<1>("h00"), _T_254) @[Lookup.scala 11:37]
    node _T_256 = mux(_T_111, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 11:37]
    node _T_257 = mux(_T_107, UInt<1>("h01"), _T_256) @[Lookup.scala 11:37]
    node _T_258 = mux(_T_103, UInt<1>("h01"), _T_257) @[Lookup.scala 11:37]
    node _T_259 = mux(_T_99, UInt<1>("h01"), _T_258) @[Lookup.scala 11:37]
    node _T_260 = mux(_T_95, UInt<1>("h01"), _T_259) @[Lookup.scala 11:37]
    node _T_261 = mux(_T_91, UInt<1>("h01"), _T_260) @[Lookup.scala 11:37]
    node _T_262 = mux(_T_87, UInt<1>("h01"), _T_261) @[Lookup.scala 11:37]
    node _T_263 = mux(_T_83, UInt<1>("h01"), _T_262) @[Lookup.scala 11:37]
    node _T_264 = mux(_T_79, UInt<1>("h01"), _T_263) @[Lookup.scala 11:37]
    node _T_265 = mux(_T_75, UInt<1>("h01"), _T_264) @[Lookup.scala 11:37]
    node _T_266 = mux(_T_71, UInt<1>("h01"), _T_265) @[Lookup.scala 11:37]
    node _T_267 = mux(_T_67, UInt<1>("h01"), _T_266) @[Lookup.scala 11:37]
    node _T_268 = mux(_T_63, UInt<1>("h01"), _T_267) @[Lookup.scala 11:37]
    node _T_269 = mux(_T_59, UInt<1>("h01"), _T_268) @[Lookup.scala 11:37]
    node _T_270 = mux(_T_55, UInt<1>("h01"), _T_269) @[Lookup.scala 11:37]
    node _T_271 = mux(_T_51, UInt<1>("h01"), _T_270) @[Lookup.scala 11:37]
    node _T_272 = bits(instBE, 4, 0) @[decode.scala 47:62]
    node _T_273 = bits(instBE, 4, 0) @[decode.scala 48:62]
    node _T_274 = bits(instBE, 4, 0) @[decode.scala 49:62]
    node _T_275 = eq(UInt<3>("h05"), _T_127) @[Mux.scala 46:19]
    node _T_276 = mux(_T_275, _T_274, UInt<5>("h00")) @[Mux.scala 46:16]
    node _T_277 = eq(UInt<3>("h04"), _T_127) @[Mux.scala 46:19]
    node _T_278 = mux(_T_277, _T_273, _T_276) @[Mux.scala 46:16]
    node _T_279 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_280 = mux(_T_279, _T_272, _T_278) @[Mux.scala 46:16]
    dinst.rd <= _T_280 @[decode.scala 47:11]
    node _T_281 = bits(instBE, 9, 5) @[decode.scala 50:62]
    node _T_282 = bits(instBE, 9, 5) @[decode.scala 51:62]
    node _T_283 = eq(UInt<3>("h04"), _T_127) @[Mux.scala 46:19]
    node _T_284 = mux(_T_283, _T_282, UInt<5>("h00")) @[Mux.scala 46:16]
    node _T_285 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_286 = mux(_T_285, _T_281, _T_284) @[Mux.scala 46:16]
    dinst.rs1 <= _T_286 @[decode.scala 50:11]
    node _T_287 = bits(instBE, 20, 16) @[decode.scala 52:62]
    node _T_288 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_289 = mux(_T_288, _T_287, UInt<5>("h00")) @[Mux.scala 46:16]
    dinst.rs2 <= _T_289 @[decode.scala 52:11]
    node _T_290 = bits(instBE, 15, 10) @[decode.scala 53:62]
    node _T_291 = bits(instBE, 25, 0) @[decode.scala 54:62]
    node _T_292 = bits(instBE, 23, 5) @[decode.scala 55:62]
    node _T_293 = bits(instBE, 21, 10) @[decode.scala 56:62]
    node _T_294 = bits(instBE, 23, 5) @[decode.scala 57:62]
    node _T_295 = eq(UInt<3>("h05"), _T_127) @[Mux.scala 46:19]
    node _T_296 = mux(_T_295, _T_294, UInt<26>("h00")) @[Mux.scala 46:16]
    node _T_297 = eq(UInt<3>("h04"), _T_127) @[Mux.scala 46:19]
    node _T_298 = mux(_T_297, _T_293, _T_296) @[Mux.scala 46:16]
    node _T_299 = eq(UInt<3>("h03"), _T_127) @[Mux.scala 46:19]
    node _T_300 = mux(_T_299, _T_292, _T_298) @[Mux.scala 46:16]
    node _T_301 = eq(UInt<3>("h02"), _T_127) @[Mux.scala 46:19]
    node _T_302 = mux(_T_301, _T_291, _T_300) @[Mux.scala 46:16]
    node _T_303 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_304 = mux(_T_303, _T_290, _T_302) @[Mux.scala 46:16]
    dinst.imm <= _T_304 @[decode.scala 53:11]
    node _T_305 = bits(instBE, 22, 22) @[decode.scala 58:73]
    node _T_308 = mux(_T_305, UInt<4>("h0c"), UInt<1>("h00")) @[decode.scala 58:68]
    node _T_309 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_310 = mux(_T_309, dinst.imm, UInt<6>("h00")) @[Mux.scala 46:16]
    node _T_311 = eq(UInt<3>("h04"), _T_127) @[Mux.scala 46:19]
    node _T_312 = mux(_T_311, _T_308, _T_310) @[Mux.scala 46:16]
    dinst.shift_val <= _T_312 @[decode.scala 58:15]
    node _T_313 = bits(instBE, 23, 22) @[decode.scala 60:72]
    node _T_314 = bits(instBE, 23, 22) @[decode.scala 61:62]
    node _T_315 = eq(UInt<3>("h04"), _T_127) @[Mux.scala 46:19]
    node _T_316 = mux(_T_315, _T_314, UInt<2>("h00")) @[Mux.scala 46:16]
    node _T_317 = eq(UInt<3>("h01"), _T_127) @[Mux.scala 46:19]
    node _T_318 = mux(_T_317, _T_313, _T_316) @[Mux.scala 46:16]
    dinst.shift_type <= _T_318 @[decode.scala 60:16]
    node _T_319 = bits(instBE, 3, 0) @[decode.scala 62:62]
    node _T_320 = eq(UInt<3>("h03"), _T_127) @[Mux.scala 46:19]
    node _T_321 = mux(_T_320, _T_319, UInt<4>("h00")) @[Mux.scala 46:16]
    dinst.cond <= _T_321 @[decode.scala 62:11]
    dinst.op <= _T_143 @[decode.scala 67:49]
    dinst.rd_en <= _T_159 @[decode.scala 67:49]
    dinst.rs1_en <= _T_175 @[decode.scala 67:49]
    dinst.rs2_en <= _T_191 @[decode.scala 67:49]
    dinst.imm_en <= _T_207 @[decode.scala 67:49]
    dinst.shift_en <= _T_223 @[decode.scala 67:49]
    dinst.cond_en <= _T_239 @[decode.scala 67:49]
    dinst.nzcv_en <= _T_255 @[decode.scala 67:49]
    dinst.inst_en <= _T_271 @[decode.scala 67:49]
    dinst.itype <= _T_127 @[decode.scala 69:16]
    dinst.tag <= io.finst.tag @[decode.scala 71:14]
    dinst.inst <= instBE @[decode.scala 72:15]
    dinst.pc <= io.finst.pc @[decode.scala 132:12]
    io.dinst.pc <= dinst.pc @[decode.scala 133:12]
    io.dinst.inst <= dinst.inst @[decode.scala 133:12]
    io.dinst.tag <= dinst.tag @[decode.scala 133:12]
    io.dinst.inst_en <= dinst.inst_en @[decode.scala 133:12]
    io.dinst.nzcv_en <= dinst.nzcv_en @[decode.scala 133:12]
    io.dinst.cond_en <= dinst.cond_en @[decode.scala 133:12]
    io.dinst.shift_en <= dinst.shift_en @[decode.scala 133:12]
    io.dinst.imm_en <= dinst.imm_en @[decode.scala 133:12]
    io.dinst.rs2_en <= dinst.rs2_en @[decode.scala 133:12]
    io.dinst.rs1_en <= dinst.rs1_en @[decode.scala 133:12]
    io.dinst.rd_en <= dinst.rd_en @[decode.scala 133:12]
    io.dinst.op <= dinst.op @[decode.scala 133:12]
    io.dinst.itype <= dinst.itype @[decode.scala 133:12]
    io.dinst.cond <= dinst.cond @[decode.scala 133:12]
    io.dinst.shift_type <= dinst.shift_type @[decode.scala 133:12]
    io.dinst.shift_val <= dinst.shift_val @[decode.scala 133:12]
    io.dinst.imm <= dinst.imm @[decode.scala 133:12]
    io.dinst.rs2 <= dinst.rs2 @[decode.scala 133:12]
    io.dinst.rs1 <= dinst.rs1 @[decode.scala 133:12]
    io.dinst.rd <= dinst.rd @[decode.scala 133:12]
    io.tp_req <= dinst.inst_en @[decode.scala 134:13]
    
  module FReg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, flip flush : UInt<1>}
    
    reg _T_34 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}, clock @[FReg.scala 45:24]
    reg _T_37 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FReg.scala 46:30]
    node _T_39 = eq(_T_37, UInt<1>("h00")) @[FReg.scala 48:33]
    node _T_40 = or(_T_39, io.deq.ready) @[FReg.scala 48:40]
    node _T_41 = or(_T_40, io.flush) @[FReg.scala 48:56]
    wire _T_43 : UInt<1>
    _T_43 <= _T_41
    when _T_43 : @[FReg.scala 50:17]
      _T_34.pc <= io.enq.bits.pc @[FReg.scala 51:9]
      _T_34.inst <= io.enq.bits.inst @[FReg.scala 51:9]
      _T_34.tag <= io.enq.bits.tag @[FReg.scala 51:9]
      _T_34.inst_en <= io.enq.bits.inst_en @[FReg.scala 51:9]
      _T_34.nzcv_en <= io.enq.bits.nzcv_en @[FReg.scala 51:9]
      _T_34.cond_en <= io.enq.bits.cond_en @[FReg.scala 51:9]
      _T_34.shift_en <= io.enq.bits.shift_en @[FReg.scala 51:9]
      _T_34.imm_en <= io.enq.bits.imm_en @[FReg.scala 51:9]
      _T_34.rs2_en <= io.enq.bits.rs2_en @[FReg.scala 51:9]
      _T_34.rs1_en <= io.enq.bits.rs1_en @[FReg.scala 51:9]
      _T_34.rd_en <= io.enq.bits.rd_en @[FReg.scala 51:9]
      _T_34.op <= io.enq.bits.op @[FReg.scala 51:9]
      _T_34.itype <= io.enq.bits.itype @[FReg.scala 51:9]
      _T_34.cond <= io.enq.bits.cond @[FReg.scala 51:9]
      _T_34.shift_type <= io.enq.bits.shift_type @[FReg.scala 51:9]
      _T_34.shift_val <= io.enq.bits.shift_val @[FReg.scala 51:9]
      _T_34.imm <= io.enq.bits.imm @[FReg.scala 51:9]
      _T_34.rs2 <= io.enq.bits.rs2 @[FReg.scala 51:9]
      _T_34.rs1 <= io.enq.bits.rs1 @[FReg.scala 51:9]
      _T_34.rd <= io.enq.bits.rd @[FReg.scala 51:9]
      _T_37 <= io.enq.valid @[FReg.scala 52:11]
      skip @[FReg.scala 50:17]
    io.enq.ready <= _T_43 @[FReg.scala 54:16]
    io.deq.bits.pc <= _T_34.pc @[FReg.scala 56:15]
    io.deq.bits.inst <= _T_34.inst @[FReg.scala 56:15]
    io.deq.bits.tag <= _T_34.tag @[FReg.scala 56:15]
    io.deq.bits.inst_en <= _T_34.inst_en @[FReg.scala 56:15]
    io.deq.bits.nzcv_en <= _T_34.nzcv_en @[FReg.scala 56:15]
    io.deq.bits.cond_en <= _T_34.cond_en @[FReg.scala 56:15]
    io.deq.bits.shift_en <= _T_34.shift_en @[FReg.scala 56:15]
    io.deq.bits.imm_en <= _T_34.imm_en @[FReg.scala 56:15]
    io.deq.bits.rs2_en <= _T_34.rs2_en @[FReg.scala 56:15]
    io.deq.bits.rs1_en <= _T_34.rs1_en @[FReg.scala 56:15]
    io.deq.bits.rd_en <= _T_34.rd_en @[FReg.scala 56:15]
    io.deq.bits.op <= _T_34.op @[FReg.scala 56:15]
    io.deq.bits.itype <= _T_34.itype @[FReg.scala 56:15]
    io.deq.bits.cond <= _T_34.cond @[FReg.scala 56:15]
    io.deq.bits.shift_type <= _T_34.shift_type @[FReg.scala 56:15]
    io.deq.bits.shift_val <= _T_34.shift_val @[FReg.scala 56:15]
    io.deq.bits.imm <= _T_34.imm @[FReg.scala 56:15]
    io.deq.bits.rs2 <= _T_34.rs2 @[FReg.scala 56:15]
    io.deq.bits.rs1 <= _T_34.rs1 @[FReg.scala 56:15]
    io.deq.bits.rd <= _T_34.rd @[FReg.scala 56:15]
    node _T_45 = eq(io.flush, UInt<1>("h00")) @[FReg.scala 57:28]
    node _T_46 = and(_T_37, _T_45) @[FReg.scala 57:25]
    io.deq.valid <= _T_46 @[FReg.scala 57:16]
    
  module Queue : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, count : UInt<2>}
    
    cmem _T_35 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}[2] @[Decoupled.scala 215:24]
    reg value : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 26:33]
    reg value_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 26:33]
    reg _T_42 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 218:35]
    node _T_43 = eq(value, value_1) @[Decoupled.scala 220:41]
    node _T_45 = eq(_T_42, UInt<1>("h00")) @[Decoupled.scala 221:36]
    node _T_46 = and(_T_43, _T_45) @[Decoupled.scala 221:33]
    node _T_47 = and(_T_43, _T_42) @[Decoupled.scala 222:32]
    node _T_48 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 37:37]
    wire _T_50 : UInt<1>
    _T_50 <= _T_48
    node _T_51 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 37:37]
    wire _T_53 : UInt<1>
    _T_53 <= _T_51
    when _T_50 : @[Decoupled.scala 226:17]
      infer mport _T_54 = _T_35[value], clock @[Decoupled.scala 227:8]
      _T_54.pc <= io.enq.bits.pc @[Decoupled.scala 227:24]
      _T_54.inst <= io.enq.bits.inst @[Decoupled.scala 227:24]
      _T_54.tag <= io.enq.bits.tag @[Decoupled.scala 227:24]
      _T_54.inst_en <= io.enq.bits.inst_en @[Decoupled.scala 227:24]
      _T_54.nzcv_en <= io.enq.bits.nzcv_en @[Decoupled.scala 227:24]
      _T_54.cond_en <= io.enq.bits.cond_en @[Decoupled.scala 227:24]
      _T_54.shift_en <= io.enq.bits.shift_en @[Decoupled.scala 227:24]
      _T_54.imm_en <= io.enq.bits.imm_en @[Decoupled.scala 227:24]
      _T_54.rs2_en <= io.enq.bits.rs2_en @[Decoupled.scala 227:24]
      _T_54.rs1_en <= io.enq.bits.rs1_en @[Decoupled.scala 227:24]
      _T_54.rd_en <= io.enq.bits.rd_en @[Decoupled.scala 227:24]
      _T_54.op <= io.enq.bits.op @[Decoupled.scala 227:24]
      _T_54.itype <= io.enq.bits.itype @[Decoupled.scala 227:24]
      _T_54.cond <= io.enq.bits.cond @[Decoupled.scala 227:24]
      _T_54.shift_type <= io.enq.bits.shift_type @[Decoupled.scala 227:24]
      _T_54.shift_val <= io.enq.bits.shift_val @[Decoupled.scala 227:24]
      _T_54.imm <= io.enq.bits.imm @[Decoupled.scala 227:24]
      _T_54.rs2 <= io.enq.bits.rs2 @[Decoupled.scala 227:24]
      _T_54.rs1 <= io.enq.bits.rs1 @[Decoupled.scala 227:24]
      _T_54.rd <= io.enq.bits.rd @[Decoupled.scala 227:24]
      node wrap = eq(value, UInt<1>("h01")) @[Counter.scala 34:24]
      node _T_57 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_58 = tail(_T_57, 1) @[Counter.scala 35:22]
      value <= _T_58 @[Counter.scala 35:13]
      skip @[Decoupled.scala 226:17]
    when _T_53 : @[Decoupled.scala 230:17]
      node wrap_1 = eq(value_1, UInt<1>("h01")) @[Counter.scala 34:24]
      node _T_61 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_62 = tail(_T_61, 1) @[Counter.scala 35:22]
      value_1 <= _T_62 @[Counter.scala 35:13]
      skip @[Decoupled.scala 230:17]
    node _T_63 = neq(_T_50, _T_53) @[Decoupled.scala 233:16]
    when _T_63 : @[Decoupled.scala 233:28]
      _T_42 <= _T_50 @[Decoupled.scala 234:16]
      skip @[Decoupled.scala 233:28]
    node _T_65 = eq(_T_46, UInt<1>("h00")) @[Decoupled.scala 237:19]
    io.deq.valid <= _T_65 @[Decoupled.scala 237:16]
    node _T_67 = eq(_T_47, UInt<1>("h00")) @[Decoupled.scala 238:19]
    io.enq.ready <= _T_67 @[Decoupled.scala 238:16]
    infer mport _T_68 = _T_35[value_1], clock @[Decoupled.scala 239:21]
    io.deq.bits.pc <= _T_68.pc @[Decoupled.scala 239:15]
    io.deq.bits.inst <= _T_68.inst @[Decoupled.scala 239:15]
    io.deq.bits.tag <= _T_68.tag @[Decoupled.scala 239:15]
    io.deq.bits.inst_en <= _T_68.inst_en @[Decoupled.scala 239:15]
    io.deq.bits.nzcv_en <= _T_68.nzcv_en @[Decoupled.scala 239:15]
    io.deq.bits.cond_en <= _T_68.cond_en @[Decoupled.scala 239:15]
    io.deq.bits.shift_en <= _T_68.shift_en @[Decoupled.scala 239:15]
    io.deq.bits.imm_en <= _T_68.imm_en @[Decoupled.scala 239:15]
    io.deq.bits.rs2_en <= _T_68.rs2_en @[Decoupled.scala 239:15]
    io.deq.bits.rs1_en <= _T_68.rs1_en @[Decoupled.scala 239:15]
    io.deq.bits.rd_en <= _T_68.rd_en @[Decoupled.scala 239:15]
    io.deq.bits.op <= _T_68.op @[Decoupled.scala 239:15]
    io.deq.bits.itype <= _T_68.itype @[Decoupled.scala 239:15]
    io.deq.bits.cond <= _T_68.cond @[Decoupled.scala 239:15]
    io.deq.bits.shift_type <= _T_68.shift_type @[Decoupled.scala 239:15]
    io.deq.bits.shift_val <= _T_68.shift_val @[Decoupled.scala 239:15]
    io.deq.bits.imm <= _T_68.imm @[Decoupled.scala 239:15]
    io.deq.bits.rs2 <= _T_68.rs2 @[Decoupled.scala 239:15]
    io.deq.bits.rs1 <= _T_68.rs1 @[Decoupled.scala 239:15]
    io.deq.bits.rd <= _T_68.rd @[Decoupled.scala 239:15]
    when io.enq.valid : @[Decoupled.scala 242:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 242:40]
      skip @[Decoupled.scala 242:25]
    when _T_46 : @[Decoupled.scala 243:18]
      io.deq.bits.pc <= io.enq.bits.pc @[Decoupled.scala 244:19]
      io.deq.bits.inst <= io.enq.bits.inst @[Decoupled.scala 244:19]
      io.deq.bits.tag <= io.enq.bits.tag @[Decoupled.scala 244:19]
      io.deq.bits.inst_en <= io.enq.bits.inst_en @[Decoupled.scala 244:19]
      io.deq.bits.nzcv_en <= io.enq.bits.nzcv_en @[Decoupled.scala 244:19]
      io.deq.bits.cond_en <= io.enq.bits.cond_en @[Decoupled.scala 244:19]
      io.deq.bits.shift_en <= io.enq.bits.shift_en @[Decoupled.scala 244:19]
      io.deq.bits.imm_en <= io.enq.bits.imm_en @[Decoupled.scala 244:19]
      io.deq.bits.rs2_en <= io.enq.bits.rs2_en @[Decoupled.scala 244:19]
      io.deq.bits.rs1_en <= io.enq.bits.rs1_en @[Decoupled.scala 244:19]
      io.deq.bits.rd_en <= io.enq.bits.rd_en @[Decoupled.scala 244:19]
      io.deq.bits.op <= io.enq.bits.op @[Decoupled.scala 244:19]
      io.deq.bits.itype <= io.enq.bits.itype @[Decoupled.scala 244:19]
      io.deq.bits.cond <= io.enq.bits.cond @[Decoupled.scala 244:19]
      io.deq.bits.shift_type <= io.enq.bits.shift_type @[Decoupled.scala 244:19]
      io.deq.bits.shift_val <= io.enq.bits.shift_val @[Decoupled.scala 244:19]
      io.deq.bits.imm <= io.enq.bits.imm @[Decoupled.scala 244:19]
      io.deq.bits.rs2 <= io.enq.bits.rs2 @[Decoupled.scala 244:19]
      io.deq.bits.rs1 <= io.enq.bits.rs1 @[Decoupled.scala 244:19]
      io.deq.bits.rd <= io.enq.bits.rd @[Decoupled.scala 244:19]
      _T_53 <= UInt<1>("h00") @[Decoupled.scala 245:14]
      when io.deq.ready : @[Decoupled.scala 246:27]
        _T_50 <= UInt<1>("h00") @[Decoupled.scala 246:36]
        skip @[Decoupled.scala 246:27]
      skip @[Decoupled.scala 243:18]
    when io.deq.ready : @[Decoupled.scala 251:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 251:40]
      skip @[Decoupled.scala 251:25]
    node _T_73 = sub(value, value_1) @[Decoupled.scala 254:40]
    node _T_74 = asUInt(_T_73) @[Decoupled.scala 254:40]
    node _T_75 = tail(_T_74, 1) @[Decoupled.scala 254:40]
    node _T_76 = and(_T_42, _T_43) @[Decoupled.scala 256:32]
    node _T_79 = mux(_T_76, UInt<2>("h02"), UInt<1>("h00")) @[Decoupled.scala 256:20]
    node _T_80 = or(_T_79, _T_75) @[Decoupled.scala 256:62]
    io.count <= _T_80 @[Decoupled.scala 256:14]
    
  module Queue_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, count : UInt<2>}
    
    cmem _T_35 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}[2] @[Decoupled.scala 215:24]
    reg value : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 26:33]
    reg value_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 26:33]
    reg _T_42 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 218:35]
    node _T_43 = eq(value, value_1) @[Decoupled.scala 220:41]
    node _T_45 = eq(_T_42, UInt<1>("h00")) @[Decoupled.scala 221:36]
    node _T_46 = and(_T_43, _T_45) @[Decoupled.scala 221:33]
    node _T_47 = and(_T_43, _T_42) @[Decoupled.scala 222:32]
    node _T_48 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 37:37]
    wire _T_50 : UInt<1>
    _T_50 <= _T_48
    node _T_51 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 37:37]
    wire _T_53 : UInt<1>
    _T_53 <= _T_51
    when _T_50 : @[Decoupled.scala 226:17]
      infer mport _T_54 = _T_35[value], clock @[Decoupled.scala 227:8]
      _T_54.pc <= io.enq.bits.pc @[Decoupled.scala 227:24]
      _T_54.inst <= io.enq.bits.inst @[Decoupled.scala 227:24]
      _T_54.tag <= io.enq.bits.tag @[Decoupled.scala 227:24]
      _T_54.inst_en <= io.enq.bits.inst_en @[Decoupled.scala 227:24]
      _T_54.nzcv_en <= io.enq.bits.nzcv_en @[Decoupled.scala 227:24]
      _T_54.cond_en <= io.enq.bits.cond_en @[Decoupled.scala 227:24]
      _T_54.shift_en <= io.enq.bits.shift_en @[Decoupled.scala 227:24]
      _T_54.imm_en <= io.enq.bits.imm_en @[Decoupled.scala 227:24]
      _T_54.rs2_en <= io.enq.bits.rs2_en @[Decoupled.scala 227:24]
      _T_54.rs1_en <= io.enq.bits.rs1_en @[Decoupled.scala 227:24]
      _T_54.rd_en <= io.enq.bits.rd_en @[Decoupled.scala 227:24]
      _T_54.op <= io.enq.bits.op @[Decoupled.scala 227:24]
      _T_54.itype <= io.enq.bits.itype @[Decoupled.scala 227:24]
      _T_54.cond <= io.enq.bits.cond @[Decoupled.scala 227:24]
      _T_54.shift_type <= io.enq.bits.shift_type @[Decoupled.scala 227:24]
      _T_54.shift_val <= io.enq.bits.shift_val @[Decoupled.scala 227:24]
      _T_54.imm <= io.enq.bits.imm @[Decoupled.scala 227:24]
      _T_54.rs2 <= io.enq.bits.rs2 @[Decoupled.scala 227:24]
      _T_54.rs1 <= io.enq.bits.rs1 @[Decoupled.scala 227:24]
      _T_54.rd <= io.enq.bits.rd @[Decoupled.scala 227:24]
      node wrap = eq(value, UInt<1>("h01")) @[Counter.scala 34:24]
      node _T_57 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_58 = tail(_T_57, 1) @[Counter.scala 35:22]
      value <= _T_58 @[Counter.scala 35:13]
      skip @[Decoupled.scala 226:17]
    when _T_53 : @[Decoupled.scala 230:17]
      node wrap_1 = eq(value_1, UInt<1>("h01")) @[Counter.scala 34:24]
      node _T_61 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_62 = tail(_T_61, 1) @[Counter.scala 35:22]
      value_1 <= _T_62 @[Counter.scala 35:13]
      skip @[Decoupled.scala 230:17]
    node _T_63 = neq(_T_50, _T_53) @[Decoupled.scala 233:16]
    when _T_63 : @[Decoupled.scala 233:28]
      _T_42 <= _T_50 @[Decoupled.scala 234:16]
      skip @[Decoupled.scala 233:28]
    node _T_65 = eq(_T_46, UInt<1>("h00")) @[Decoupled.scala 237:19]
    io.deq.valid <= _T_65 @[Decoupled.scala 237:16]
    node _T_67 = eq(_T_47, UInt<1>("h00")) @[Decoupled.scala 238:19]
    io.enq.ready <= _T_67 @[Decoupled.scala 238:16]
    infer mport _T_68 = _T_35[value_1], clock @[Decoupled.scala 239:21]
    io.deq.bits.pc <= _T_68.pc @[Decoupled.scala 239:15]
    io.deq.bits.inst <= _T_68.inst @[Decoupled.scala 239:15]
    io.deq.bits.tag <= _T_68.tag @[Decoupled.scala 239:15]
    io.deq.bits.inst_en <= _T_68.inst_en @[Decoupled.scala 239:15]
    io.deq.bits.nzcv_en <= _T_68.nzcv_en @[Decoupled.scala 239:15]
    io.deq.bits.cond_en <= _T_68.cond_en @[Decoupled.scala 239:15]
    io.deq.bits.shift_en <= _T_68.shift_en @[Decoupled.scala 239:15]
    io.deq.bits.imm_en <= _T_68.imm_en @[Decoupled.scala 239:15]
    io.deq.bits.rs2_en <= _T_68.rs2_en @[Decoupled.scala 239:15]
    io.deq.bits.rs1_en <= _T_68.rs1_en @[Decoupled.scala 239:15]
    io.deq.bits.rd_en <= _T_68.rd_en @[Decoupled.scala 239:15]
    io.deq.bits.op <= _T_68.op @[Decoupled.scala 239:15]
    io.deq.bits.itype <= _T_68.itype @[Decoupled.scala 239:15]
    io.deq.bits.cond <= _T_68.cond @[Decoupled.scala 239:15]
    io.deq.bits.shift_type <= _T_68.shift_type @[Decoupled.scala 239:15]
    io.deq.bits.shift_val <= _T_68.shift_val @[Decoupled.scala 239:15]
    io.deq.bits.imm <= _T_68.imm @[Decoupled.scala 239:15]
    io.deq.bits.rs2 <= _T_68.rs2 @[Decoupled.scala 239:15]
    io.deq.bits.rs1 <= _T_68.rs1 @[Decoupled.scala 239:15]
    io.deq.bits.rd <= _T_68.rd @[Decoupled.scala 239:15]
    when io.enq.valid : @[Decoupled.scala 242:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 242:40]
      skip @[Decoupled.scala 242:25]
    when _T_46 : @[Decoupled.scala 243:18]
      io.deq.bits.pc <= io.enq.bits.pc @[Decoupled.scala 244:19]
      io.deq.bits.inst <= io.enq.bits.inst @[Decoupled.scala 244:19]
      io.deq.bits.tag <= io.enq.bits.tag @[Decoupled.scala 244:19]
      io.deq.bits.inst_en <= io.enq.bits.inst_en @[Decoupled.scala 244:19]
      io.deq.bits.nzcv_en <= io.enq.bits.nzcv_en @[Decoupled.scala 244:19]
      io.deq.bits.cond_en <= io.enq.bits.cond_en @[Decoupled.scala 244:19]
      io.deq.bits.shift_en <= io.enq.bits.shift_en @[Decoupled.scala 244:19]
      io.deq.bits.imm_en <= io.enq.bits.imm_en @[Decoupled.scala 244:19]
      io.deq.bits.rs2_en <= io.enq.bits.rs2_en @[Decoupled.scala 244:19]
      io.deq.bits.rs1_en <= io.enq.bits.rs1_en @[Decoupled.scala 244:19]
      io.deq.bits.rd_en <= io.enq.bits.rd_en @[Decoupled.scala 244:19]
      io.deq.bits.op <= io.enq.bits.op @[Decoupled.scala 244:19]
      io.deq.bits.itype <= io.enq.bits.itype @[Decoupled.scala 244:19]
      io.deq.bits.cond <= io.enq.bits.cond @[Decoupled.scala 244:19]
      io.deq.bits.shift_type <= io.enq.bits.shift_type @[Decoupled.scala 244:19]
      io.deq.bits.shift_val <= io.enq.bits.shift_val @[Decoupled.scala 244:19]
      io.deq.bits.imm <= io.enq.bits.imm @[Decoupled.scala 244:19]
      io.deq.bits.rs2 <= io.enq.bits.rs2 @[Decoupled.scala 244:19]
      io.deq.bits.rs1 <= io.enq.bits.rs1 @[Decoupled.scala 244:19]
      io.deq.bits.rd <= io.enq.bits.rd @[Decoupled.scala 244:19]
      _T_53 <= UInt<1>("h00") @[Decoupled.scala 245:14]
      when io.deq.ready : @[Decoupled.scala 246:27]
        _T_50 <= UInt<1>("h00") @[Decoupled.scala 246:36]
        skip @[Decoupled.scala 246:27]
      skip @[Decoupled.scala 243:18]
    when io.deq.ready : @[Decoupled.scala 251:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 251:40]
      skip @[Decoupled.scala 251:25]
    node _T_73 = sub(value, value_1) @[Decoupled.scala 254:40]
    node _T_74 = asUInt(_T_73) @[Decoupled.scala 254:40]
    node _T_75 = tail(_T_74, 1) @[Decoupled.scala 254:40]
    node _T_76 = and(_T_42, _T_43) @[Decoupled.scala 256:32]
    node _T_79 = mux(_T_76, UInt<2>("h02"), UInt<1>("h00")) @[Decoupled.scala 256:20]
    node _T_80 = or(_T_79, _T_75) @[Decoupled.scala 256:62]
    io.count <= _T_80 @[Decoupled.scala 256:14]
    
  module RRArbiter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ready : UInt<2>, next : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}}
    
    node valid = neq(io.ready, UInt<1>("h00")) @[issue.scala 35:24]
    reg curr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[issue.scala 36:21]
    node _T_16 = dshr(io.ready, curr) @[issue.scala 20:22]
    node _T_17 = not(curr) @[issue.scala 21:25]
    node _T_19 = add(_T_17, UInt<1>("h01")) @[issue.scala 21:30]
    node _T_20 = tail(_T_19, 1) @[issue.scala 21:30]
    node _T_21 = dshl(io.ready, _T_20) @[issue.scala 21:22]
    node _T_22 = or(_T_21, _T_16) @[issue.scala 22:20]
    node ready_ofst = bits(_T_22, 1, 0) @[issue.scala 23:8]
    node _T_23 = bits(ready_ofst, 0, 0) @[OneHot.scala 39:40]
    node _T_24 = bits(ready_ofst, 1, 1) @[OneHot.scala 39:40]
    node ofst = mux(_T_23, UInt<1>("h00"), UInt<1>("h01")) @[Mux.scala 31:69]
    node _T_27 = add(curr, ofst) @[issue.scala 39:19]
    node next = tail(_T_27, 1) @[issue.scala 39:19]
    io.next.bits <= next @[issue.scala 41:16]
    io.next.valid <= valid @[issue.scala 42:17]
    node _T_28 = and(io.next.ready, valid) @[issue.scala 43:22]
    when _T_28 : @[issue.scala 43:32]
      node _T_30 = add(next, UInt<1>("h01")) @[issue.scala 43:47]
      node _T_31 = tail(_T_30, 1) @[issue.scala 43:47]
      curr <= _T_31 @[issue.scala 43:39]
      skip @[issue.scala 43:32]
    
  module IssueUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip flush : UInt<1>, flip flushTag : UInt<1>, flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, flip exeReg : {valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>}}}
    
    wire _T_48 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>} @[issue.scala 85:24]
    _T_48.rd <= UInt<5>("h00") @[decode.scala 80:11]
    _T_48.rs1 <= UInt<5>("h00") @[decode.scala 81:11]
    _T_48.rs2 <= UInt<5>("h00") @[decode.scala 82:11]
    _T_48.imm <= UInt<26>("h00") @[decode.scala 83:11]
    _T_48.shift_val <= UInt<6>("h00") @[decode.scala 84:15]
    _T_48.shift_type <= UInt<2>("h00") @[decode.scala 85:16]
    _T_48.cond <= UInt<4>("h00") @[decode.scala 86:11]
    _T_48.op <= UInt<3>("h00") @[decode.scala 89:8]
    _T_48.itype <= UInt<3>("h00") @[decode.scala 90:11]
    _T_48.rd_en <= UInt<1>("h00") @[decode.scala 93:14]
    _T_48.rs1_en <= UInt<1>("h00") @[decode.scala 94:14]
    _T_48.rs2_en <= UInt<1>("h00") @[decode.scala 95:14]
    _T_48.imm_en <= UInt<1>("h00") @[decode.scala 96:14]
    _T_48.shift_en <= UInt<1>("h00") @[decode.scala 97:14]
    _T_48.cond_en <= UInt<1>("h00") @[decode.scala 98:14]
    _T_48.nzcv_en <= UInt<1>("h00") @[decode.scala 99:14]
    _T_48.inst_en <= UInt<1>("h00") @[decode.scala 102:13]
    _T_48.tag <= UInt<1>("h00") @[decode.scala 104:9]
    _T_48.inst <= UInt<32>("h00") @[decode.scala 105:10]
    _T_48.pc <= UInt<64>("h00") @[decode.scala 107:8]
    wire _T_50 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>} @[issue.scala 85:24]
    _T_50.rd <= UInt<5>("h00") @[decode.scala 80:11]
    _T_50.rs1 <= UInt<5>("h00") @[decode.scala 81:11]
    _T_50.rs2 <= UInt<5>("h00") @[decode.scala 82:11]
    _T_50.imm <= UInt<26>("h00") @[decode.scala 83:11]
    _T_50.shift_val <= UInt<6>("h00") @[decode.scala 84:15]
    _T_50.shift_type <= UInt<2>("h00") @[decode.scala 85:16]
    _T_50.cond <= UInt<4>("h00") @[decode.scala 86:11]
    _T_50.op <= UInt<3>("h00") @[decode.scala 89:8]
    _T_50.itype <= UInt<3>("h00") @[decode.scala 90:11]
    _T_50.rd_en <= UInt<1>("h00") @[decode.scala 93:14]
    _T_50.rs1_en <= UInt<1>("h00") @[decode.scala 94:14]
    _T_50.rs2_en <= UInt<1>("h00") @[decode.scala 95:14]
    _T_50.imm_en <= UInt<1>("h00") @[decode.scala 96:14]
    _T_50.shift_en <= UInt<1>("h00") @[decode.scala 97:14]
    _T_50.cond_en <= UInt<1>("h00") @[decode.scala 98:14]
    _T_50.nzcv_en <= UInt<1>("h00") @[decode.scala 99:14]
    _T_50.inst_en <= UInt<1>("h00") @[decode.scala 102:13]
    _T_50.tag <= UInt<1>("h00") @[decode.scala 104:9]
    _T_50.inst <= UInt<32>("h00") @[decode.scala 105:10]
    _T_50.pc <= UInt<64>("h00") @[decode.scala 107:8]
    wire _T_54 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}[2] @[issue.scala 86:35]
    _T_54[0].pc <= _T_48.pc @[issue.scala 86:35]
    _T_54[0].inst <= _T_48.inst @[issue.scala 86:35]
    _T_54[0].tag <= _T_48.tag @[issue.scala 86:35]
    _T_54[0].inst_en <= _T_48.inst_en @[issue.scala 86:35]
    _T_54[0].nzcv_en <= _T_48.nzcv_en @[issue.scala 86:35]
    _T_54[0].cond_en <= _T_48.cond_en @[issue.scala 86:35]
    _T_54[0].shift_en <= _T_48.shift_en @[issue.scala 86:35]
    _T_54[0].imm_en <= _T_48.imm_en @[issue.scala 86:35]
    _T_54[0].rs2_en <= _T_48.rs2_en @[issue.scala 86:35]
    _T_54[0].rs1_en <= _T_48.rs1_en @[issue.scala 86:35]
    _T_54[0].rd_en <= _T_48.rd_en @[issue.scala 86:35]
    _T_54[0].op <= _T_48.op @[issue.scala 86:35]
    _T_54[0].itype <= _T_48.itype @[issue.scala 86:35]
    _T_54[0].cond <= _T_48.cond @[issue.scala 86:35]
    _T_54[0].shift_type <= _T_48.shift_type @[issue.scala 86:35]
    _T_54[0].shift_val <= _T_48.shift_val @[issue.scala 86:35]
    _T_54[0].imm <= _T_48.imm @[issue.scala 86:35]
    _T_54[0].rs2 <= _T_48.rs2 @[issue.scala 86:35]
    _T_54[0].rs1 <= _T_48.rs1 @[issue.scala 86:35]
    _T_54[0].rd <= _T_48.rd @[issue.scala 86:35]
    _T_54[1].pc <= _T_50.pc @[issue.scala 86:35]
    _T_54[1].inst <= _T_50.inst @[issue.scala 86:35]
    _T_54[1].tag <= _T_50.tag @[issue.scala 86:35]
    _T_54[1].inst_en <= _T_50.inst_en @[issue.scala 86:35]
    _T_54[1].nzcv_en <= _T_50.nzcv_en @[issue.scala 86:35]
    _T_54[1].cond_en <= _T_50.cond_en @[issue.scala 86:35]
    _T_54[1].shift_en <= _T_50.shift_en @[issue.scala 86:35]
    _T_54[1].imm_en <= _T_50.imm_en @[issue.scala 86:35]
    _T_54[1].rs2_en <= _T_50.rs2_en @[issue.scala 86:35]
    _T_54[1].rs1_en <= _T_50.rs1_en @[issue.scala 86:35]
    _T_54[1].rd_en <= _T_50.rd_en @[issue.scala 86:35]
    _T_54[1].op <= _T_50.op @[issue.scala 86:35]
    _T_54[1].itype <= _T_50.itype @[issue.scala 86:35]
    _T_54[1].cond <= _T_50.cond @[issue.scala 86:35]
    _T_54[1].shift_type <= _T_50.shift_type @[issue.scala 86:35]
    _T_54[1].shift_val <= _T_50.shift_val @[issue.scala 86:35]
    _T_54[1].imm <= _T_50.imm @[issue.scala 86:35]
    _T_54[1].rs2 <= _T_50.rs2 @[issue.scala 86:35]
    _T_54[1].rs1 <= _T_50.rs1 @[issue.scala 86:35]
    _T_54[1].rd <= _T_50.rd @[issue.scala 86:35]
    reg reg_pipe : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}[2], clock with : (reset => (reset, _T_54)) @[issue.scala 86:27]
    wire _T_82 : UInt<1>[2] @[issue.scala 87:35]
    _T_82[0] <= UInt<1>("h00") @[issue.scala 87:35]
    _T_82[1] <= UInt<1>("h00") @[issue.scala 87:35]
    reg reg_pipe_v : UInt<1>[2], clock with : (reset => (reset, _T_82)) @[issue.scala 87:27]
    wire _T_110 : UInt<1>[2] @[issue.scala 88:36]
    _T_110[0] <= UInt<1>("h00") @[issue.scala 88:36]
    _T_110[1] <= UInt<1>("h00") @[issue.scala 88:36]
    wire sig_pipe_r : UInt<1>[2]
    sig_pipe_r[0] <= _T_110[0]
    sig_pipe_r[1] <= _T_110[1]
    node _T_133 = bits(reset, 0, 0) @[issue.scala 101:51]
    node _T_135 = eq(UInt<1>("h00"), io.flushTag) @[issue.scala 101:68]
    node _T_136 = and(_T_135, io.flush) @[issue.scala 101:84]
    node _T_137 = or(_T_133, _T_136) @[issue.scala 101:58]
    inst Queue of Queue @[issue.scala 101:106]
    Queue.clock <= clock
    Queue.reset <= _T_137
    node _T_138 = bits(reset, 0, 0) @[issue.scala 101:51]
    node _T_140 = eq(UInt<1>("h01"), io.flushTag) @[issue.scala 101:68]
    node _T_141 = and(_T_140, io.flush) @[issue.scala 101:84]
    node _T_142 = or(_T_138, _T_141) @[issue.scala 101:58]
    inst Queue_1 of Queue_1 @[issue.scala 101:106]
    Queue_1.clock <= clock
    Queue_1.reset <= _T_142
    wire fifo_vec : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, count : UInt<2>}[2] @[issue.scala 100:25]
    fifo_vec[0].count <= Queue.io.count @[issue.scala 100:25]
    fifo_vec[0].deq.bits.pc <= Queue.io.deq.bits.pc @[issue.scala 100:25]
    fifo_vec[0].deq.bits.inst <= Queue.io.deq.bits.inst @[issue.scala 100:25]
    fifo_vec[0].deq.bits.tag <= Queue.io.deq.bits.tag @[issue.scala 100:25]
    fifo_vec[0].deq.bits.inst_en <= Queue.io.deq.bits.inst_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.nzcv_en <= Queue.io.deq.bits.nzcv_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.cond_en <= Queue.io.deq.bits.cond_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.shift_en <= Queue.io.deq.bits.shift_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.imm_en <= Queue.io.deq.bits.imm_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rs2_en <= Queue.io.deq.bits.rs2_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rs1_en <= Queue.io.deq.bits.rs1_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rd_en <= Queue.io.deq.bits.rd_en @[issue.scala 100:25]
    fifo_vec[0].deq.bits.op <= Queue.io.deq.bits.op @[issue.scala 100:25]
    fifo_vec[0].deq.bits.itype <= Queue.io.deq.bits.itype @[issue.scala 100:25]
    fifo_vec[0].deq.bits.cond <= Queue.io.deq.bits.cond @[issue.scala 100:25]
    fifo_vec[0].deq.bits.shift_type <= Queue.io.deq.bits.shift_type @[issue.scala 100:25]
    fifo_vec[0].deq.bits.shift_val <= Queue.io.deq.bits.shift_val @[issue.scala 100:25]
    fifo_vec[0].deq.bits.imm <= Queue.io.deq.bits.imm @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rs2 <= Queue.io.deq.bits.rs2 @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rs1 <= Queue.io.deq.bits.rs1 @[issue.scala 100:25]
    fifo_vec[0].deq.bits.rd <= Queue.io.deq.bits.rd @[issue.scala 100:25]
    fifo_vec[0].deq.valid <= Queue.io.deq.valid @[issue.scala 100:25]
    Queue.io.deq.ready <= fifo_vec[0].deq.ready @[issue.scala 100:25]
    Queue.io.enq.bits.pc <= fifo_vec[0].enq.bits.pc @[issue.scala 100:25]
    Queue.io.enq.bits.inst <= fifo_vec[0].enq.bits.inst @[issue.scala 100:25]
    Queue.io.enq.bits.tag <= fifo_vec[0].enq.bits.tag @[issue.scala 100:25]
    Queue.io.enq.bits.inst_en <= fifo_vec[0].enq.bits.inst_en @[issue.scala 100:25]
    Queue.io.enq.bits.nzcv_en <= fifo_vec[0].enq.bits.nzcv_en @[issue.scala 100:25]
    Queue.io.enq.bits.cond_en <= fifo_vec[0].enq.bits.cond_en @[issue.scala 100:25]
    Queue.io.enq.bits.shift_en <= fifo_vec[0].enq.bits.shift_en @[issue.scala 100:25]
    Queue.io.enq.bits.imm_en <= fifo_vec[0].enq.bits.imm_en @[issue.scala 100:25]
    Queue.io.enq.bits.rs2_en <= fifo_vec[0].enq.bits.rs2_en @[issue.scala 100:25]
    Queue.io.enq.bits.rs1_en <= fifo_vec[0].enq.bits.rs1_en @[issue.scala 100:25]
    Queue.io.enq.bits.rd_en <= fifo_vec[0].enq.bits.rd_en @[issue.scala 100:25]
    Queue.io.enq.bits.op <= fifo_vec[0].enq.bits.op @[issue.scala 100:25]
    Queue.io.enq.bits.itype <= fifo_vec[0].enq.bits.itype @[issue.scala 100:25]
    Queue.io.enq.bits.cond <= fifo_vec[0].enq.bits.cond @[issue.scala 100:25]
    Queue.io.enq.bits.shift_type <= fifo_vec[0].enq.bits.shift_type @[issue.scala 100:25]
    Queue.io.enq.bits.shift_val <= fifo_vec[0].enq.bits.shift_val @[issue.scala 100:25]
    Queue.io.enq.bits.imm <= fifo_vec[0].enq.bits.imm @[issue.scala 100:25]
    Queue.io.enq.bits.rs2 <= fifo_vec[0].enq.bits.rs2 @[issue.scala 100:25]
    Queue.io.enq.bits.rs1 <= fifo_vec[0].enq.bits.rs1 @[issue.scala 100:25]
    Queue.io.enq.bits.rd <= fifo_vec[0].enq.bits.rd @[issue.scala 100:25]
    Queue.io.enq.valid <= fifo_vec[0].enq.valid @[issue.scala 100:25]
    fifo_vec[0].enq.ready <= Queue.io.enq.ready @[issue.scala 100:25]
    fifo_vec[1].count <= Queue_1.io.count @[issue.scala 100:25]
    fifo_vec[1].deq.bits.pc <= Queue_1.io.deq.bits.pc @[issue.scala 100:25]
    fifo_vec[1].deq.bits.inst <= Queue_1.io.deq.bits.inst @[issue.scala 100:25]
    fifo_vec[1].deq.bits.tag <= Queue_1.io.deq.bits.tag @[issue.scala 100:25]
    fifo_vec[1].deq.bits.inst_en <= Queue_1.io.deq.bits.inst_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.nzcv_en <= Queue_1.io.deq.bits.nzcv_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.cond_en <= Queue_1.io.deq.bits.cond_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.shift_en <= Queue_1.io.deq.bits.shift_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.imm_en <= Queue_1.io.deq.bits.imm_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rs2_en <= Queue_1.io.deq.bits.rs2_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rs1_en <= Queue_1.io.deq.bits.rs1_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rd_en <= Queue_1.io.deq.bits.rd_en @[issue.scala 100:25]
    fifo_vec[1].deq.bits.op <= Queue_1.io.deq.bits.op @[issue.scala 100:25]
    fifo_vec[1].deq.bits.itype <= Queue_1.io.deq.bits.itype @[issue.scala 100:25]
    fifo_vec[1].deq.bits.cond <= Queue_1.io.deq.bits.cond @[issue.scala 100:25]
    fifo_vec[1].deq.bits.shift_type <= Queue_1.io.deq.bits.shift_type @[issue.scala 100:25]
    fifo_vec[1].deq.bits.shift_val <= Queue_1.io.deq.bits.shift_val @[issue.scala 100:25]
    fifo_vec[1].deq.bits.imm <= Queue_1.io.deq.bits.imm @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rs2 <= Queue_1.io.deq.bits.rs2 @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rs1 <= Queue_1.io.deq.bits.rs1 @[issue.scala 100:25]
    fifo_vec[1].deq.bits.rd <= Queue_1.io.deq.bits.rd @[issue.scala 100:25]
    fifo_vec[1].deq.valid <= Queue_1.io.deq.valid @[issue.scala 100:25]
    Queue_1.io.deq.ready <= fifo_vec[1].deq.ready @[issue.scala 100:25]
    Queue_1.io.enq.bits.pc <= fifo_vec[1].enq.bits.pc @[issue.scala 100:25]
    Queue_1.io.enq.bits.inst <= fifo_vec[1].enq.bits.inst @[issue.scala 100:25]
    Queue_1.io.enq.bits.tag <= fifo_vec[1].enq.bits.tag @[issue.scala 100:25]
    Queue_1.io.enq.bits.inst_en <= fifo_vec[1].enq.bits.inst_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.nzcv_en <= fifo_vec[1].enq.bits.nzcv_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.cond_en <= fifo_vec[1].enq.bits.cond_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.shift_en <= fifo_vec[1].enq.bits.shift_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.imm_en <= fifo_vec[1].enq.bits.imm_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.rs2_en <= fifo_vec[1].enq.bits.rs2_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.rs1_en <= fifo_vec[1].enq.bits.rs1_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.rd_en <= fifo_vec[1].enq.bits.rd_en @[issue.scala 100:25]
    Queue_1.io.enq.bits.op <= fifo_vec[1].enq.bits.op @[issue.scala 100:25]
    Queue_1.io.enq.bits.itype <= fifo_vec[1].enq.bits.itype @[issue.scala 100:25]
    Queue_1.io.enq.bits.cond <= fifo_vec[1].enq.bits.cond @[issue.scala 100:25]
    Queue_1.io.enq.bits.shift_type <= fifo_vec[1].enq.bits.shift_type @[issue.scala 100:25]
    Queue_1.io.enq.bits.shift_val <= fifo_vec[1].enq.bits.shift_val @[issue.scala 100:25]
    Queue_1.io.enq.bits.imm <= fifo_vec[1].enq.bits.imm @[issue.scala 100:25]
    Queue_1.io.enq.bits.rs2 <= fifo_vec[1].enq.bits.rs2 @[issue.scala 100:25]
    Queue_1.io.enq.bits.rs1 <= fifo_vec[1].enq.bits.rs1 @[issue.scala 100:25]
    Queue_1.io.enq.bits.rd <= fifo_vec[1].enq.bits.rd @[issue.scala 100:25]
    Queue_1.io.enq.valid <= fifo_vec[1].enq.valid @[issue.scala 100:25]
    fifo_vec[1].enq.ready <= Queue_1.io.enq.ready @[issue.scala 100:25]
    inst arbiter of RRArbiter @[issue.scala 108:29]
    arbiter.clock <= clock
    arbiter.reset <= reset
    wire sig_pipe_i : UInt<1>[2] @[issue.scala 109:30]
    sig_pipe_i[0] <= UInt<1>("h00") @[issue.scala 109:30]
    sig_pipe_i[1] <= UInt<1>("h00") @[issue.scala 109:30]
    wire sig_next_idx : UInt<1>
    sig_next_idx <= UInt<1>("h00")
    wire exe_stall : UInt<1>
    exe_stall <= UInt<1>("h00")
    wire mem_stall : UInt<1>
    mem_stall <= UInt<1>("h00")
    fifo_vec[0].enq.valid <= UInt<1>("h00") @[issue.scala 120:17]
    fifo_vec[0].enq.bits.pc <= io.enq.bits.pc @[issue.scala 121:16]
    fifo_vec[0].enq.bits.inst <= io.enq.bits.inst @[issue.scala 121:16]
    fifo_vec[0].enq.bits.tag <= io.enq.bits.tag @[issue.scala 121:16]
    fifo_vec[0].enq.bits.inst_en <= io.enq.bits.inst_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.nzcv_en <= io.enq.bits.nzcv_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.cond_en <= io.enq.bits.cond_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.shift_en <= io.enq.bits.shift_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.imm_en <= io.enq.bits.imm_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rs2_en <= io.enq.bits.rs2_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rs1_en <= io.enq.bits.rs1_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rd_en <= io.enq.bits.rd_en @[issue.scala 121:16]
    fifo_vec[0].enq.bits.op <= io.enq.bits.op @[issue.scala 121:16]
    fifo_vec[0].enq.bits.itype <= io.enq.bits.itype @[issue.scala 121:16]
    fifo_vec[0].enq.bits.cond <= io.enq.bits.cond @[issue.scala 121:16]
    fifo_vec[0].enq.bits.shift_type <= io.enq.bits.shift_type @[issue.scala 121:16]
    fifo_vec[0].enq.bits.shift_val <= io.enq.bits.shift_val @[issue.scala 121:16]
    fifo_vec[0].enq.bits.imm <= io.enq.bits.imm @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rs2 <= io.enq.bits.rs2 @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rs1 <= io.enq.bits.rs1 @[issue.scala 121:16]
    fifo_vec[0].enq.bits.rd <= io.enq.bits.rd @[issue.scala 121:16]
    fifo_vec[1].enq.valid <= UInt<1>("h00") @[issue.scala 120:17]
    fifo_vec[1].enq.bits.pc <= io.enq.bits.pc @[issue.scala 121:16]
    fifo_vec[1].enq.bits.inst <= io.enq.bits.inst @[issue.scala 121:16]
    fifo_vec[1].enq.bits.tag <= io.enq.bits.tag @[issue.scala 121:16]
    fifo_vec[1].enq.bits.inst_en <= io.enq.bits.inst_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.nzcv_en <= io.enq.bits.nzcv_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.cond_en <= io.enq.bits.cond_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.shift_en <= io.enq.bits.shift_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.imm_en <= io.enq.bits.imm_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rs2_en <= io.enq.bits.rs2_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rs1_en <= io.enq.bits.rs1_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rd_en <= io.enq.bits.rd_en @[issue.scala 121:16]
    fifo_vec[1].enq.bits.op <= io.enq.bits.op @[issue.scala 121:16]
    fifo_vec[1].enq.bits.itype <= io.enq.bits.itype @[issue.scala 121:16]
    fifo_vec[1].enq.bits.cond <= io.enq.bits.cond @[issue.scala 121:16]
    fifo_vec[1].enq.bits.shift_type <= io.enq.bits.shift_type @[issue.scala 121:16]
    fifo_vec[1].enq.bits.shift_val <= io.enq.bits.shift_val @[issue.scala 121:16]
    fifo_vec[1].enq.bits.imm <= io.enq.bits.imm @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rs2 <= io.enq.bits.rs2 @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rs1 <= io.enq.bits.rs1 @[issue.scala 121:16]
    fifo_vec[1].enq.bits.rd <= io.enq.bits.rd @[issue.scala 121:16]
    io.enq.ready <= fifo_vec[io.enq.bits.tag].enq.ready @[issue.scala 123:16]
    fifo_vec[io.enq.bits.tag].enq.valid <= io.enq.valid @[issue.scala 124:39]
    node _T_378 = not(reg_pipe_v[0]) @[issue.scala 129:24]
    sig_pipe_r[0] <= _T_378 @[issue.scala 129:21]
    fifo_vec[0].deq.ready <= sig_pipe_r[0] @[issue.scala 131:29]
    node _T_379 = mux(sig_pipe_r[0], fifo_vec[0].deq.bits, reg_pipe[0]) @[issue.scala 132:27]
    reg_pipe[0].pc <= _T_379.pc @[issue.scala 132:21]
    reg_pipe[0].inst <= _T_379.inst @[issue.scala 132:21]
    reg_pipe[0].tag <= _T_379.tag @[issue.scala 132:21]
    reg_pipe[0].inst_en <= _T_379.inst_en @[issue.scala 132:21]
    reg_pipe[0].nzcv_en <= _T_379.nzcv_en @[issue.scala 132:21]
    reg_pipe[0].cond_en <= _T_379.cond_en @[issue.scala 132:21]
    reg_pipe[0].shift_en <= _T_379.shift_en @[issue.scala 132:21]
    reg_pipe[0].imm_en <= _T_379.imm_en @[issue.scala 132:21]
    reg_pipe[0].rs2_en <= _T_379.rs2_en @[issue.scala 132:21]
    reg_pipe[0].rs1_en <= _T_379.rs1_en @[issue.scala 132:21]
    reg_pipe[0].rd_en <= _T_379.rd_en @[issue.scala 132:21]
    reg_pipe[0].op <= _T_379.op @[issue.scala 132:21]
    reg_pipe[0].itype <= _T_379.itype @[issue.scala 132:21]
    reg_pipe[0].cond <= _T_379.cond @[issue.scala 132:21]
    reg_pipe[0].shift_type <= _T_379.shift_type @[issue.scala 132:21]
    reg_pipe[0].shift_val <= _T_379.shift_val @[issue.scala 132:21]
    reg_pipe[0].imm <= _T_379.imm @[issue.scala 132:21]
    reg_pipe[0].rs2 <= _T_379.rs2 @[issue.scala 132:21]
    reg_pipe[0].rs1 <= _T_379.rs1 @[issue.scala 132:21]
    reg_pipe[0].rd <= _T_379.rd @[issue.scala 132:21]
    node _T_380 = mux(sig_pipe_r[0], fifo_vec[0].deq.valid, reg_pipe_v[0]) @[issue.scala 133:27]
    reg_pipe_v[0] <= _T_380 @[issue.scala 133:21]
    sig_pipe_i[0] <= reg_pipe_v[0] @[issue.scala 137:21]
    node _T_381 = not(reg_pipe_v[1]) @[issue.scala 129:24]
    sig_pipe_r[1] <= _T_381 @[issue.scala 129:21]
    fifo_vec[1].deq.ready <= sig_pipe_r[1] @[issue.scala 131:29]
    node _T_382 = mux(sig_pipe_r[1], fifo_vec[1].deq.bits, reg_pipe[1]) @[issue.scala 132:27]
    reg_pipe[1].pc <= _T_382.pc @[issue.scala 132:21]
    reg_pipe[1].inst <= _T_382.inst @[issue.scala 132:21]
    reg_pipe[1].tag <= _T_382.tag @[issue.scala 132:21]
    reg_pipe[1].inst_en <= _T_382.inst_en @[issue.scala 132:21]
    reg_pipe[1].nzcv_en <= _T_382.nzcv_en @[issue.scala 132:21]
    reg_pipe[1].cond_en <= _T_382.cond_en @[issue.scala 132:21]
    reg_pipe[1].shift_en <= _T_382.shift_en @[issue.scala 132:21]
    reg_pipe[1].imm_en <= _T_382.imm_en @[issue.scala 132:21]
    reg_pipe[1].rs2_en <= _T_382.rs2_en @[issue.scala 132:21]
    reg_pipe[1].rs1_en <= _T_382.rs1_en @[issue.scala 132:21]
    reg_pipe[1].rd_en <= _T_382.rd_en @[issue.scala 132:21]
    reg_pipe[1].op <= _T_382.op @[issue.scala 132:21]
    reg_pipe[1].itype <= _T_382.itype @[issue.scala 132:21]
    reg_pipe[1].cond <= _T_382.cond @[issue.scala 132:21]
    reg_pipe[1].shift_type <= _T_382.shift_type @[issue.scala 132:21]
    reg_pipe[1].shift_val <= _T_382.shift_val @[issue.scala 132:21]
    reg_pipe[1].imm <= _T_382.imm @[issue.scala 132:21]
    reg_pipe[1].rs2 <= _T_382.rs2 @[issue.scala 132:21]
    reg_pipe[1].rs1 <= _T_382.rs1 @[issue.scala 132:21]
    reg_pipe[1].rd <= _T_382.rd @[issue.scala 132:21]
    node _T_383 = mux(sig_pipe_r[1], fifo_vec[1].deq.valid, reg_pipe_v[1]) @[issue.scala 133:27]
    reg_pipe_v[1] <= _T_383 @[issue.scala 133:21]
    sig_pipe_i[1] <= reg_pipe_v[1] @[issue.scala 137:21]
    node rfile_wb_pending = and(io.exeReg.valid, io.exeReg.bits.rd_en) @[issue.scala 140:42]
    node _T_387 = eq(reg_pipe[io.exeReg.bits.tag].rs1, io.exeReg.bits.rd) @[issue.scala 142:40]
    node _T_391 = eq(reg_pipe[io.exeReg.bits.tag].rs2, io.exeReg.bits.rd) @[issue.scala 143:42]
    node _T_392 = or(_T_387, _T_391) @[issue.scala 142:63]
    node _T_393 = and(rfile_wb_pending, _T_392) @[issue.scala 141:33]
    exe_stall <= _T_393 @[issue.scala 141:13]
    node _T_399 = eq(exe_stall, UInt<1>("h00")) @[issue.scala 144:71]
    node _T_400 = and(reg_pipe_v[io.exeReg.bits.tag], _T_399) @[issue.scala 144:68]
    sig_pipe_i[io.exeReg.bits.tag] <= _T_400 @[issue.scala 144:34]
    node _T_401 = cat(sig_pipe_i[1], sig_pipe_i[0]) @[issue.scala 148:34]
    arbiter.io.ready <= _T_401 @[issue.scala 148:20]
    sig_next_idx <= arbiter.io.next.bits @[issue.scala 149:20]
    io.deq.bits.pc <= reg_pipe[sig_next_idx].pc @[issue.scala 151:16]
    io.deq.bits.inst <= reg_pipe[sig_next_idx].inst @[issue.scala 151:16]
    io.deq.bits.tag <= reg_pipe[sig_next_idx].tag @[issue.scala 151:16]
    io.deq.bits.inst_en <= reg_pipe[sig_next_idx].inst_en @[issue.scala 151:16]
    io.deq.bits.nzcv_en <= reg_pipe[sig_next_idx].nzcv_en @[issue.scala 151:16]
    io.deq.bits.cond_en <= reg_pipe[sig_next_idx].cond_en @[issue.scala 151:16]
    io.deq.bits.shift_en <= reg_pipe[sig_next_idx].shift_en @[issue.scala 151:16]
    io.deq.bits.imm_en <= reg_pipe[sig_next_idx].imm_en @[issue.scala 151:16]
    io.deq.bits.rs2_en <= reg_pipe[sig_next_idx].rs2_en @[issue.scala 151:16]
    io.deq.bits.rs1_en <= reg_pipe[sig_next_idx].rs1_en @[issue.scala 151:16]
    io.deq.bits.rd_en <= reg_pipe[sig_next_idx].rd_en @[issue.scala 151:16]
    io.deq.bits.op <= reg_pipe[sig_next_idx].op @[issue.scala 151:16]
    io.deq.bits.itype <= reg_pipe[sig_next_idx].itype @[issue.scala 151:16]
    io.deq.bits.cond <= reg_pipe[sig_next_idx].cond @[issue.scala 151:16]
    io.deq.bits.shift_type <= reg_pipe[sig_next_idx].shift_type @[issue.scala 151:16]
    io.deq.bits.shift_val <= reg_pipe[sig_next_idx].shift_val @[issue.scala 151:16]
    io.deq.bits.imm <= reg_pipe[sig_next_idx].imm @[issue.scala 151:16]
    io.deq.bits.rs2 <= reg_pipe[sig_next_idx].rs2 @[issue.scala 151:16]
    io.deq.bits.rs1 <= reg_pipe[sig_next_idx].rs1 @[issue.scala 151:16]
    io.deq.bits.rd <= reg_pipe[sig_next_idx].rd @[issue.scala 151:16]
    io.deq.valid <= arbiter.io.next.valid @[issue.scala 152:16]
    arbiter.io.next.ready <= io.deq.ready @[issue.scala 153:25]
    node _T_405 = and(arbiter.io.next.valid, io.deq.ready) @[issue.scala 157:30]
    when _T_405 : @[issue.scala 157:47]
      fifo_vec[sig_next_idx].deq.ready <= UInt<1>("h01") @[issue.scala 158:38]
      reg_pipe_v[sig_next_idx] <= fifo_vec[sig_next_idx].deq.valid @[issue.scala 159:30]
      reg_pipe[sig_next_idx].pc <= fifo_vec[sig_next_idx].deq.bits.pc @[issue.scala 160:28]
      reg_pipe[sig_next_idx].inst <= fifo_vec[sig_next_idx].deq.bits.inst @[issue.scala 160:28]
      reg_pipe[sig_next_idx].tag <= fifo_vec[sig_next_idx].deq.bits.tag @[issue.scala 160:28]
      reg_pipe[sig_next_idx].inst_en <= fifo_vec[sig_next_idx].deq.bits.inst_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].nzcv_en <= fifo_vec[sig_next_idx].deq.bits.nzcv_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].cond_en <= fifo_vec[sig_next_idx].deq.bits.cond_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].shift_en <= fifo_vec[sig_next_idx].deq.bits.shift_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].imm_en <= fifo_vec[sig_next_idx].deq.bits.imm_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rs2_en <= fifo_vec[sig_next_idx].deq.bits.rs2_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rs1_en <= fifo_vec[sig_next_idx].deq.bits.rs1_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rd_en <= fifo_vec[sig_next_idx].deq.bits.rd_en @[issue.scala 160:28]
      reg_pipe[sig_next_idx].op <= fifo_vec[sig_next_idx].deq.bits.op @[issue.scala 160:28]
      reg_pipe[sig_next_idx].itype <= fifo_vec[sig_next_idx].deq.bits.itype @[issue.scala 160:28]
      reg_pipe[sig_next_idx].cond <= fifo_vec[sig_next_idx].deq.bits.cond @[issue.scala 160:28]
      reg_pipe[sig_next_idx].shift_type <= fifo_vec[sig_next_idx].deq.bits.shift_type @[issue.scala 160:28]
      reg_pipe[sig_next_idx].shift_val <= fifo_vec[sig_next_idx].deq.bits.shift_val @[issue.scala 160:28]
      reg_pipe[sig_next_idx].imm <= fifo_vec[sig_next_idx].deq.bits.imm @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rs2 <= fifo_vec[sig_next_idx].deq.bits.rs2 @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rs1 <= fifo_vec[sig_next_idx].deq.bits.rs1 @[issue.scala 160:28]
      reg_pipe[sig_next_idx].rd <= fifo_vec[sig_next_idx].deq.bits.rd @[issue.scala 160:28]
      skip @[issue.scala 157:47]
    when io.flush : @[issue.scala 164:18]
      wire _T_510 : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>} @[issue.scala 85:24]
      _T_510.rd <= UInt<5>("h00") @[decode.scala 80:11]
      _T_510.rs1 <= UInt<5>("h00") @[decode.scala 81:11]
      _T_510.rs2 <= UInt<5>("h00") @[decode.scala 82:11]
      _T_510.imm <= UInt<26>("h00") @[decode.scala 83:11]
      _T_510.shift_val <= UInt<6>("h00") @[decode.scala 84:15]
      _T_510.shift_type <= UInt<2>("h00") @[decode.scala 85:16]
      _T_510.cond <= UInt<4>("h00") @[decode.scala 86:11]
      _T_510.op <= UInt<3>("h00") @[decode.scala 89:8]
      _T_510.itype <= UInt<3>("h00") @[decode.scala 90:11]
      _T_510.rd_en <= UInt<1>("h00") @[decode.scala 93:14]
      _T_510.rs1_en <= UInt<1>("h00") @[decode.scala 94:14]
      _T_510.rs2_en <= UInt<1>("h00") @[decode.scala 95:14]
      _T_510.imm_en <= UInt<1>("h00") @[decode.scala 96:14]
      _T_510.shift_en <= UInt<1>("h00") @[decode.scala 97:14]
      _T_510.cond_en <= UInt<1>("h00") @[decode.scala 98:14]
      _T_510.nzcv_en <= UInt<1>("h00") @[decode.scala 99:14]
      _T_510.inst_en <= UInt<1>("h00") @[decode.scala 102:13]
      _T_510.tag <= UInt<1>("h00") @[decode.scala 104:9]
      _T_510.inst <= UInt<32>("h00") @[decode.scala 105:10]
      _T_510.pc <= UInt<64>("h00") @[decode.scala 107:8]
      reg_pipe[io.flushTag].pc <= _T_510.pc @[issue.scala 165:27]
      reg_pipe[io.flushTag].inst <= _T_510.inst @[issue.scala 165:27]
      reg_pipe[io.flushTag].tag <= _T_510.tag @[issue.scala 165:27]
      reg_pipe[io.flushTag].inst_en <= _T_510.inst_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].nzcv_en <= _T_510.nzcv_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].cond_en <= _T_510.cond_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].shift_en <= _T_510.shift_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].imm_en <= _T_510.imm_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].rs2_en <= _T_510.rs2_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].rs1_en <= _T_510.rs1_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].rd_en <= _T_510.rd_en @[issue.scala 165:27]
      reg_pipe[io.flushTag].op <= _T_510.op @[issue.scala 165:27]
      reg_pipe[io.flushTag].itype <= _T_510.itype @[issue.scala 165:27]
      reg_pipe[io.flushTag].cond <= _T_510.cond @[issue.scala 165:27]
      reg_pipe[io.flushTag].shift_type <= _T_510.shift_type @[issue.scala 165:27]
      reg_pipe[io.flushTag].shift_val <= _T_510.shift_val @[issue.scala 165:27]
      reg_pipe[io.flushTag].imm <= _T_510.imm @[issue.scala 165:27]
      reg_pipe[io.flushTag].rs2 <= _T_510.rs2 @[issue.scala 165:27]
      reg_pipe[io.flushTag].rs1 <= _T_510.rs1 @[issue.scala 165:27]
      reg_pipe[io.flushTag].rd <= _T_510.rd @[issue.scala 165:27]
      reg_pipe_v[io.flushTag] <= UInt<1>("h00") @[issue.scala 166:29]
      sig_pipe_i[io.flushTag] <= UInt<1>("h00") @[issue.scala 167:29]
      skip @[issue.scala 164:18]
    
  module ShiftALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip word : UInt<64>, flip amount : UInt<6>, flip opcode : UInt<2>, res : UInt<64>, carry : UInt<1>}
    
    node _T_15 = dshl(io.word, io.amount) @[execute.scala 88:33]
    node _T_16 = dshr(io.word, io.amount) @[execute.scala 89:33]
    node _T_17 = asSInt(io.word) @[execute.scala 90:39]
    node _T_18 = dshr(_T_17, io.amount) @[execute.scala 90:42]
    node _T_19 = asUInt(_T_18) @[execute.scala 90:62]
    node _T_20 = bits(io.word, 0, 0) @[execute.scala 91:52]
    node _T_21 = bits(io.word, 1, 1) @[execute.scala 91:52]
    node _T_22 = bits(io.word, 2, 2) @[execute.scala 91:52]
    node _T_23 = bits(io.word, 3, 3) @[execute.scala 91:52]
    node _T_24 = bits(io.word, 4, 4) @[execute.scala 91:52]
    node _T_25 = bits(io.word, 5, 5) @[execute.scala 91:52]
    node _T_26 = bits(io.word, 6, 6) @[execute.scala 91:52]
    node _T_27 = bits(io.word, 7, 7) @[execute.scala 91:52]
    node _T_28 = bits(io.word, 8, 8) @[execute.scala 91:52]
    node _T_29 = bits(io.word, 9, 9) @[execute.scala 91:52]
    node _T_30 = bits(io.word, 10, 10) @[execute.scala 91:52]
    node _T_31 = bits(io.word, 11, 11) @[execute.scala 91:52]
    node _T_32 = bits(io.word, 12, 12) @[execute.scala 91:52]
    node _T_33 = bits(io.word, 13, 13) @[execute.scala 91:52]
    node _T_34 = bits(io.word, 14, 14) @[execute.scala 91:52]
    node _T_35 = bits(io.word, 15, 15) @[execute.scala 91:52]
    node _T_36 = bits(io.word, 16, 16) @[execute.scala 91:52]
    node _T_37 = bits(io.word, 17, 17) @[execute.scala 91:52]
    node _T_38 = bits(io.word, 18, 18) @[execute.scala 91:52]
    node _T_39 = bits(io.word, 19, 19) @[execute.scala 91:52]
    node _T_40 = bits(io.word, 20, 20) @[execute.scala 91:52]
    node _T_41 = bits(io.word, 21, 21) @[execute.scala 91:52]
    node _T_42 = bits(io.word, 22, 22) @[execute.scala 91:52]
    node _T_43 = bits(io.word, 23, 23) @[execute.scala 91:52]
    node _T_44 = bits(io.word, 24, 24) @[execute.scala 91:52]
    node _T_45 = bits(io.word, 25, 25) @[execute.scala 91:52]
    node _T_46 = bits(io.word, 26, 26) @[execute.scala 91:52]
    node _T_47 = bits(io.word, 27, 27) @[execute.scala 91:52]
    node _T_48 = bits(io.word, 28, 28) @[execute.scala 91:52]
    node _T_49 = bits(io.word, 29, 29) @[execute.scala 91:52]
    node _T_50 = bits(io.word, 30, 30) @[execute.scala 91:52]
    node _T_51 = bits(io.word, 31, 31) @[execute.scala 91:52]
    node _T_52 = bits(io.word, 32, 32) @[execute.scala 91:52]
    node _T_53 = bits(io.word, 33, 33) @[execute.scala 91:52]
    node _T_54 = bits(io.word, 34, 34) @[execute.scala 91:52]
    node _T_55 = bits(io.word, 35, 35) @[execute.scala 91:52]
    node _T_56 = bits(io.word, 36, 36) @[execute.scala 91:52]
    node _T_57 = bits(io.word, 37, 37) @[execute.scala 91:52]
    node _T_58 = bits(io.word, 38, 38) @[execute.scala 91:52]
    node _T_59 = bits(io.word, 39, 39) @[execute.scala 91:52]
    node _T_60 = bits(io.word, 40, 40) @[execute.scala 91:52]
    node _T_61 = bits(io.word, 41, 41) @[execute.scala 91:52]
    node _T_62 = bits(io.word, 42, 42) @[execute.scala 91:52]
    node _T_63 = bits(io.word, 43, 43) @[execute.scala 91:52]
    node _T_64 = bits(io.word, 44, 44) @[execute.scala 91:52]
    node _T_65 = bits(io.word, 45, 45) @[execute.scala 91:52]
    node _T_66 = bits(io.word, 46, 46) @[execute.scala 91:52]
    node _T_67 = bits(io.word, 47, 47) @[execute.scala 91:52]
    node _T_68 = bits(io.word, 48, 48) @[execute.scala 91:52]
    node _T_69 = bits(io.word, 49, 49) @[execute.scala 91:52]
    node _T_70 = bits(io.word, 50, 50) @[execute.scala 91:52]
    node _T_71 = bits(io.word, 51, 51) @[execute.scala 91:52]
    node _T_72 = bits(io.word, 52, 52) @[execute.scala 91:52]
    node _T_73 = bits(io.word, 53, 53) @[execute.scala 91:52]
    node _T_74 = bits(io.word, 54, 54) @[execute.scala 91:52]
    node _T_75 = bits(io.word, 55, 55) @[execute.scala 91:52]
    node _T_76 = bits(io.word, 56, 56) @[execute.scala 91:52]
    node _T_77 = bits(io.word, 57, 57) @[execute.scala 91:52]
    node _T_78 = bits(io.word, 58, 58) @[execute.scala 91:52]
    node _T_79 = bits(io.word, 59, 59) @[execute.scala 91:52]
    node _T_80 = bits(io.word, 60, 60) @[execute.scala 91:52]
    node _T_81 = bits(io.word, 61, 61) @[execute.scala 91:52]
    node _T_82 = bits(io.word, 62, 62) @[execute.scala 91:52]
    node _T_83 = bits(io.word, 63, 63) @[execute.scala 91:52]
    wire _T_87 : UInt<1>[64] @[execute.scala 91:43]
    _T_87[0] <= _T_20 @[execute.scala 91:43]
    _T_87[1] <= _T_21 @[execute.scala 91:43]
    _T_87[2] <= _T_22 @[execute.scala 91:43]
    _T_87[3] <= _T_23 @[execute.scala 91:43]
    _T_87[4] <= _T_24 @[execute.scala 91:43]
    _T_87[5] <= _T_25 @[execute.scala 91:43]
    _T_87[6] <= _T_26 @[execute.scala 91:43]
    _T_87[7] <= _T_27 @[execute.scala 91:43]
    _T_87[8] <= _T_28 @[execute.scala 91:43]
    _T_87[9] <= _T_29 @[execute.scala 91:43]
    _T_87[10] <= _T_30 @[execute.scala 91:43]
    _T_87[11] <= _T_31 @[execute.scala 91:43]
    _T_87[12] <= _T_32 @[execute.scala 91:43]
    _T_87[13] <= _T_33 @[execute.scala 91:43]
    _T_87[14] <= _T_34 @[execute.scala 91:43]
    _T_87[15] <= _T_35 @[execute.scala 91:43]
    _T_87[16] <= _T_36 @[execute.scala 91:43]
    _T_87[17] <= _T_37 @[execute.scala 91:43]
    _T_87[18] <= _T_38 @[execute.scala 91:43]
    _T_87[19] <= _T_39 @[execute.scala 91:43]
    _T_87[20] <= _T_40 @[execute.scala 91:43]
    _T_87[21] <= _T_41 @[execute.scala 91:43]
    _T_87[22] <= _T_42 @[execute.scala 91:43]
    _T_87[23] <= _T_43 @[execute.scala 91:43]
    _T_87[24] <= _T_44 @[execute.scala 91:43]
    _T_87[25] <= _T_45 @[execute.scala 91:43]
    _T_87[26] <= _T_46 @[execute.scala 91:43]
    _T_87[27] <= _T_47 @[execute.scala 91:43]
    _T_87[28] <= _T_48 @[execute.scala 91:43]
    _T_87[29] <= _T_49 @[execute.scala 91:43]
    _T_87[30] <= _T_50 @[execute.scala 91:43]
    _T_87[31] <= _T_51 @[execute.scala 91:43]
    _T_87[32] <= _T_52 @[execute.scala 91:43]
    _T_87[33] <= _T_53 @[execute.scala 91:43]
    _T_87[34] <= _T_54 @[execute.scala 91:43]
    _T_87[35] <= _T_55 @[execute.scala 91:43]
    _T_87[36] <= _T_56 @[execute.scala 91:43]
    _T_87[37] <= _T_57 @[execute.scala 91:43]
    _T_87[38] <= _T_58 @[execute.scala 91:43]
    _T_87[39] <= _T_59 @[execute.scala 91:43]
    _T_87[40] <= _T_60 @[execute.scala 91:43]
    _T_87[41] <= _T_61 @[execute.scala 91:43]
    _T_87[42] <= _T_62 @[execute.scala 91:43]
    _T_87[43] <= _T_63 @[execute.scala 91:43]
    _T_87[44] <= _T_64 @[execute.scala 91:43]
    _T_87[45] <= _T_65 @[execute.scala 91:43]
    _T_87[46] <= _T_66 @[execute.scala 91:43]
    _T_87[47] <= _T_67 @[execute.scala 91:43]
    _T_87[48] <= _T_68 @[execute.scala 91:43]
    _T_87[49] <= _T_69 @[execute.scala 91:43]
    _T_87[50] <= _T_70 @[execute.scala 91:43]
    _T_87[51] <= _T_71 @[execute.scala 91:43]
    _T_87[52] <= _T_72 @[execute.scala 91:43]
    _T_87[53] <= _T_73 @[execute.scala 91:43]
    _T_87[54] <= _T_74 @[execute.scala 91:43]
    _T_87[55] <= _T_75 @[execute.scala 91:43]
    _T_87[56] <= _T_76 @[execute.scala 91:43]
    _T_87[57] <= _T_77 @[execute.scala 91:43]
    _T_87[58] <= _T_78 @[execute.scala 91:43]
    _T_87[59] <= _T_79 @[execute.scala 91:43]
    _T_87[60] <= _T_80 @[execute.scala 91:43]
    _T_87[61] <= _T_81 @[execute.scala 91:43]
    _T_87[62] <= _T_82 @[execute.scala 91:43]
    _T_87[63] <= _T_83 @[execute.scala 91:43]
    node _T_155 = lt(io.amount, UInt<7>("h040")) @[execute.scala 81:15]
    node _T_157 = sub(io.amount, UInt<7>("h040")) @[execute.scala 81:37]
    node _T_158 = asUInt(_T_157) @[execute.scala 81:37]
    node _T_159 = tail(_T_158, 1) @[execute.scala 81:37]
    node _T_161 = bits(_T_159, 5, 0)
    node _T_163 = add(UInt<1>("h00"), io.amount) @[execute.scala 81:60]
    node _T_164 = tail(_T_163, 1) @[execute.scala 81:60]
    node _T_166 = mux(_T_155, _T_87[_T_161], _T_87[_T_164]) @[execute.scala 81:10]
    node _T_168 = lt(io.amount, UInt<6>("h03f")) @[execute.scala 81:15]
    node _T_170 = sub(io.amount, UInt<6>("h03f")) @[execute.scala 81:37]
    node _T_171 = asUInt(_T_170) @[execute.scala 81:37]
    node _T_172 = tail(_T_171, 1) @[execute.scala 81:37]
    node _T_175 = add(UInt<1>("h01"), io.amount) @[execute.scala 81:60]
    node _T_176 = tail(_T_175, 1) @[execute.scala 81:60]
    node _T_178 = mux(_T_168, _T_87[_T_172], _T_87[_T_176]) @[execute.scala 81:10]
    node _T_180 = lt(io.amount, UInt<6>("h03e")) @[execute.scala 81:15]
    node _T_182 = sub(io.amount, UInt<6>("h03e")) @[execute.scala 81:37]
    node _T_183 = asUInt(_T_182) @[execute.scala 81:37]
    node _T_184 = tail(_T_183, 1) @[execute.scala 81:37]
    node _T_187 = add(UInt<2>("h02"), io.amount) @[execute.scala 81:60]
    node _T_188 = tail(_T_187, 1) @[execute.scala 81:60]
    node _T_190 = mux(_T_180, _T_87[_T_184], _T_87[_T_188]) @[execute.scala 81:10]
    node _T_192 = lt(io.amount, UInt<6>("h03d")) @[execute.scala 81:15]
    node _T_194 = sub(io.amount, UInt<6>("h03d")) @[execute.scala 81:37]
    node _T_195 = asUInt(_T_194) @[execute.scala 81:37]
    node _T_196 = tail(_T_195, 1) @[execute.scala 81:37]
    node _T_199 = add(UInt<2>("h03"), io.amount) @[execute.scala 81:60]
    node _T_200 = tail(_T_199, 1) @[execute.scala 81:60]
    node _T_202 = mux(_T_192, _T_87[_T_196], _T_87[_T_200]) @[execute.scala 81:10]
    node _T_204 = lt(io.amount, UInt<6>("h03c")) @[execute.scala 81:15]
    node _T_206 = sub(io.amount, UInt<6>("h03c")) @[execute.scala 81:37]
    node _T_207 = asUInt(_T_206) @[execute.scala 81:37]
    node _T_208 = tail(_T_207, 1) @[execute.scala 81:37]
    node _T_211 = add(UInt<3>("h04"), io.amount) @[execute.scala 81:60]
    node _T_212 = tail(_T_211, 1) @[execute.scala 81:60]
    node _T_214 = mux(_T_204, _T_87[_T_208], _T_87[_T_212]) @[execute.scala 81:10]
    node _T_216 = lt(io.amount, UInt<6>("h03b")) @[execute.scala 81:15]
    node _T_218 = sub(io.amount, UInt<6>("h03b")) @[execute.scala 81:37]
    node _T_219 = asUInt(_T_218) @[execute.scala 81:37]
    node _T_220 = tail(_T_219, 1) @[execute.scala 81:37]
    node _T_223 = add(UInt<3>("h05"), io.amount) @[execute.scala 81:60]
    node _T_224 = tail(_T_223, 1) @[execute.scala 81:60]
    node _T_226 = mux(_T_216, _T_87[_T_220], _T_87[_T_224]) @[execute.scala 81:10]
    node _T_228 = lt(io.amount, UInt<6>("h03a")) @[execute.scala 81:15]
    node _T_230 = sub(io.amount, UInt<6>("h03a")) @[execute.scala 81:37]
    node _T_231 = asUInt(_T_230) @[execute.scala 81:37]
    node _T_232 = tail(_T_231, 1) @[execute.scala 81:37]
    node _T_235 = add(UInt<3>("h06"), io.amount) @[execute.scala 81:60]
    node _T_236 = tail(_T_235, 1) @[execute.scala 81:60]
    node _T_238 = mux(_T_228, _T_87[_T_232], _T_87[_T_236]) @[execute.scala 81:10]
    node _T_240 = lt(io.amount, UInt<6>("h039")) @[execute.scala 81:15]
    node _T_242 = sub(io.amount, UInt<6>("h039")) @[execute.scala 81:37]
    node _T_243 = asUInt(_T_242) @[execute.scala 81:37]
    node _T_244 = tail(_T_243, 1) @[execute.scala 81:37]
    node _T_247 = add(UInt<3>("h07"), io.amount) @[execute.scala 81:60]
    node _T_248 = tail(_T_247, 1) @[execute.scala 81:60]
    node _T_250 = mux(_T_240, _T_87[_T_244], _T_87[_T_248]) @[execute.scala 81:10]
    node _T_252 = lt(io.amount, UInt<6>("h038")) @[execute.scala 81:15]
    node _T_254 = sub(io.amount, UInt<6>("h038")) @[execute.scala 81:37]
    node _T_255 = asUInt(_T_254) @[execute.scala 81:37]
    node _T_256 = tail(_T_255, 1) @[execute.scala 81:37]
    node _T_259 = add(UInt<4>("h08"), io.amount) @[execute.scala 81:60]
    node _T_260 = tail(_T_259, 1) @[execute.scala 81:60]
    node _T_262 = mux(_T_252, _T_87[_T_256], _T_87[_T_260]) @[execute.scala 81:10]
    node _T_264 = lt(io.amount, UInt<6>("h037")) @[execute.scala 81:15]
    node _T_266 = sub(io.amount, UInt<6>("h037")) @[execute.scala 81:37]
    node _T_267 = asUInt(_T_266) @[execute.scala 81:37]
    node _T_268 = tail(_T_267, 1) @[execute.scala 81:37]
    node _T_271 = add(UInt<4>("h09"), io.amount) @[execute.scala 81:60]
    node _T_272 = tail(_T_271, 1) @[execute.scala 81:60]
    node _T_274 = mux(_T_264, _T_87[_T_268], _T_87[_T_272]) @[execute.scala 81:10]
    node _T_276 = lt(io.amount, UInt<6>("h036")) @[execute.scala 81:15]
    node _T_278 = sub(io.amount, UInt<6>("h036")) @[execute.scala 81:37]
    node _T_279 = asUInt(_T_278) @[execute.scala 81:37]
    node _T_280 = tail(_T_279, 1) @[execute.scala 81:37]
    node _T_283 = add(UInt<4>("h0a"), io.amount) @[execute.scala 81:60]
    node _T_284 = tail(_T_283, 1) @[execute.scala 81:60]
    node _T_286 = mux(_T_276, _T_87[_T_280], _T_87[_T_284]) @[execute.scala 81:10]
    node _T_288 = lt(io.amount, UInt<6>("h035")) @[execute.scala 81:15]
    node _T_290 = sub(io.amount, UInt<6>("h035")) @[execute.scala 81:37]
    node _T_291 = asUInt(_T_290) @[execute.scala 81:37]
    node _T_292 = tail(_T_291, 1) @[execute.scala 81:37]
    node _T_295 = add(UInt<4>("h0b"), io.amount) @[execute.scala 81:60]
    node _T_296 = tail(_T_295, 1) @[execute.scala 81:60]
    node _T_298 = mux(_T_288, _T_87[_T_292], _T_87[_T_296]) @[execute.scala 81:10]
    node _T_300 = lt(io.amount, UInt<6>("h034")) @[execute.scala 81:15]
    node _T_302 = sub(io.amount, UInt<6>("h034")) @[execute.scala 81:37]
    node _T_303 = asUInt(_T_302) @[execute.scala 81:37]
    node _T_304 = tail(_T_303, 1) @[execute.scala 81:37]
    node _T_307 = add(UInt<4>("h0c"), io.amount) @[execute.scala 81:60]
    node _T_308 = tail(_T_307, 1) @[execute.scala 81:60]
    node _T_310 = mux(_T_300, _T_87[_T_304], _T_87[_T_308]) @[execute.scala 81:10]
    node _T_312 = lt(io.amount, UInt<6>("h033")) @[execute.scala 81:15]
    node _T_314 = sub(io.amount, UInt<6>("h033")) @[execute.scala 81:37]
    node _T_315 = asUInt(_T_314) @[execute.scala 81:37]
    node _T_316 = tail(_T_315, 1) @[execute.scala 81:37]
    node _T_319 = add(UInt<4>("h0d"), io.amount) @[execute.scala 81:60]
    node _T_320 = tail(_T_319, 1) @[execute.scala 81:60]
    node _T_322 = mux(_T_312, _T_87[_T_316], _T_87[_T_320]) @[execute.scala 81:10]
    node _T_324 = lt(io.amount, UInt<6>("h032")) @[execute.scala 81:15]
    node _T_326 = sub(io.amount, UInt<6>("h032")) @[execute.scala 81:37]
    node _T_327 = asUInt(_T_326) @[execute.scala 81:37]
    node _T_328 = tail(_T_327, 1) @[execute.scala 81:37]
    node _T_331 = add(UInt<4>("h0e"), io.amount) @[execute.scala 81:60]
    node _T_332 = tail(_T_331, 1) @[execute.scala 81:60]
    node _T_334 = mux(_T_324, _T_87[_T_328], _T_87[_T_332]) @[execute.scala 81:10]
    node _T_336 = lt(io.amount, UInt<6>("h031")) @[execute.scala 81:15]
    node _T_338 = sub(io.amount, UInt<6>("h031")) @[execute.scala 81:37]
    node _T_339 = asUInt(_T_338) @[execute.scala 81:37]
    node _T_340 = tail(_T_339, 1) @[execute.scala 81:37]
    node _T_343 = add(UInt<4>("h0f"), io.amount) @[execute.scala 81:60]
    node _T_344 = tail(_T_343, 1) @[execute.scala 81:60]
    node _T_346 = mux(_T_336, _T_87[_T_340], _T_87[_T_344]) @[execute.scala 81:10]
    node _T_348 = lt(io.amount, UInt<6>("h030")) @[execute.scala 81:15]
    node _T_350 = sub(io.amount, UInt<6>("h030")) @[execute.scala 81:37]
    node _T_351 = asUInt(_T_350) @[execute.scala 81:37]
    node _T_352 = tail(_T_351, 1) @[execute.scala 81:37]
    node _T_355 = add(UInt<5>("h010"), io.amount) @[execute.scala 81:60]
    node _T_356 = tail(_T_355, 1) @[execute.scala 81:60]
    node _T_358 = mux(_T_348, _T_87[_T_352], _T_87[_T_356]) @[execute.scala 81:10]
    node _T_360 = lt(io.amount, UInt<6>("h02f")) @[execute.scala 81:15]
    node _T_362 = sub(io.amount, UInt<6>("h02f")) @[execute.scala 81:37]
    node _T_363 = asUInt(_T_362) @[execute.scala 81:37]
    node _T_364 = tail(_T_363, 1) @[execute.scala 81:37]
    node _T_367 = add(UInt<5>("h011"), io.amount) @[execute.scala 81:60]
    node _T_368 = tail(_T_367, 1) @[execute.scala 81:60]
    node _T_370 = mux(_T_360, _T_87[_T_364], _T_87[_T_368]) @[execute.scala 81:10]
    node _T_372 = lt(io.amount, UInt<6>("h02e")) @[execute.scala 81:15]
    node _T_374 = sub(io.amount, UInt<6>("h02e")) @[execute.scala 81:37]
    node _T_375 = asUInt(_T_374) @[execute.scala 81:37]
    node _T_376 = tail(_T_375, 1) @[execute.scala 81:37]
    node _T_379 = add(UInt<5>("h012"), io.amount) @[execute.scala 81:60]
    node _T_380 = tail(_T_379, 1) @[execute.scala 81:60]
    node _T_382 = mux(_T_372, _T_87[_T_376], _T_87[_T_380]) @[execute.scala 81:10]
    node _T_384 = lt(io.amount, UInt<6>("h02d")) @[execute.scala 81:15]
    node _T_386 = sub(io.amount, UInt<6>("h02d")) @[execute.scala 81:37]
    node _T_387 = asUInt(_T_386) @[execute.scala 81:37]
    node _T_388 = tail(_T_387, 1) @[execute.scala 81:37]
    node _T_391 = add(UInt<5>("h013"), io.amount) @[execute.scala 81:60]
    node _T_392 = tail(_T_391, 1) @[execute.scala 81:60]
    node _T_394 = mux(_T_384, _T_87[_T_388], _T_87[_T_392]) @[execute.scala 81:10]
    node _T_396 = lt(io.amount, UInt<6>("h02c")) @[execute.scala 81:15]
    node _T_398 = sub(io.amount, UInt<6>("h02c")) @[execute.scala 81:37]
    node _T_399 = asUInt(_T_398) @[execute.scala 81:37]
    node _T_400 = tail(_T_399, 1) @[execute.scala 81:37]
    node _T_403 = add(UInt<5>("h014"), io.amount) @[execute.scala 81:60]
    node _T_404 = tail(_T_403, 1) @[execute.scala 81:60]
    node _T_406 = mux(_T_396, _T_87[_T_400], _T_87[_T_404]) @[execute.scala 81:10]
    node _T_408 = lt(io.amount, UInt<6>("h02b")) @[execute.scala 81:15]
    node _T_410 = sub(io.amount, UInt<6>("h02b")) @[execute.scala 81:37]
    node _T_411 = asUInt(_T_410) @[execute.scala 81:37]
    node _T_412 = tail(_T_411, 1) @[execute.scala 81:37]
    node _T_415 = add(UInt<5>("h015"), io.amount) @[execute.scala 81:60]
    node _T_416 = tail(_T_415, 1) @[execute.scala 81:60]
    node _T_418 = mux(_T_408, _T_87[_T_412], _T_87[_T_416]) @[execute.scala 81:10]
    node _T_420 = lt(io.amount, UInt<6>("h02a")) @[execute.scala 81:15]
    node _T_422 = sub(io.amount, UInt<6>("h02a")) @[execute.scala 81:37]
    node _T_423 = asUInt(_T_422) @[execute.scala 81:37]
    node _T_424 = tail(_T_423, 1) @[execute.scala 81:37]
    node _T_427 = add(UInt<5>("h016"), io.amount) @[execute.scala 81:60]
    node _T_428 = tail(_T_427, 1) @[execute.scala 81:60]
    node _T_430 = mux(_T_420, _T_87[_T_424], _T_87[_T_428]) @[execute.scala 81:10]
    node _T_432 = lt(io.amount, UInt<6>("h029")) @[execute.scala 81:15]
    node _T_434 = sub(io.amount, UInt<6>("h029")) @[execute.scala 81:37]
    node _T_435 = asUInt(_T_434) @[execute.scala 81:37]
    node _T_436 = tail(_T_435, 1) @[execute.scala 81:37]
    node _T_439 = add(UInt<5>("h017"), io.amount) @[execute.scala 81:60]
    node _T_440 = tail(_T_439, 1) @[execute.scala 81:60]
    node _T_442 = mux(_T_432, _T_87[_T_436], _T_87[_T_440]) @[execute.scala 81:10]
    node _T_444 = lt(io.amount, UInt<6>("h028")) @[execute.scala 81:15]
    node _T_446 = sub(io.amount, UInt<6>("h028")) @[execute.scala 81:37]
    node _T_447 = asUInt(_T_446) @[execute.scala 81:37]
    node _T_448 = tail(_T_447, 1) @[execute.scala 81:37]
    node _T_451 = add(UInt<5>("h018"), io.amount) @[execute.scala 81:60]
    node _T_452 = tail(_T_451, 1) @[execute.scala 81:60]
    node _T_454 = mux(_T_444, _T_87[_T_448], _T_87[_T_452]) @[execute.scala 81:10]
    node _T_456 = lt(io.amount, UInt<6>("h027")) @[execute.scala 81:15]
    node _T_458 = sub(io.amount, UInt<6>("h027")) @[execute.scala 81:37]
    node _T_459 = asUInt(_T_458) @[execute.scala 81:37]
    node _T_460 = tail(_T_459, 1) @[execute.scala 81:37]
    node _T_463 = add(UInt<5>("h019"), io.amount) @[execute.scala 81:60]
    node _T_464 = tail(_T_463, 1) @[execute.scala 81:60]
    node _T_466 = mux(_T_456, _T_87[_T_460], _T_87[_T_464]) @[execute.scala 81:10]
    node _T_468 = lt(io.amount, UInt<6>("h026")) @[execute.scala 81:15]
    node _T_470 = sub(io.amount, UInt<6>("h026")) @[execute.scala 81:37]
    node _T_471 = asUInt(_T_470) @[execute.scala 81:37]
    node _T_472 = tail(_T_471, 1) @[execute.scala 81:37]
    node _T_475 = add(UInt<5>("h01a"), io.amount) @[execute.scala 81:60]
    node _T_476 = tail(_T_475, 1) @[execute.scala 81:60]
    node _T_478 = mux(_T_468, _T_87[_T_472], _T_87[_T_476]) @[execute.scala 81:10]
    node _T_480 = lt(io.amount, UInt<6>("h025")) @[execute.scala 81:15]
    node _T_482 = sub(io.amount, UInt<6>("h025")) @[execute.scala 81:37]
    node _T_483 = asUInt(_T_482) @[execute.scala 81:37]
    node _T_484 = tail(_T_483, 1) @[execute.scala 81:37]
    node _T_487 = add(UInt<5>("h01b"), io.amount) @[execute.scala 81:60]
    node _T_488 = tail(_T_487, 1) @[execute.scala 81:60]
    node _T_490 = mux(_T_480, _T_87[_T_484], _T_87[_T_488]) @[execute.scala 81:10]
    node _T_492 = lt(io.amount, UInt<6>("h024")) @[execute.scala 81:15]
    node _T_494 = sub(io.amount, UInt<6>("h024")) @[execute.scala 81:37]
    node _T_495 = asUInt(_T_494) @[execute.scala 81:37]
    node _T_496 = tail(_T_495, 1) @[execute.scala 81:37]
    node _T_499 = add(UInt<5>("h01c"), io.amount) @[execute.scala 81:60]
    node _T_500 = tail(_T_499, 1) @[execute.scala 81:60]
    node _T_502 = mux(_T_492, _T_87[_T_496], _T_87[_T_500]) @[execute.scala 81:10]
    node _T_504 = lt(io.amount, UInt<6>("h023")) @[execute.scala 81:15]
    node _T_506 = sub(io.amount, UInt<6>("h023")) @[execute.scala 81:37]
    node _T_507 = asUInt(_T_506) @[execute.scala 81:37]
    node _T_508 = tail(_T_507, 1) @[execute.scala 81:37]
    node _T_511 = add(UInt<5>("h01d"), io.amount) @[execute.scala 81:60]
    node _T_512 = tail(_T_511, 1) @[execute.scala 81:60]
    node _T_514 = mux(_T_504, _T_87[_T_508], _T_87[_T_512]) @[execute.scala 81:10]
    node _T_516 = lt(io.amount, UInt<6>("h022")) @[execute.scala 81:15]
    node _T_518 = sub(io.amount, UInt<6>("h022")) @[execute.scala 81:37]
    node _T_519 = asUInt(_T_518) @[execute.scala 81:37]
    node _T_520 = tail(_T_519, 1) @[execute.scala 81:37]
    node _T_523 = add(UInt<5>("h01e"), io.amount) @[execute.scala 81:60]
    node _T_524 = tail(_T_523, 1) @[execute.scala 81:60]
    node _T_526 = mux(_T_516, _T_87[_T_520], _T_87[_T_524]) @[execute.scala 81:10]
    node _T_528 = lt(io.amount, UInt<6>("h021")) @[execute.scala 81:15]
    node _T_530 = sub(io.amount, UInt<6>("h021")) @[execute.scala 81:37]
    node _T_531 = asUInt(_T_530) @[execute.scala 81:37]
    node _T_532 = tail(_T_531, 1) @[execute.scala 81:37]
    node _T_535 = add(UInt<5>("h01f"), io.amount) @[execute.scala 81:60]
    node _T_536 = tail(_T_535, 1) @[execute.scala 81:60]
    node _T_538 = mux(_T_528, _T_87[_T_532], _T_87[_T_536]) @[execute.scala 81:10]
    node _T_540 = lt(io.amount, UInt<6>("h020")) @[execute.scala 81:15]
    node _T_542 = sub(io.amount, UInt<6>("h020")) @[execute.scala 81:37]
    node _T_543 = asUInt(_T_542) @[execute.scala 81:37]
    node _T_544 = tail(_T_543, 1) @[execute.scala 81:37]
    node _T_547 = add(UInt<6>("h020"), io.amount) @[execute.scala 81:60]
    node _T_548 = tail(_T_547, 1) @[execute.scala 81:60]
    node _T_550 = mux(_T_540, _T_87[_T_544], _T_87[_T_548]) @[execute.scala 81:10]
    node _T_552 = lt(io.amount, UInt<5>("h01f")) @[execute.scala 81:15]
    node _T_554 = sub(io.amount, UInt<5>("h01f")) @[execute.scala 81:37]
    node _T_555 = asUInt(_T_554) @[execute.scala 81:37]
    node _T_556 = tail(_T_555, 1) @[execute.scala 81:37]
    node _T_559 = add(UInt<6>("h021"), io.amount) @[execute.scala 81:60]
    node _T_560 = tail(_T_559, 1) @[execute.scala 81:60]
    node _T_562 = mux(_T_552, _T_87[_T_556], _T_87[_T_560]) @[execute.scala 81:10]
    node _T_564 = lt(io.amount, UInt<5>("h01e")) @[execute.scala 81:15]
    node _T_566 = sub(io.amount, UInt<5>("h01e")) @[execute.scala 81:37]
    node _T_567 = asUInt(_T_566) @[execute.scala 81:37]
    node _T_568 = tail(_T_567, 1) @[execute.scala 81:37]
    node _T_571 = add(UInt<6>("h022"), io.amount) @[execute.scala 81:60]
    node _T_572 = tail(_T_571, 1) @[execute.scala 81:60]
    node _T_574 = mux(_T_564, _T_87[_T_568], _T_87[_T_572]) @[execute.scala 81:10]
    node _T_576 = lt(io.amount, UInt<5>("h01d")) @[execute.scala 81:15]
    node _T_578 = sub(io.amount, UInt<5>("h01d")) @[execute.scala 81:37]
    node _T_579 = asUInt(_T_578) @[execute.scala 81:37]
    node _T_580 = tail(_T_579, 1) @[execute.scala 81:37]
    node _T_583 = add(UInt<6>("h023"), io.amount) @[execute.scala 81:60]
    node _T_584 = tail(_T_583, 1) @[execute.scala 81:60]
    node _T_586 = mux(_T_576, _T_87[_T_580], _T_87[_T_584]) @[execute.scala 81:10]
    node _T_588 = lt(io.amount, UInt<5>("h01c")) @[execute.scala 81:15]
    node _T_590 = sub(io.amount, UInt<5>("h01c")) @[execute.scala 81:37]
    node _T_591 = asUInt(_T_590) @[execute.scala 81:37]
    node _T_592 = tail(_T_591, 1) @[execute.scala 81:37]
    node _T_595 = add(UInt<6>("h024"), io.amount) @[execute.scala 81:60]
    node _T_596 = tail(_T_595, 1) @[execute.scala 81:60]
    node _T_598 = mux(_T_588, _T_87[_T_592], _T_87[_T_596]) @[execute.scala 81:10]
    node _T_600 = lt(io.amount, UInt<5>("h01b")) @[execute.scala 81:15]
    node _T_602 = sub(io.amount, UInt<5>("h01b")) @[execute.scala 81:37]
    node _T_603 = asUInt(_T_602) @[execute.scala 81:37]
    node _T_604 = tail(_T_603, 1) @[execute.scala 81:37]
    node _T_607 = add(UInt<6>("h025"), io.amount) @[execute.scala 81:60]
    node _T_608 = tail(_T_607, 1) @[execute.scala 81:60]
    node _T_610 = mux(_T_600, _T_87[_T_604], _T_87[_T_608]) @[execute.scala 81:10]
    node _T_612 = lt(io.amount, UInt<5>("h01a")) @[execute.scala 81:15]
    node _T_614 = sub(io.amount, UInt<5>("h01a")) @[execute.scala 81:37]
    node _T_615 = asUInt(_T_614) @[execute.scala 81:37]
    node _T_616 = tail(_T_615, 1) @[execute.scala 81:37]
    node _T_619 = add(UInt<6>("h026"), io.amount) @[execute.scala 81:60]
    node _T_620 = tail(_T_619, 1) @[execute.scala 81:60]
    node _T_622 = mux(_T_612, _T_87[_T_616], _T_87[_T_620]) @[execute.scala 81:10]
    node _T_624 = lt(io.amount, UInt<5>("h019")) @[execute.scala 81:15]
    node _T_626 = sub(io.amount, UInt<5>("h019")) @[execute.scala 81:37]
    node _T_627 = asUInt(_T_626) @[execute.scala 81:37]
    node _T_628 = tail(_T_627, 1) @[execute.scala 81:37]
    node _T_631 = add(UInt<6>("h027"), io.amount) @[execute.scala 81:60]
    node _T_632 = tail(_T_631, 1) @[execute.scala 81:60]
    node _T_634 = mux(_T_624, _T_87[_T_628], _T_87[_T_632]) @[execute.scala 81:10]
    node _T_636 = lt(io.amount, UInt<5>("h018")) @[execute.scala 81:15]
    node _T_638 = sub(io.amount, UInt<5>("h018")) @[execute.scala 81:37]
    node _T_639 = asUInt(_T_638) @[execute.scala 81:37]
    node _T_640 = tail(_T_639, 1) @[execute.scala 81:37]
    node _T_643 = add(UInt<6>("h028"), io.amount) @[execute.scala 81:60]
    node _T_644 = tail(_T_643, 1) @[execute.scala 81:60]
    node _T_646 = mux(_T_636, _T_87[_T_640], _T_87[_T_644]) @[execute.scala 81:10]
    node _T_648 = lt(io.amount, UInt<5>("h017")) @[execute.scala 81:15]
    node _T_650 = sub(io.amount, UInt<5>("h017")) @[execute.scala 81:37]
    node _T_651 = asUInt(_T_650) @[execute.scala 81:37]
    node _T_652 = tail(_T_651, 1) @[execute.scala 81:37]
    node _T_655 = add(UInt<6>("h029"), io.amount) @[execute.scala 81:60]
    node _T_656 = tail(_T_655, 1) @[execute.scala 81:60]
    node _T_658 = mux(_T_648, _T_87[_T_652], _T_87[_T_656]) @[execute.scala 81:10]
    node _T_660 = lt(io.amount, UInt<5>("h016")) @[execute.scala 81:15]
    node _T_662 = sub(io.amount, UInt<5>("h016")) @[execute.scala 81:37]
    node _T_663 = asUInt(_T_662) @[execute.scala 81:37]
    node _T_664 = tail(_T_663, 1) @[execute.scala 81:37]
    node _T_667 = add(UInt<6>("h02a"), io.amount) @[execute.scala 81:60]
    node _T_668 = tail(_T_667, 1) @[execute.scala 81:60]
    node _T_670 = mux(_T_660, _T_87[_T_664], _T_87[_T_668]) @[execute.scala 81:10]
    node _T_672 = lt(io.amount, UInt<5>("h015")) @[execute.scala 81:15]
    node _T_674 = sub(io.amount, UInt<5>("h015")) @[execute.scala 81:37]
    node _T_675 = asUInt(_T_674) @[execute.scala 81:37]
    node _T_676 = tail(_T_675, 1) @[execute.scala 81:37]
    node _T_679 = add(UInt<6>("h02b"), io.amount) @[execute.scala 81:60]
    node _T_680 = tail(_T_679, 1) @[execute.scala 81:60]
    node _T_682 = mux(_T_672, _T_87[_T_676], _T_87[_T_680]) @[execute.scala 81:10]
    node _T_684 = lt(io.amount, UInt<5>("h014")) @[execute.scala 81:15]
    node _T_686 = sub(io.amount, UInt<5>("h014")) @[execute.scala 81:37]
    node _T_687 = asUInt(_T_686) @[execute.scala 81:37]
    node _T_688 = tail(_T_687, 1) @[execute.scala 81:37]
    node _T_691 = add(UInt<6>("h02c"), io.amount) @[execute.scala 81:60]
    node _T_692 = tail(_T_691, 1) @[execute.scala 81:60]
    node _T_694 = mux(_T_684, _T_87[_T_688], _T_87[_T_692]) @[execute.scala 81:10]
    node _T_696 = lt(io.amount, UInt<5>("h013")) @[execute.scala 81:15]
    node _T_698 = sub(io.amount, UInt<5>("h013")) @[execute.scala 81:37]
    node _T_699 = asUInt(_T_698) @[execute.scala 81:37]
    node _T_700 = tail(_T_699, 1) @[execute.scala 81:37]
    node _T_703 = add(UInt<6>("h02d"), io.amount) @[execute.scala 81:60]
    node _T_704 = tail(_T_703, 1) @[execute.scala 81:60]
    node _T_706 = mux(_T_696, _T_87[_T_700], _T_87[_T_704]) @[execute.scala 81:10]
    node _T_708 = lt(io.amount, UInt<5>("h012")) @[execute.scala 81:15]
    node _T_710 = sub(io.amount, UInt<5>("h012")) @[execute.scala 81:37]
    node _T_711 = asUInt(_T_710) @[execute.scala 81:37]
    node _T_712 = tail(_T_711, 1) @[execute.scala 81:37]
    node _T_715 = add(UInt<6>("h02e"), io.amount) @[execute.scala 81:60]
    node _T_716 = tail(_T_715, 1) @[execute.scala 81:60]
    node _T_718 = mux(_T_708, _T_87[_T_712], _T_87[_T_716]) @[execute.scala 81:10]
    node _T_720 = lt(io.amount, UInt<5>("h011")) @[execute.scala 81:15]
    node _T_722 = sub(io.amount, UInt<5>("h011")) @[execute.scala 81:37]
    node _T_723 = asUInt(_T_722) @[execute.scala 81:37]
    node _T_724 = tail(_T_723, 1) @[execute.scala 81:37]
    node _T_727 = add(UInt<6>("h02f"), io.amount) @[execute.scala 81:60]
    node _T_728 = tail(_T_727, 1) @[execute.scala 81:60]
    node _T_730 = mux(_T_720, _T_87[_T_724], _T_87[_T_728]) @[execute.scala 81:10]
    node _T_732 = lt(io.amount, UInt<5>("h010")) @[execute.scala 81:15]
    node _T_734 = sub(io.amount, UInt<5>("h010")) @[execute.scala 81:37]
    node _T_735 = asUInt(_T_734) @[execute.scala 81:37]
    node _T_736 = tail(_T_735, 1) @[execute.scala 81:37]
    node _T_739 = add(UInt<6>("h030"), io.amount) @[execute.scala 81:60]
    node _T_740 = tail(_T_739, 1) @[execute.scala 81:60]
    node _T_742 = mux(_T_732, _T_87[_T_736], _T_87[_T_740]) @[execute.scala 81:10]
    node _T_744 = lt(io.amount, UInt<4>("h0f")) @[execute.scala 81:15]
    node _T_746 = sub(io.amount, UInt<4>("h0f")) @[execute.scala 81:37]
    node _T_747 = asUInt(_T_746) @[execute.scala 81:37]
    node _T_748 = tail(_T_747, 1) @[execute.scala 81:37]
    node _T_751 = add(UInt<6>("h031"), io.amount) @[execute.scala 81:60]
    node _T_752 = tail(_T_751, 1) @[execute.scala 81:60]
    node _T_754 = mux(_T_744, _T_87[_T_748], _T_87[_T_752]) @[execute.scala 81:10]
    node _T_756 = lt(io.amount, UInt<4>("h0e")) @[execute.scala 81:15]
    node _T_758 = sub(io.amount, UInt<4>("h0e")) @[execute.scala 81:37]
    node _T_759 = asUInt(_T_758) @[execute.scala 81:37]
    node _T_760 = tail(_T_759, 1) @[execute.scala 81:37]
    node _T_763 = add(UInt<6>("h032"), io.amount) @[execute.scala 81:60]
    node _T_764 = tail(_T_763, 1) @[execute.scala 81:60]
    node _T_766 = mux(_T_756, _T_87[_T_760], _T_87[_T_764]) @[execute.scala 81:10]
    node _T_768 = lt(io.amount, UInt<4>("h0d")) @[execute.scala 81:15]
    node _T_770 = sub(io.amount, UInt<4>("h0d")) @[execute.scala 81:37]
    node _T_771 = asUInt(_T_770) @[execute.scala 81:37]
    node _T_772 = tail(_T_771, 1) @[execute.scala 81:37]
    node _T_775 = add(UInt<6>("h033"), io.amount) @[execute.scala 81:60]
    node _T_776 = tail(_T_775, 1) @[execute.scala 81:60]
    node _T_778 = mux(_T_768, _T_87[_T_772], _T_87[_T_776]) @[execute.scala 81:10]
    node _T_780 = lt(io.amount, UInt<4>("h0c")) @[execute.scala 81:15]
    node _T_782 = sub(io.amount, UInt<4>("h0c")) @[execute.scala 81:37]
    node _T_783 = asUInt(_T_782) @[execute.scala 81:37]
    node _T_784 = tail(_T_783, 1) @[execute.scala 81:37]
    node _T_787 = add(UInt<6>("h034"), io.amount) @[execute.scala 81:60]
    node _T_788 = tail(_T_787, 1) @[execute.scala 81:60]
    node _T_790 = mux(_T_780, _T_87[_T_784], _T_87[_T_788]) @[execute.scala 81:10]
    node _T_792 = lt(io.amount, UInt<4>("h0b")) @[execute.scala 81:15]
    node _T_794 = sub(io.amount, UInt<4>("h0b")) @[execute.scala 81:37]
    node _T_795 = asUInt(_T_794) @[execute.scala 81:37]
    node _T_796 = tail(_T_795, 1) @[execute.scala 81:37]
    node _T_799 = add(UInt<6>("h035"), io.amount) @[execute.scala 81:60]
    node _T_800 = tail(_T_799, 1) @[execute.scala 81:60]
    node _T_802 = mux(_T_792, _T_87[_T_796], _T_87[_T_800]) @[execute.scala 81:10]
    node _T_804 = lt(io.amount, UInt<4>("h0a")) @[execute.scala 81:15]
    node _T_806 = sub(io.amount, UInt<4>("h0a")) @[execute.scala 81:37]
    node _T_807 = asUInt(_T_806) @[execute.scala 81:37]
    node _T_808 = tail(_T_807, 1) @[execute.scala 81:37]
    node _T_811 = add(UInt<6>("h036"), io.amount) @[execute.scala 81:60]
    node _T_812 = tail(_T_811, 1) @[execute.scala 81:60]
    node _T_814 = mux(_T_804, _T_87[_T_808], _T_87[_T_812]) @[execute.scala 81:10]
    node _T_816 = lt(io.amount, UInt<4>("h09")) @[execute.scala 81:15]
    node _T_818 = sub(io.amount, UInt<4>("h09")) @[execute.scala 81:37]
    node _T_819 = asUInt(_T_818) @[execute.scala 81:37]
    node _T_820 = tail(_T_819, 1) @[execute.scala 81:37]
    node _T_823 = add(UInt<6>("h037"), io.amount) @[execute.scala 81:60]
    node _T_824 = tail(_T_823, 1) @[execute.scala 81:60]
    node _T_826 = mux(_T_816, _T_87[_T_820], _T_87[_T_824]) @[execute.scala 81:10]
    node _T_828 = lt(io.amount, UInt<4>("h08")) @[execute.scala 81:15]
    node _T_830 = sub(io.amount, UInt<4>("h08")) @[execute.scala 81:37]
    node _T_831 = asUInt(_T_830) @[execute.scala 81:37]
    node _T_832 = tail(_T_831, 1) @[execute.scala 81:37]
    node _T_835 = add(UInt<6>("h038"), io.amount) @[execute.scala 81:60]
    node _T_836 = tail(_T_835, 1) @[execute.scala 81:60]
    node _T_838 = mux(_T_828, _T_87[_T_832], _T_87[_T_836]) @[execute.scala 81:10]
    node _T_840 = lt(io.amount, UInt<3>("h07")) @[execute.scala 81:15]
    node _T_842 = sub(io.amount, UInt<3>("h07")) @[execute.scala 81:37]
    node _T_843 = asUInt(_T_842) @[execute.scala 81:37]
    node _T_844 = tail(_T_843, 1) @[execute.scala 81:37]
    node _T_847 = add(UInt<6>("h039"), io.amount) @[execute.scala 81:60]
    node _T_848 = tail(_T_847, 1) @[execute.scala 81:60]
    node _T_850 = mux(_T_840, _T_87[_T_844], _T_87[_T_848]) @[execute.scala 81:10]
    node _T_852 = lt(io.amount, UInt<3>("h06")) @[execute.scala 81:15]
    node _T_854 = sub(io.amount, UInt<3>("h06")) @[execute.scala 81:37]
    node _T_855 = asUInt(_T_854) @[execute.scala 81:37]
    node _T_856 = tail(_T_855, 1) @[execute.scala 81:37]
    node _T_859 = add(UInt<6>("h03a"), io.amount) @[execute.scala 81:60]
    node _T_860 = tail(_T_859, 1) @[execute.scala 81:60]
    node _T_862 = mux(_T_852, _T_87[_T_856], _T_87[_T_860]) @[execute.scala 81:10]
    node _T_864 = lt(io.amount, UInt<3>("h05")) @[execute.scala 81:15]
    node _T_866 = sub(io.amount, UInt<3>("h05")) @[execute.scala 81:37]
    node _T_867 = asUInt(_T_866) @[execute.scala 81:37]
    node _T_868 = tail(_T_867, 1) @[execute.scala 81:37]
    node _T_871 = add(UInt<6>("h03b"), io.amount) @[execute.scala 81:60]
    node _T_872 = tail(_T_871, 1) @[execute.scala 81:60]
    node _T_874 = mux(_T_864, _T_87[_T_868], _T_87[_T_872]) @[execute.scala 81:10]
    node _T_876 = lt(io.amount, UInt<3>("h04")) @[execute.scala 81:15]
    node _T_878 = sub(io.amount, UInt<3>("h04")) @[execute.scala 81:37]
    node _T_879 = asUInt(_T_878) @[execute.scala 81:37]
    node _T_880 = tail(_T_879, 1) @[execute.scala 81:37]
    node _T_883 = add(UInt<6>("h03c"), io.amount) @[execute.scala 81:60]
    node _T_884 = tail(_T_883, 1) @[execute.scala 81:60]
    node _T_886 = mux(_T_876, _T_87[_T_880], _T_87[_T_884]) @[execute.scala 81:10]
    node _T_888 = lt(io.amount, UInt<2>("h03")) @[execute.scala 81:15]
    node _T_890 = sub(io.amount, UInt<2>("h03")) @[execute.scala 81:37]
    node _T_891 = asUInt(_T_890) @[execute.scala 81:37]
    node _T_892 = tail(_T_891, 1) @[execute.scala 81:37]
    node _T_895 = add(UInt<6>("h03d"), io.amount) @[execute.scala 81:60]
    node _T_896 = tail(_T_895, 1) @[execute.scala 81:60]
    node _T_898 = mux(_T_888, _T_87[_T_892], _T_87[_T_896]) @[execute.scala 81:10]
    node _T_900 = lt(io.amount, UInt<2>("h02")) @[execute.scala 81:15]
    node _T_902 = sub(io.amount, UInt<2>("h02")) @[execute.scala 81:37]
    node _T_903 = asUInt(_T_902) @[execute.scala 81:37]
    node _T_904 = tail(_T_903, 1) @[execute.scala 81:37]
    node _T_907 = add(UInt<6>("h03e"), io.amount) @[execute.scala 81:60]
    node _T_908 = tail(_T_907, 1) @[execute.scala 81:60]
    node _T_910 = mux(_T_900, _T_87[_T_904], _T_87[_T_908]) @[execute.scala 81:10]
    node _T_912 = lt(io.amount, UInt<1>("h01")) @[execute.scala 81:15]
    node _T_914 = sub(io.amount, UInt<1>("h01")) @[execute.scala 81:37]
    node _T_915 = asUInt(_T_914) @[execute.scala 81:37]
    node _T_916 = tail(_T_915, 1) @[execute.scala 81:37]
    node _T_919 = add(UInt<6>("h03f"), io.amount) @[execute.scala 81:60]
    node _T_920 = tail(_T_919, 1) @[execute.scala 81:60]
    node _T_922 = mux(_T_912, _T_87[_T_916], _T_87[_T_920]) @[execute.scala 81:10]
    wire _T_926 : UInt<1>[64] @[execute.scala 80:25]
    _T_926[0] <= _T_166 @[execute.scala 80:25]
    _T_926[1] <= _T_178 @[execute.scala 80:25]
    _T_926[2] <= _T_190 @[execute.scala 80:25]
    _T_926[3] <= _T_202 @[execute.scala 80:25]
    _T_926[4] <= _T_214 @[execute.scala 80:25]
    _T_926[5] <= _T_226 @[execute.scala 80:25]
    _T_926[6] <= _T_238 @[execute.scala 80:25]
    _T_926[7] <= _T_250 @[execute.scala 80:25]
    _T_926[8] <= _T_262 @[execute.scala 80:25]
    _T_926[9] <= _T_274 @[execute.scala 80:25]
    _T_926[10] <= _T_286 @[execute.scala 80:25]
    _T_926[11] <= _T_298 @[execute.scala 80:25]
    _T_926[12] <= _T_310 @[execute.scala 80:25]
    _T_926[13] <= _T_322 @[execute.scala 80:25]
    _T_926[14] <= _T_334 @[execute.scala 80:25]
    _T_926[15] <= _T_346 @[execute.scala 80:25]
    _T_926[16] <= _T_358 @[execute.scala 80:25]
    _T_926[17] <= _T_370 @[execute.scala 80:25]
    _T_926[18] <= _T_382 @[execute.scala 80:25]
    _T_926[19] <= _T_394 @[execute.scala 80:25]
    _T_926[20] <= _T_406 @[execute.scala 80:25]
    _T_926[21] <= _T_418 @[execute.scala 80:25]
    _T_926[22] <= _T_430 @[execute.scala 80:25]
    _T_926[23] <= _T_442 @[execute.scala 80:25]
    _T_926[24] <= _T_454 @[execute.scala 80:25]
    _T_926[25] <= _T_466 @[execute.scala 80:25]
    _T_926[26] <= _T_478 @[execute.scala 80:25]
    _T_926[27] <= _T_490 @[execute.scala 80:25]
    _T_926[28] <= _T_502 @[execute.scala 80:25]
    _T_926[29] <= _T_514 @[execute.scala 80:25]
    _T_926[30] <= _T_526 @[execute.scala 80:25]
    _T_926[31] <= _T_538 @[execute.scala 80:25]
    _T_926[32] <= _T_550 @[execute.scala 80:25]
    _T_926[33] <= _T_562 @[execute.scala 80:25]
    _T_926[34] <= _T_574 @[execute.scala 80:25]
    _T_926[35] <= _T_586 @[execute.scala 80:25]
    _T_926[36] <= _T_598 @[execute.scala 80:25]
    _T_926[37] <= _T_610 @[execute.scala 80:25]
    _T_926[38] <= _T_622 @[execute.scala 80:25]
    _T_926[39] <= _T_634 @[execute.scala 80:25]
    _T_926[40] <= _T_646 @[execute.scala 80:25]
    _T_926[41] <= _T_658 @[execute.scala 80:25]
    _T_926[42] <= _T_670 @[execute.scala 80:25]
    _T_926[43] <= _T_682 @[execute.scala 80:25]
    _T_926[44] <= _T_694 @[execute.scala 80:25]
    _T_926[45] <= _T_706 @[execute.scala 80:25]
    _T_926[46] <= _T_718 @[execute.scala 80:25]
    _T_926[47] <= _T_730 @[execute.scala 80:25]
    _T_926[48] <= _T_742 @[execute.scala 80:25]
    _T_926[49] <= _T_754 @[execute.scala 80:25]
    _T_926[50] <= _T_766 @[execute.scala 80:25]
    _T_926[51] <= _T_778 @[execute.scala 80:25]
    _T_926[52] <= _T_790 @[execute.scala 80:25]
    _T_926[53] <= _T_802 @[execute.scala 80:25]
    _T_926[54] <= _T_814 @[execute.scala 80:25]
    _T_926[55] <= _T_826 @[execute.scala 80:25]
    _T_926[56] <= _T_838 @[execute.scala 80:25]
    _T_926[57] <= _T_850 @[execute.scala 80:25]
    _T_926[58] <= _T_862 @[execute.scala 80:25]
    _T_926[59] <= _T_874 @[execute.scala 80:25]
    _T_926[60] <= _T_886 @[execute.scala 80:25]
    _T_926[61] <= _T_898 @[execute.scala 80:25]
    _T_926[62] <= _T_910 @[execute.scala 80:25]
    _T_926[63] <= _T_922 @[execute.scala 80:25]
    node _T_993 = cat(_T_926[1], _T_926[0]) @[execute.scala 91:73]
    node _T_994 = cat(_T_926[3], _T_926[2]) @[execute.scala 91:73]
    node _T_995 = cat(_T_994, _T_993) @[execute.scala 91:73]
    node _T_996 = cat(_T_926[5], _T_926[4]) @[execute.scala 91:73]
    node _T_997 = cat(_T_926[7], _T_926[6]) @[execute.scala 91:73]
    node _T_998 = cat(_T_997, _T_996) @[execute.scala 91:73]
    node _T_999 = cat(_T_998, _T_995) @[execute.scala 91:73]
    node _T_1000 = cat(_T_926[9], _T_926[8]) @[execute.scala 91:73]
    node _T_1001 = cat(_T_926[11], _T_926[10]) @[execute.scala 91:73]
    node _T_1002 = cat(_T_1001, _T_1000) @[execute.scala 91:73]
    node _T_1003 = cat(_T_926[13], _T_926[12]) @[execute.scala 91:73]
    node _T_1004 = cat(_T_926[15], _T_926[14]) @[execute.scala 91:73]
    node _T_1005 = cat(_T_1004, _T_1003) @[execute.scala 91:73]
    node _T_1006 = cat(_T_1005, _T_1002) @[execute.scala 91:73]
    node _T_1007 = cat(_T_1006, _T_999) @[execute.scala 91:73]
    node _T_1008 = cat(_T_926[17], _T_926[16]) @[execute.scala 91:73]
    node _T_1009 = cat(_T_926[19], _T_926[18]) @[execute.scala 91:73]
    node _T_1010 = cat(_T_1009, _T_1008) @[execute.scala 91:73]
    node _T_1011 = cat(_T_926[21], _T_926[20]) @[execute.scala 91:73]
    node _T_1012 = cat(_T_926[23], _T_926[22]) @[execute.scala 91:73]
    node _T_1013 = cat(_T_1012, _T_1011) @[execute.scala 91:73]
    node _T_1014 = cat(_T_1013, _T_1010) @[execute.scala 91:73]
    node _T_1015 = cat(_T_926[25], _T_926[24]) @[execute.scala 91:73]
    node _T_1016 = cat(_T_926[27], _T_926[26]) @[execute.scala 91:73]
    node _T_1017 = cat(_T_1016, _T_1015) @[execute.scala 91:73]
    node _T_1018 = cat(_T_926[29], _T_926[28]) @[execute.scala 91:73]
    node _T_1019 = cat(_T_926[31], _T_926[30]) @[execute.scala 91:73]
    node _T_1020 = cat(_T_1019, _T_1018) @[execute.scala 91:73]
    node _T_1021 = cat(_T_1020, _T_1017) @[execute.scala 91:73]
    node _T_1022 = cat(_T_1021, _T_1014) @[execute.scala 91:73]
    node _T_1023 = cat(_T_1022, _T_1007) @[execute.scala 91:73]
    node _T_1024 = cat(_T_926[33], _T_926[32]) @[execute.scala 91:73]
    node _T_1025 = cat(_T_926[35], _T_926[34]) @[execute.scala 91:73]
    node _T_1026 = cat(_T_1025, _T_1024) @[execute.scala 91:73]
    node _T_1027 = cat(_T_926[37], _T_926[36]) @[execute.scala 91:73]
    node _T_1028 = cat(_T_926[39], _T_926[38]) @[execute.scala 91:73]
    node _T_1029 = cat(_T_1028, _T_1027) @[execute.scala 91:73]
    node _T_1030 = cat(_T_1029, _T_1026) @[execute.scala 91:73]
    node _T_1031 = cat(_T_926[41], _T_926[40]) @[execute.scala 91:73]
    node _T_1032 = cat(_T_926[43], _T_926[42]) @[execute.scala 91:73]
    node _T_1033 = cat(_T_1032, _T_1031) @[execute.scala 91:73]
    node _T_1034 = cat(_T_926[45], _T_926[44]) @[execute.scala 91:73]
    node _T_1035 = cat(_T_926[47], _T_926[46]) @[execute.scala 91:73]
    node _T_1036 = cat(_T_1035, _T_1034) @[execute.scala 91:73]
    node _T_1037 = cat(_T_1036, _T_1033) @[execute.scala 91:73]
    node _T_1038 = cat(_T_1037, _T_1030) @[execute.scala 91:73]
    node _T_1039 = cat(_T_926[49], _T_926[48]) @[execute.scala 91:73]
    node _T_1040 = cat(_T_926[51], _T_926[50]) @[execute.scala 91:73]
    node _T_1041 = cat(_T_1040, _T_1039) @[execute.scala 91:73]
    node _T_1042 = cat(_T_926[53], _T_926[52]) @[execute.scala 91:73]
    node _T_1043 = cat(_T_926[55], _T_926[54]) @[execute.scala 91:73]
    node _T_1044 = cat(_T_1043, _T_1042) @[execute.scala 91:73]
    node _T_1045 = cat(_T_1044, _T_1041) @[execute.scala 91:73]
    node _T_1046 = cat(_T_926[57], _T_926[56]) @[execute.scala 91:73]
    node _T_1047 = cat(_T_926[59], _T_926[58]) @[execute.scala 91:73]
    node _T_1048 = cat(_T_1047, _T_1046) @[execute.scala 91:73]
    node _T_1049 = cat(_T_926[61], _T_926[60]) @[execute.scala 91:73]
    node _T_1050 = cat(_T_926[63], _T_926[62]) @[execute.scala 91:73]
    node _T_1051 = cat(_T_1050, _T_1049) @[execute.scala 91:73]
    node _T_1052 = cat(_T_1051, _T_1048) @[execute.scala 91:73]
    node _T_1053 = cat(_T_1052, _T_1045) @[execute.scala 91:73]
    node _T_1054 = cat(_T_1053, _T_1038) @[execute.scala 91:73]
    node _T_1055 = cat(_T_1054, _T_1023) @[execute.scala 91:73]
    node _T_1056 = eq(UInt<2>("h03"), io.opcode) @[Mux.scala 46:19]
    node _T_1057 = mux(_T_1056, _T_1055, io.word) @[Mux.scala 46:16]
    node _T_1058 = eq(UInt<2>("h02"), io.opcode) @[Mux.scala 46:19]
    node _T_1059 = mux(_T_1058, _T_19, _T_1057) @[Mux.scala 46:16]
    node _T_1060 = eq(UInt<2>("h01"), io.opcode) @[Mux.scala 46:19]
    node _T_1061 = mux(_T_1060, _T_16, _T_1059) @[Mux.scala 46:16]
    node _T_1062 = eq(UInt<2>("h00"), io.opcode) @[Mux.scala 46:19]
    node res = mux(_T_1062, _T_15, _T_1061) @[Mux.scala 46:16]
    node _T_1063 = bits(res, 64, 64) @[execute.scala 94:18]
    node _T_1064 = bits(_T_1063, 0, 0) @[execute.scala 94:37]
    io.carry <= _T_1064 @[execute.scala 94:12]
    io.res <= res @[execute.scala 95:10]
    
  module BasicALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<64>, flip b : UInt<64>, flip opcode : UInt<3>, res : UInt<64>, nzcv : UInt<4>}
    
    node _T_16 = and(io.a, io.b) @[execute.scala 32:34]
    node _T_17 = not(io.b) @[execute.scala 33:36]
    node _T_18 = and(io.a, _T_17) @[execute.scala 33:34]
    node _T_19 = or(io.a, io.b) @[execute.scala 34:34]
    node _T_20 = not(io.b) @[execute.scala 35:36]
    node _T_21 = or(io.a, _T_20) @[execute.scala 35:34]
    node _T_22 = xor(io.a, io.b) @[execute.scala 36:34]
    node _T_23 = not(io.b) @[execute.scala 37:36]
    node _T_24 = xor(io.a, _T_23) @[execute.scala 37:34]
    node _T_25 = add(io.a, io.b) @[execute.scala 38:34]
    node _T_26 = tail(_T_25, 1) @[execute.scala 38:34]
    node _T_27 = sub(io.a, io.b) @[execute.scala 39:34]
    node _T_28 = asUInt(_T_27) @[execute.scala 39:34]
    node _T_29 = tail(_T_28, 1) @[execute.scala 39:34]
    node _T_30 = eq(UInt<3>("h07"), io.opcode) @[Mux.scala 46:19]
    node _T_31 = mux(_T_30, _T_29, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_32 = eq(UInt<3>("h06"), io.opcode) @[Mux.scala 46:19]
    node _T_33 = mux(_T_32, _T_26, _T_31) @[Mux.scala 46:16]
    node _T_34 = eq(UInt<3>("h05"), io.opcode) @[Mux.scala 46:19]
    node _T_35 = mux(_T_34, _T_24, _T_33) @[Mux.scala 46:16]
    node _T_36 = eq(UInt<3>("h04"), io.opcode) @[Mux.scala 46:19]
    node _T_37 = mux(_T_36, _T_22, _T_35) @[Mux.scala 46:16]
    node _T_38 = eq(UInt<3>("h03"), io.opcode) @[Mux.scala 46:19]
    node _T_39 = mux(_T_38, _T_21, _T_37) @[Mux.scala 46:16]
    node _T_40 = eq(UInt<3>("h02"), io.opcode) @[Mux.scala 46:19]
    node _T_41 = mux(_T_40, _T_19, _T_39) @[Mux.scala 46:16]
    node _T_42 = eq(UInt<3>("h01"), io.opcode) @[Mux.scala 46:19]
    node _T_43 = mux(_T_42, _T_18, _T_41) @[Mux.scala 46:16]
    node _T_44 = eq(UInt<3>("h00"), io.opcode) @[Mux.scala 46:19]
    node res = mux(_T_44, _T_16, _T_43) @[Mux.scala 46:16]
    wire nzcv : UInt<1>[4] @[execute.scala 45:21]
    nzcv[0] <= UInt<1>("h00") @[execute.scala 45:21]
    nzcv[1] <= UInt<1>("h00") @[execute.scala 45:21]
    nzcv[2] <= UInt<1>("h00") @[execute.scala 45:21]
    nzcv[3] <= UInt<1>("h00") @[execute.scala 45:21]
    node _T_58 = asSInt(res) @[execute.scala 46:18]
    node _T_60 = lt(_T_58, asSInt(UInt<1>("h00"))) @[execute.scala 46:25]
    nzcv[0] <= _T_60 @[execute.scala 46:11]
    node _T_62 = eq(res, UInt<1>("h00")) @[execute.scala 47:18]
    nzcv[1] <= _T_62 @[execute.scala 47:11]
    node _T_63 = add(io.a, io.b) @[execute.scala 49:20]
    node _T_64 = bits(_T_63, 64, 64) @[execute.scala 49:28]
    node _T_66 = eq(_T_64, UInt<1>("h01")) @[execute.scala 49:41]
    nzcv[2] <= _T_66 @[execute.scala 49:11]
    node _T_67 = asSInt(io.a) @[execute.scala 51:23]
    node _T_68 = asSInt(io.b) @[execute.scala 51:37]
    node _T_69 = add(_T_67, _T_68) @[execute.scala 51:30]
    node _T_70 = tail(_T_69, 1) @[execute.scala 51:30]
    node sign_sum = asSInt(_T_70) @[execute.scala 51:30]
    node _T_71 = asSInt(io.a) @[execute.scala 52:20]
    node _T_73 = gt(_T_71, asSInt(UInt<1>("h00"))) @[execute.scala 52:27]
    node _T_74 = asSInt(io.b) @[execute.scala 52:40]
    node _T_76 = gt(_T_74, asSInt(UInt<1>("h00"))) @[execute.scala 52:47]
    node isPos = and(_T_73, _T_76) @[execute.scala 52:33]
    node _T_77 = asSInt(io.a) @[execute.scala 53:20]
    node _T_79 = lt(_T_77, asSInt(UInt<1>("h00"))) @[execute.scala 53:27]
    node _T_80 = asSInt(io.b) @[execute.scala 53:40]
    node _T_82 = lt(_T_80, asSInt(UInt<1>("h00"))) @[execute.scala 53:47]
    node isNeg = and(_T_79, _T_82) @[execute.scala 53:33]
    when isPos : @[execute.scala 54:15]
      node _T_84 = gt(sign_sum, asSInt(UInt<1>("h00"))) @[execute.scala 55:27]
      node _T_86 = eq(_T_84, UInt<1>("h00")) @[execute.scala 55:16]
      nzcv[3] <= _T_86 @[execute.scala 55:13]
      skip @[execute.scala 54:15]
    else : @[execute.scala 56:21]
      when isNeg : @[execute.scala 56:21]
        node _T_88 = lt(sign_sum, asSInt(UInt<1>("h00"))) @[execute.scala 57:27]
        node _T_90 = eq(_T_88, UInt<1>("h00")) @[execute.scala 57:16]
        nzcv[3] <= _T_90 @[execute.scala 57:13]
        skip @[execute.scala 56:21]
      else : @[execute.scala 58:15]
        nzcv[3] <= UInt<1>("h00") @[execute.scala 59:13]
        skip @[execute.scala 58:15]
    node _T_92 = cat(nzcv[1], nzcv[0]) @[execute.scala 62:19]
    node _T_93 = cat(nzcv[3], nzcv[2]) @[execute.scala 62:19]
    node _T_94 = cat(_T_93, _T_92) @[execute.scala 62:19]
    io.nzcv <= _T_94 @[execute.scala 62:11]
    io.res <= res @[execute.scala 64:10]
    
  module ExecuteUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dinst : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}, flip rVal1 : UInt<64>, flip rVal2 : UInt<64>, einst : {valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>}}}
    
    node interVal2 = mux(io.dinst.rs2_en, io.rVal2, io.dinst.imm) @[execute.scala 112:22]
    inst shiftALU of ShiftALU @[execute.scala 115:24]
    shiftALU.clock <= clock
    shiftALU.reset <= reset
    shiftALU.io.word <= interVal2 @[execute.scala 116:20]
    shiftALU.io.amount <= io.dinst.shift_val @[execute.scala 117:22]
    shiftALU.io.opcode <= io.dinst.shift_type @[execute.scala 118:22]
    node aluVal2 = mux(io.dinst.shift_en, shiftALU.io.res, interVal2) @[execute.scala 121:20]
    inst basicALU of BasicALU @[execute.scala 124:24]
    basicALU.clock <= clock
    basicALU.reset <= reset
    basicALU.io.a <= io.rVal1 @[execute.scala 125:17]
    basicALU.io.b <= aluVal2 @[execute.scala 126:17]
    basicALU.io.opcode <= io.dinst.op @[execute.scala 127:22]
    wire einst : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>} @[execute.scala 130:19]
    einst.res <= basicALU.io.res @[execute.scala 131:13]
    einst.rd <= io.dinst.rd @[execute.scala 132:13]
    einst.rd_en <= io.dinst.rd_en @[execute.scala 133:15]
    einst.tag <= io.dinst.tag @[execute.scala 134:13]
    einst.nzcv <= basicALU.io.nzcv @[execute.scala 135:14]
    einst.nzcv_en <= io.dinst.nzcv_en @[execute.scala 136:17]
    io.einst.bits.nzcv_en <= einst.nzcv_en @[execute.scala 139:17]
    io.einst.bits.nzcv <= einst.nzcv @[execute.scala 139:17]
    io.einst.bits.tag <= einst.tag @[execute.scala 139:17]
    io.einst.bits.rd_en <= einst.rd_en @[execute.scala 139:17]
    io.einst.bits.rd <= einst.rd @[execute.scala 139:17]
    io.einst.bits.res <= einst.res @[execute.scala 139:17]
    node _T_23 = eq(UInt<3>("h04"), io.dinst.itype) @[Mux.scala 46:19]
    node _T_24 = mux(_T_23, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_25 = eq(UInt<3>("h01"), io.dinst.itype) @[Mux.scala 46:19]
    node _T_26 = mux(_T_25, UInt<1>("h01"), _T_24) @[Mux.scala 46:16]
    io.einst.valid <= _T_26 @[execute.scala 141:18]
    
  module FReg_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>}}, flip flush : UInt<1>}
    
    reg _T_34 : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>, nzcv : UInt<4>, nzcv_en : UInt<1>}, clock @[FReg.scala 45:24]
    reg _T_37 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FReg.scala 46:30]
    node _T_39 = eq(_T_37, UInt<1>("h00")) @[FReg.scala 48:33]
    node _T_40 = or(_T_39, io.deq.ready) @[FReg.scala 48:40]
    node _T_41 = or(_T_40, io.flush) @[FReg.scala 48:56]
    wire _T_43 : UInt<1>
    _T_43 <= _T_41
    when _T_43 : @[FReg.scala 50:17]
      _T_34.nzcv_en <= io.enq.bits.nzcv_en @[FReg.scala 51:9]
      _T_34.nzcv <= io.enq.bits.nzcv @[FReg.scala 51:9]
      _T_34.tag <= io.enq.bits.tag @[FReg.scala 51:9]
      _T_34.rd_en <= io.enq.bits.rd_en @[FReg.scala 51:9]
      _T_34.rd <= io.enq.bits.rd @[FReg.scala 51:9]
      _T_34.res <= io.enq.bits.res @[FReg.scala 51:9]
      _T_37 <= io.enq.valid @[FReg.scala 52:11]
      skip @[FReg.scala 50:17]
    io.enq.ready <= _T_43 @[FReg.scala 54:16]
    io.deq.bits.nzcv_en <= _T_34.nzcv_en @[FReg.scala 56:15]
    io.deq.bits.nzcv <= _T_34.nzcv @[FReg.scala 56:15]
    io.deq.bits.tag <= _T_34.tag @[FReg.scala 56:15]
    io.deq.bits.rd_en <= _T_34.rd_en @[FReg.scala 56:15]
    io.deq.bits.rd <= _T_34.rd @[FReg.scala 56:15]
    io.deq.bits.res <= _T_34.res @[FReg.scala 56:15]
    node _T_45 = eq(io.flush, UInt<1>("h00")) @[FReg.scala 57:28]
    node _T_46 = and(_T_37, _T_45) @[FReg.scala 57:25]
    io.deq.valid <= _T_46 @[FReg.scala 57:16]
    
  module CondUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip cond : UInt<4>, flip nzcv : UInt<4>, res : UInt<1>}
    
    wire result : UInt<1>
    result <= UInt<1>("h00")
    node _T_13 = bits(io.cond, 3, 1) @[branch.scala 23:21]
    node _T_15 = eq(_T_13, UInt<1>("h00")) @[branch.scala 23:27]
    when _T_15 : @[branch.scala 23:41]
      node _T_16 = bits(io.nzcv, 2, 2) @[branch.scala 23:60]
      node _T_18 = eq(_T_16, UInt<1>("h01")) @[branch.scala 23:64]
      result <= _T_18 @[branch.scala 23:49]
      skip @[branch.scala 23:41]
    else : @[branch.scala 24:41]
      node _T_19 = bits(io.cond, 3, 1) @[branch.scala 24:21]
      node _T_21 = eq(_T_19, UInt<1>("h01")) @[branch.scala 24:27]
      when _T_21 : @[branch.scala 24:41]
        node _T_22 = bits(io.nzcv, 1, 1) @[branch.scala 24:60]
        node _T_24 = eq(_T_22, UInt<1>("h01")) @[branch.scala 24:64]
        result <= _T_24 @[branch.scala 24:49]
        skip @[branch.scala 24:41]
      else : @[branch.scala 25:41]
        node _T_25 = bits(io.cond, 3, 1) @[branch.scala 25:21]
        node _T_27 = eq(_T_25, UInt<2>("h02")) @[branch.scala 25:27]
        when _T_27 : @[branch.scala 25:41]
          node _T_28 = bits(io.nzcv, 3, 3) @[branch.scala 25:60]
          node _T_30 = eq(_T_28, UInt<1>("h01")) @[branch.scala 25:64]
          result <= _T_30 @[branch.scala 25:49]
          skip @[branch.scala 25:41]
        else : @[branch.scala 26:41]
          node _T_31 = bits(io.cond, 3, 1) @[branch.scala 26:21]
          node _T_33 = eq(_T_31, UInt<2>("h03")) @[branch.scala 26:27]
          when _T_33 : @[branch.scala 26:41]
            node _T_34 = bits(io.nzcv, 0, 0) @[branch.scala 26:60]
            node _T_36 = eq(_T_34, UInt<1>("h01")) @[branch.scala 26:64]
            result <= _T_36 @[branch.scala 26:49]
            skip @[branch.scala 26:41]
          else : @[branch.scala 27:41]
            node _T_37 = bits(io.cond, 3, 1) @[branch.scala 27:21]
            node _T_39 = eq(_T_37, UInt<3>("h04")) @[branch.scala 27:27]
            when _T_39 : @[branch.scala 27:41]
              node _T_40 = bits(io.nzcv, 1, 1) @[branch.scala 27:60]
              node _T_42 = eq(_T_40, UInt<1>("h01")) @[branch.scala 27:64]
              result <= _T_42 @[branch.scala 27:49]
              skip @[branch.scala 27:41]
            else : @[branch.scala 28:41]
              node _T_43 = bits(io.cond, 3, 1) @[branch.scala 28:21]
              node _T_45 = eq(_T_43, UInt<3>("h05")) @[branch.scala 28:27]
              when _T_45 : @[branch.scala 28:41]
                node _T_46 = bits(io.nzcv, 3, 3) @[branch.scala 28:60]
                node _T_48 = eq(_T_46, UInt<1>("h01")) @[branch.scala 28:64]
                result <= _T_48 @[branch.scala 28:49]
                skip @[branch.scala 28:41]
              else : @[branch.scala 29:41]
                node _T_49 = bits(io.cond, 3, 1) @[branch.scala 29:21]
                node _T_51 = eq(_T_49, UInt<3>("h06")) @[branch.scala 29:27]
                when _T_51 : @[branch.scala 29:41]
                  node _T_52 = bits(io.nzcv, 3, 3) @[branch.scala 29:60]
                  node _T_54 = eq(_T_52, UInt<1>("h01")) @[branch.scala 29:64]
                  result <= _T_54 @[branch.scala 29:49]
                  skip @[branch.scala 29:41]
                else : @[branch.scala 30:41]
                  node _T_55 = bits(io.cond, 3, 1) @[branch.scala 30:21]
                  node _T_57 = eq(_T_55, UInt<3>("h07")) @[branch.scala 30:27]
                  when _T_57 : @[branch.scala 30:41]
                    result <= UInt<1>("h01") @[branch.scala 30:49]
                    skip @[branch.scala 30:41]
    node _T_59 = bits(io.cond, 0, 0) @[branch.scala 32:15]
    node _T_61 = eq(_T_59, UInt<1>("h01")) @[branch.scala 32:19]
    node _T_63 = neq(io.cond, UInt<4>("h0f")) @[branch.scala 32:38]
    node _T_64 = and(_T_61, _T_63) @[branch.scala 32:27]
    when _T_64 : @[branch.scala 32:53]
      node _T_66 = eq(result, UInt<1>("h00")) @[branch.scala 33:15]
      io.res <= _T_66 @[branch.scala 33:12]
      skip @[branch.scala 32:53]
    else : @[branch.scala 34:15]
      io.res <= result @[branch.scala 35:12]
      skip @[branch.scala 34:15]
    
  module BranchUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dinst : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}, flip nzcv : UInt<4>, binst : {valid : UInt<1>, bits : {offset : UInt<64>, tag : UInt<1>}}}
    
    io.binst.valid <= UInt<1>("h00") @[branch.scala 52:18]
    io.binst.bits.tag <= io.dinst.tag @[branch.scala 53:21]
    wire signExtended : SInt<64> @[branch.scala 56:26]
    node _T_19 = asSInt(io.dinst.imm) @[branch.scala 57:32]
    signExtended <= _T_19 @[branch.scala 57:16]
    node _T_20 = asUInt(signExtended) @[branch.scala 58:40]
    io.binst.bits.offset <= _T_20 @[branch.scala 58:24]
    inst cond of CondUnit @[branch.scala 61:20]
    cond.clock <= clock
    cond.reset <= reset
    cond.io.cond <= io.dinst.cond @[branch.scala 62:16]
    cond.io.nzcv <= io.nzcv @[branch.scala 63:16]
    node _T_21 = eq(io.dinst.itype, UInt<3>("h02")) @[branch.scala 64:24]
    node _T_22 = eq(io.dinst.itype, UInt<3>("h03")) @[branch.scala 64:54]
    node _T_23 = or(_T_21, _T_22) @[branch.scala 64:36]
    when _T_23 : @[branch.scala 64:67]
      node _T_24 = eq(io.dinst.op, UInt<3>("h01")) @[branch.scala 65:22]
      when _T_24 : @[branch.scala 65:36]
        io.binst.valid <= cond.io.res @[branch.scala 66:22]
        skip @[branch.scala 65:36]
      else : @[branch.scala 67:38]
        node _T_25 = eq(io.dinst.op, UInt<3>("h00")) @[branch.scala 67:28]
        when _T_25 : @[branch.scala 67:38]
          io.binst.valid <= UInt<1>("h01") @[branch.scala 68:22]
          skip @[branch.scala 67:38]
      skip @[branch.scala 64:67]
    
  module FReg_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {offset : UInt<64>, tag : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {offset : UInt<64>, tag : UInt<1>}}, flip flush : UInt<1>}
    
    reg _T_34 : {offset : UInt<64>, tag : UInt<1>}, clock @[FReg.scala 45:24]
    reg _T_37 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FReg.scala 46:30]
    node _T_39 = eq(_T_37, UInt<1>("h00")) @[FReg.scala 48:33]
    node _T_40 = or(_T_39, io.deq.ready) @[FReg.scala 48:40]
    node _T_41 = or(_T_40, io.flush) @[FReg.scala 48:56]
    wire _T_43 : UInt<1>
    _T_43 <= _T_41
    when _T_43 : @[FReg.scala 50:17]
      _T_34.tag <= io.enq.bits.tag @[FReg.scala 51:9]
      _T_34.offset <= io.enq.bits.offset @[FReg.scala 51:9]
      _T_37 <= io.enq.valid @[FReg.scala 52:11]
      skip @[FReg.scala 50:17]
    io.enq.ready <= _T_43 @[FReg.scala 54:16]
    io.deq.bits.tag <= _T_34.tag @[FReg.scala 56:15]
    io.deq.bits.offset <= _T_34.offset @[FReg.scala 56:15]
    node _T_45 = eq(io.flush, UInt<1>("h00")) @[FReg.scala 57:28]
    node _T_46 = and(_T_37, _T_45) @[FReg.scala 57:25]
    io.deq.valid <= _T_46 @[FReg.scala 57:16]
    
  module SRAM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr_r : UInt<8>, flip addr_w : UInt<8>, flip wen : UInt<1>, flip data_in : UInt<28>, data_out : UInt<28>}
    
    smem mem : UInt<28>[256] @[TLB.scala 123:24]
    when io.wen : @[TLB.scala 124:17]
      write mport _T_17 = mem[io.addr_w], clock
      _T_17 <= io.data_in
      skip @[TLB.scala 124:17]
    wire _T_20 : UInt @[TLB.scala 127:26]
    _T_20 is invalid @[TLB.scala 127:26]
    when UInt<1>("h01") : @[TLB.scala 127:26]
      _T_20 <= io.addr_r @[TLB.scala 127:26]
      node _T_22 = or(_T_20, UInt<8>("h00")) @[TLB.scala 127:26]
      node _T_23 = bits(_T_22, 7, 0) @[TLB.scala 127:26]
      read mport _T_24 = mem[_T_23], clock @[TLB.scala 127:26]
      skip @[TLB.scala 127:26]
    io.data_out <= _T_24 @[TLB.scala 127:15]
    
  module SRAM_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr_r : UInt<8>, flip addr_w : UInt<8>, flip wen : UInt<1>, flip data_in : UInt<20>, data_out : UInt<20>}
    
    smem mem : UInt<20>[256] @[TLB.scala 123:24]
    when io.wen : @[TLB.scala 124:17]
      write mport _T_17 = mem[io.addr_w], clock
      _T_17 <= io.data_in
      skip @[TLB.scala 124:17]
    wire _T_20 : UInt @[TLB.scala 127:26]
    _T_20 is invalid @[TLB.scala 127:26]
    when UInt<1>("h01") : @[TLB.scala 127:26]
      _T_20 <= io.addr_r @[TLB.scala 127:26]
      node _T_22 = or(_T_20, UInt<8>("h00")) @[TLB.scala 127:26]
      node _T_23 = bits(_T_22, 7, 0) @[TLB.scala 127:26]
      read mport _T_24 = mem[_T_23], clock @[TLB.scala 127:26]
      skip @[TLB.scala 127:26]
    io.data_out <= _T_24 @[TLB.scala 127:15]
    
  module TLBUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip vaddr : {valid : UInt<1>, bits : {tag : UInt<28>, set : UInt<8>, offset : UInt<12>}}, flip rw : UInt<1>, hit : {valid : UInt<1>, bits : UInt<1>}, paddr : {valid : UInt<1>, bits : {pn : UInt<20>, offset : UInt<12>}}, flip write_tlb_valid : UInt<1>, flip write_tlb_entry : UInt<8>}
    
    reg set_reg : UInt<8>, clock @[TLB.scala 41:20]
    reg tag_reg : UInt<28>, clock @[TLB.scala 42:20]
    reg rw_reg : UInt<1>, clock @[TLB.scala 43:19]
    when io.vaddr.valid : @[TLB.scala 45:24]
      set_reg <= io.vaddr.bits.set @[TLB.scala 46:13]
      tag_reg <= io.vaddr.bits.tag @[TLB.scala 47:13]
      rw_reg <= io.rw @[TLB.scala 48:12]
      skip @[TLB.scala 45:24]
    inst tag_mem of SRAM @[TLB.scala 52:23]
    tag_mem.clock <= clock
    tag_mem.reset <= reset
    tag_mem.io.addr_r <= io.vaddr.bits.set @[TLB.scala 53:21]
    tag_mem.io.addr_w <= io.vaddr.bits.set @[TLB.scala 54:21]
    tag_mem.io.data_in <= io.vaddr.bits.tag @[TLB.scala 55:22]
    tag_mem.io.wen <= io.write_tlb_valid @[TLB.scala 56:18]
    inst data_mem of SRAM_1 @[TLB.scala 60:24]
    data_mem.clock <= clock
    data_mem.reset <= reset
    data_mem.io.addr_r <= io.vaddr.bits.set @[TLB.scala 61:22]
    data_mem.io.addr_w <= io.vaddr.bits.set @[TLB.scala 62:22]
    data_mem.io.data_in <= io.write_tlb_entry @[TLB.scala 63:23]
    data_mem.io.wen <= io.write_tlb_valid @[TLB.scala 64:19]
    reg valid : UInt<256>, clock with : (reset => (reset, UInt<256>("h00"))) @[TLB.scala 67:22]
    reg dirty : UInt<256>, clock with : (reset => (reset, UInt<256>("h00"))) @[TLB.scala 68:22]
    when io.write_tlb_valid : @[TLB.scala 71:28]
      node _T_42 = bits(reset, 0, 0) @[TLB.scala 72:11]
      node _T_44 = eq(_T_42, UInt<1>("h00")) @[TLB.scala 72:11]
      when _T_44 : @[TLB.scala 72:11]
        printf(clock, UInt<1>(1), "write tlb tag %x set %x \n", io.vaddr.bits.tag, io.vaddr.bits.set) @[TLB.scala 72:11]
        skip @[TLB.scala 72:11]
      node _T_47 = dshl(UInt<1>("h01"), io.vaddr.bits.set) @[TLB.scala 73:25]
      node _T_48 = or(valid, _T_47) @[TLB.scala 73:25]
      node _T_49 = not(valid) @[TLB.scala 73:25]
      node _T_50 = or(_T_49, _T_47) @[TLB.scala 73:25]
      node _T_51 = not(_T_50) @[TLB.scala 73:25]
      node _T_52 = mux(UInt<1>("h01"), _T_48, _T_51) @[TLB.scala 73:25]
      valid <= _T_52 @[TLB.scala 73:10]
      skip @[TLB.scala 71:28]
    io.paddr.valid <= UInt<1>("h00") @[TLB.scala 77:18]
    io.paddr.bits.pn <= data_mem.io.data_out @[TLB.scala 78:20]
    io.paddr.bits.offset <= io.vaddr.bits.offset @[TLB.scala 79:24]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TLB.scala 83:22]
    node _T_55 = eq(tag_mem.io.data_out, tag_reg) @[TLB.scala 87:19]
    node _T_56 = dshr(valid, set_reg) @[TLB.scala 87:40]
    node _T_57 = bits(_T_56, 0, 0) @[TLB.scala 87:40]
    node _T_58 = and(_T_55, _T_57) @[TLB.scala 87:32]
    io.hit.bits <= _T_58 @[TLB.scala 87:7]
    io.hit.valid <= UInt<1>("h00") @[TLB.scala 88:16]
    node _T_60 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_60 : @[Conditional.scala 40:58]
      node _T_62 = eq(io.write_tlb_valid, UInt<1>("h00")) @[TLB.scala 92:29]
      node _T_63 = and(io.vaddr.valid, _T_62) @[TLB.scala 92:27]
      when _T_63 : @[TLB.scala 92:49]
        state <= UInt<1>("h01") @[TLB.scala 93:15]
        skip @[TLB.scala 92:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_64 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_64 : @[Conditional.scala 39:67]
        io.hit.valid <= UInt<1>("h01") @[TLB.scala 97:20]
        when io.hit.bits : @[TLB.scala 98:16]
          node _T_66 = bits(reset, 0, 0) @[TLB.scala 99:15]
          node _T_68 = eq(_T_66, UInt<1>("h00")) @[TLB.scala 99:15]
          when _T_68 : @[TLB.scala 99:15]
            printf(clock, UInt<1>(1), "** TLB hit \n") @[TLB.scala 99:15]
            skip @[TLB.scala 99:15]
          state <= UInt<1>("h00") @[TLB.scala 100:15]
          io.paddr.valid <= UInt<1>("h01") @[TLB.scala 101:24]
          node _T_70 = bits(rw_reg, 0, 0) @[TLB.scala 103:28]
          node _T_72 = eq(_T_70, UInt<1>("h00")) @[TLB.scala 103:14]
          when _T_72 : @[TLB.scala 103:31]
            node _T_75 = dshl(UInt<1>("h01"), set_reg) @[TLB.scala 104:32]
            node _T_76 = or(dirty, _T_75) @[TLB.scala 104:32]
            node _T_77 = not(dirty) @[TLB.scala 104:32]
            node _T_78 = or(_T_77, _T_75) @[TLB.scala 104:32]
            node _T_79 = not(_T_78) @[TLB.scala 104:32]
            node _T_80 = mux(UInt<1>("h01"), _T_76, _T_79) @[TLB.scala 104:32]
            dirty <= _T_80 @[TLB.scala 104:17]
            skip @[TLB.scala 103:31]
          skip @[TLB.scala 98:16]
        else : @[TLB.scala 106:18]
          node _T_81 = bits(reset, 0, 0) @[TLB.scala 107:15]
          node _T_83 = eq(_T_81, UInt<1>("h00")) @[TLB.scala 107:15]
          when _T_83 : @[TLB.scala 107:15]
            printf(clock, UInt<1>(1), "** TLB miss \n") @[TLB.scala 107:15]
            skip @[TLB.scala 107:15]
          state <= UInt<1>("h00") @[TLB.scala 108:15]
          skip @[TLB.scala 106:18]
        skip @[Conditional.scala 39:67]
    
  module LoadStoreUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dinst : {valid : UInt<1>, bits : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}}, flip rVal1 : UInt<64>, flip rVal2 : UInt<64>, flip pc : UInt<64>, minst : {valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>}}, memReq : {valid : UInt<1>, bits : {addr : UInt<32>, rw : UInt<1>, data : UInt<64>}}, flip memRes : {valid : UInt<1>, bits : {data : UInt<64>}}, flip write_tlb_entry : UInt<8>, flip write_tlb_vaddr : {valid : UInt<1>, bits : {tag : UInt<28>, set : UInt<8>, offset : UInt<12>}}}
    
    reg dinst_reg : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<26>, shift_val : UInt<6>, shift_type : UInt<2>, cond : UInt<4>, itype : UInt<3>, op : UInt<3>, rd_en : UInt<1>, rs1_en : UInt<1>, rs2_en : UInt<1>, imm_en : UInt<1>, shift_en : UInt<1>, cond_en : UInt<1>, nzcv_en : UInt<1>, inst_en : UInt<1>, tag : UInt<1>, inst : UInt<32>, pc : UInt<64>}, clock @[lsu.scala 57:22]
    node base = cvt(io.pc) @[lsu.scala 60:24]
    wire imm_sign_extened : SInt<64> @[lsu.scala 63:30]
    node _T_55 = asSInt(io.dinst.bits.imm) @[lsu.scala 64:41]
    imm_sign_extened <= _T_55 @[lsu.scala 64:20]
    wire vaddr : UInt<48> @[lsu.scala 69:19]
    node _T_57 = add(base, imm_sign_extened) @[lsu.scala 70:18]
    node _T_58 = tail(_T_57, 1) @[lsu.scala 70:18]
    node _T_59 = asSInt(_T_58) @[lsu.scala 70:18]
    node _T_60 = asUInt(_T_59) @[lsu.scala 70:34]
    vaddr <= _T_60 @[lsu.scala 70:9]
    wire vaddr_IO : {tag : UInt<28>, set : UInt<8>, offset : UInt<12>} @[lsu.scala 71:22]
    node _T_62 = bits(vaddr, 11, 0) @[lsu.scala 73:27]
    vaddr_IO.offset <= _T_62 @[lsu.scala 73:19]
    node _T_63 = bits(vaddr, 19, 12) @[lsu.scala 74:24]
    vaddr_IO.set <= _T_63 @[lsu.scala 74:16]
    node _T_64 = bits(vaddr, 47, 20) @[lsu.scala 75:24]
    vaddr_IO.tag <= _T_64 @[lsu.scala 75:16]
    wire data : UInt<64>
    data <= UInt<64>("h00")
    inst tlb of TLBUnit @[lsu.scala 82:19]
    tlb.clock <= clock
    tlb.reset <= reset
    tlb.io.write_tlb_valid <= io.write_tlb_vaddr.valid @[lsu.scala 84:26]
    tlb.io.write_tlb_entry <= io.write_tlb_entry @[lsu.scala 85:26]
    node _T_66 = mux(io.write_tlb_vaddr.valid, io.write_tlb_vaddr.bits, vaddr_IO) @[lsu.scala 86:27]
    tlb.io.vaddr.bits.offset <= _T_66.offset @[lsu.scala 86:21]
    tlb.io.vaddr.bits.set <= _T_66.set @[lsu.scala 86:21]
    tlb.io.vaddr.bits.tag <= _T_66.tag @[lsu.scala 86:21]
    tlb.io.vaddr.valid <= UInt<1>("h00") @[lsu.scala 88:22]
    tlb.io.rw <= UInt<1>("h01") @[lsu.scala 89:13]
    io.memReq.valid <= UInt<1>("h00") @[lsu.scala 92:19]
    node _T_69 = cat(tlb.io.paddr.bits.pn, tlb.io.paddr.bits.offset) @[lsu.scala 93:50]
    io.memReq.bits.addr <= _T_69 @[lsu.scala 93:23]
    io.memReq.bits.data <= data @[lsu.scala 94:23]
    io.memReq.bits.rw <= UInt<1>("h01") @[lsu.scala 95:21]
    wire res : UInt<64>
    res <= UInt<64>("h00")
    when io.memRes.valid : @[lsu.scala 98:25]
      res <= io.memRes.bits.data @[lsu.scala 99:9]
      skip @[lsu.scala 98:25]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[lsu.scala 104:22]
    node _T_72 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_72 : @[Conditional.scala 40:58]
      node _T_73 = eq(io.dinst.bits.itype, UInt<3>("h05")) @[lsu.scala 107:32]
      when _T_73 : @[lsu.scala 107:45]
        dinst_reg.pc <= io.dinst.bits.pc @[lsu.scala 108:19]
        dinst_reg.inst <= io.dinst.bits.inst @[lsu.scala 108:19]
        dinst_reg.tag <= io.dinst.bits.tag @[lsu.scala 108:19]
        dinst_reg.inst_en <= io.dinst.bits.inst_en @[lsu.scala 108:19]
        dinst_reg.nzcv_en <= io.dinst.bits.nzcv_en @[lsu.scala 108:19]
        dinst_reg.cond_en <= io.dinst.bits.cond_en @[lsu.scala 108:19]
        dinst_reg.shift_en <= io.dinst.bits.shift_en @[lsu.scala 108:19]
        dinst_reg.imm_en <= io.dinst.bits.imm_en @[lsu.scala 108:19]
        dinst_reg.rs2_en <= io.dinst.bits.rs2_en @[lsu.scala 108:19]
        dinst_reg.rs1_en <= io.dinst.bits.rs1_en @[lsu.scala 108:19]
        dinst_reg.rd_en <= io.dinst.bits.rd_en @[lsu.scala 108:19]
        dinst_reg.op <= io.dinst.bits.op @[lsu.scala 108:19]
        dinst_reg.itype <= io.dinst.bits.itype @[lsu.scala 108:19]
        dinst_reg.cond <= io.dinst.bits.cond @[lsu.scala 108:19]
        dinst_reg.shift_type <= io.dinst.bits.shift_type @[lsu.scala 108:19]
        dinst_reg.shift_val <= io.dinst.bits.shift_val @[lsu.scala 108:19]
        dinst_reg.imm <= io.dinst.bits.imm @[lsu.scala 108:19]
        dinst_reg.rs2 <= io.dinst.bits.rs2 @[lsu.scala 108:19]
        dinst_reg.rs1 <= io.dinst.bits.rs1 @[lsu.scala 108:19]
        dinst_reg.rd <= io.dinst.bits.rd @[lsu.scala 108:19]
        tlb.io.vaddr.valid <= io.dinst.valid @[lsu.scala 109:28]
        state <= UInt<2>("h01") @[lsu.scala 110:15]
        skip @[lsu.scala 107:45]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_74 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_74 : @[Conditional.scala 39:67]
        when tlb.io.hit.valid : @[lsu.scala 114:30]
          node _T_75 = bits(tlb.io.hit.bits, 0, 0) @[lsu.scala 115:36]
          when _T_75 : @[lsu.scala 115:39]
            io.memReq.valid <= UInt<1>("h01") @[lsu.scala 116:27]
            state <= UInt<2>("h02") @[lsu.scala 117:17]
            skip @[lsu.scala 115:39]
          else : @[lsu.scala 118:20]
            state <= UInt<2>("h00") @[lsu.scala 120:17]
            skip @[lsu.scala 118:20]
          skip @[lsu.scala 114:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_77 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_77 : @[Conditional.scala 39:67]
          node _T_78 = bits(io.memRes.valid, 0, 0) @[lsu.scala 125:34]
          when _T_78 : @[lsu.scala 125:37]
            state <= UInt<2>("h00") @[lsu.scala 126:15]
            skip @[lsu.scala 125:37]
          skip @[Conditional.scala 39:67]
    wire minst : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>} @[lsu.scala 132:19]
    minst.res <= io.memRes.bits.data @[lsu.scala 133:13]
    minst.rd <= dinst_reg.rd @[lsu.scala 134:12]
    minst.rd_en <= dinst_reg.rd_en @[lsu.scala 135:15]
    minst.tag <= dinst_reg.tag @[lsu.scala 136:13]
    io.minst.bits.tag <= minst.tag @[lsu.scala 138:17]
    io.minst.bits.rd_en <= minst.rd_en @[lsu.scala 138:17]
    io.minst.bits.rd <= minst.rd @[lsu.scala 138:17]
    io.minst.bits.res <= minst.res @[lsu.scala 138:17]
    node _T_80 = eq(state, UInt<2>("h02")) @[lsu.scala 139:27]
    node _T_81 = bits(io.memRes.valid, 0, 0) @[lsu.scala 139:60]
    node _T_82 = and(_T_80, _T_81) @[lsu.scala 139:41]
    io.minst.valid <= _T_82 @[lsu.scala 139:18]
    
  module FReg_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>}}, flip flush : UInt<1>}
    
    reg _T_34 : {res : UInt<64>, rd : UInt<5>, rd_en : UInt<1>, tag : UInt<1>}, clock @[FReg.scala 45:24]
    reg _T_37 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FReg.scala 46:30]
    node _T_39 = eq(_T_37, UInt<1>("h00")) @[FReg.scala 48:33]
    node _T_40 = or(_T_39, io.deq.ready) @[FReg.scala 48:40]
    node _T_41 = or(_T_40, io.flush) @[FReg.scala 48:56]
    wire _T_43 : UInt<1>
    _T_43 <= _T_41
    when _T_43 : @[FReg.scala 50:17]
      _T_34.tag <= io.enq.bits.tag @[FReg.scala 51:9]
      _T_34.rd_en <= io.enq.bits.rd_en @[FReg.scala 51:9]
      _T_34.rd <= io.enq.bits.rd @[FReg.scala 51:9]
      _T_34.res <= io.enq.bits.res @[FReg.scala 51:9]
      _T_37 <= io.enq.valid @[FReg.scala 52:11]
      skip @[FReg.scala 50:17]
    io.enq.ready <= _T_43 @[FReg.scala 54:16]
    io.deq.bits.tag <= _T_34.tag @[FReg.scala 56:15]
    io.deq.bits.rd_en <= _T_34.rd_en @[FReg.scala 56:15]
    io.deq.bits.rd <= _T_34.rd @[FReg.scala 56:15]
    io.deq.bits.res <= _T_34.res @[FReg.scala 56:15]
    node _T_45 = eq(io.flush, UInt<1>("h00")) @[FReg.scala 57:28]
    node _T_46 = and(_T_37, _T_45) @[FReg.scala 57:25]
    io.deq.valid <= _T_46 @[FReg.scala 57:16]
    
  module Proc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ppageBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, stateBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, host2tpu : {flip fire : UInt<1>, flip fireTag : UInt<1>, done : UInt<1>, doneTag : UInt<1>}}
    
    inst ppage of BRAM @[proc.scala 66:21]
    ppage.clock <= clock
    ppage.reset <= reset
    inst state of BRAM_1 @[proc.scala 68:21]
    state.clock <= clock
    state.reset <= reset
    inst tpu of TransplantUnit @[proc.scala 70:19]
    tpu.clock <= clock
    tpu.reset <= reset
    wire emptyPStateRegs : {PC : UInt<64>, SP : UInt<32>, EL : UInt<32>, NZCV : UInt<4>} @[proc.scala 74:29]
    emptyPStateRegs.PC <= UInt<64>("h00") @[pstate.scala 47:8]
    emptyPStateRegs.SP <= UInt<64>("h00") @[pstate.scala 48:8]
    emptyPStateRegs.EL <= UInt<64>("h00") @[pstate.scala 49:8]
    emptyPStateRegs.NZCV <= UInt<4>("h00") @[pstate.scala 50:10]
    inst RFile of RFile @[proc.scala 75:58]
    RFile.clock <= clock
    RFile.reset <= reset
    inst RFile_1 of RFile_1 @[proc.scala 75:58]
    RFile_1.clock <= clock
    RFile_1.reset <= reset
    wire vec_rfile : {flip rs1_addr : UInt<5>, rs1_data : UInt<64>, flip rs2_addr : UInt<5>, rs2_data : UInt<64>, flip waddr : UInt<5>, flip wdata : UInt<64>, flip wen : UInt<1>}[2] @[proc.scala 75:26]
    RFile.io.wen <= vec_rfile[0].wen @[proc.scala 75:26]
    RFile.io.wdata <= vec_rfile[0].wdata @[proc.scala 75:26]
    RFile.io.waddr <= vec_rfile[0].waddr @[proc.scala 75:26]
    vec_rfile[0].rs2_data <= RFile.io.rs2_data @[proc.scala 75:26]
    RFile.io.rs2_addr <= vec_rfile[0].rs2_addr @[proc.scala 75:26]
    vec_rfile[0].rs1_data <= RFile.io.rs1_data @[proc.scala 75:26]
    RFile.io.rs1_addr <= vec_rfile[0].rs1_addr @[proc.scala 75:26]
    RFile_1.io.wen <= vec_rfile[1].wen @[proc.scala 75:26]
    RFile_1.io.wdata <= vec_rfile[1].wdata @[proc.scala 75:26]
    RFile_1.io.waddr <= vec_rfile[1].waddr @[proc.scala 75:26]
    vec_rfile[1].rs2_data <= RFile_1.io.rs2_data @[proc.scala 75:26]
    RFile_1.io.rs2_addr <= vec_rfile[1].rs2_addr @[proc.scala 75:26]
    vec_rfile[1].rs1_data <= RFile_1.io.rs1_data @[proc.scala 75:26]
    RFile_1.io.rs1_addr <= vec_rfile[1].rs1_addr @[proc.scala 75:26]
    wire _T_114 : {PC : UInt<64>, SP : UInt<32>, EL : UInt<32>, NZCV : UInt<4>}[2] @[proc.scala 76:34]
    _T_114[0].NZCV <= emptyPStateRegs.NZCV @[proc.scala 76:34]
    _T_114[0].EL <= emptyPStateRegs.EL @[proc.scala 76:34]
    _T_114[0].SP <= emptyPStateRegs.SP @[proc.scala 76:34]
    _T_114[0].PC <= emptyPStateRegs.PC @[proc.scala 76:34]
    _T_114[1].NZCV <= emptyPStateRegs.NZCV @[proc.scala 76:34]
    _T_114[1].EL <= emptyPStateRegs.EL @[proc.scala 76:34]
    _T_114[1].SP <= emptyPStateRegs.SP @[proc.scala 76:34]
    _T_114[1].PC <= emptyPStateRegs.PC @[proc.scala 76:34]
    reg vec_pregs : {PC : UInt<64>, SP : UInt<32>, EL : UInt<32>, NZCV : UInt<4>}[2], clock with : (reset => (reset, _T_114)) @[proc.scala 76:26]
    reg specPCReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[proc.scala 79:26]
    inst fetch of FetchUnit @[proc.scala 81:21]
    fetch.clock <= clock
    fetch.reset <= reset
    inst decoder of DecodeUnit @[proc.scala 84:23]
    decoder.clock <= clock
    decoder.reset <= reset
    inst decReg of FReg @[proc.scala 85:22]
    decReg.clock <= clock
    decReg.reset <= reset
    inst issuer of IssueUnit @[proc.scala 87:22]
    issuer.clock <= clock
    issuer.reset <= reset
    inst executer of ExecuteUnit @[proc.scala 90:24]
    executer.clock <= clock
    executer.reset <= reset
    inst exeReg of FReg_1 @[proc.scala 91:22]
    exeReg.clock <= clock
    exeReg.reset <= reset
    inst brancher of BranchUnit @[proc.scala 93:24]
    brancher.clock <= clock
    brancher.reset <= reset
    inst brReg of FReg_2 @[proc.scala 94:21]
    brReg.clock <= clock
    brReg.reset <= reset
    inst ldstU of LoadStoreUnit @[proc.scala 96:21]
    ldstU.clock <= clock
    ldstU.reset <= reset
    inst ldstUReg of FReg_3 @[proc.scala 97:24]
    ldstUReg.clock <= clock
    ldstUReg.reset <= reset
    reg fake_PC : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[proc.scala 100:24]
    wire _T_150 : UInt<1>[2] @[proc.scala 101:33]
    _T_150[0] <= UInt<1>("h00") @[proc.scala 101:33]
    _T_150[1] <= UInt<1>("h00") @[proc.scala 101:33]
    reg fetch_en : UInt<1>[2], clock with : (reset => (reset, _T_150)) @[proc.scala 101:25]
    io.ppageBRAM.dataOut <= ppage.io.portA.dataOut @[proc.scala 106:16]
    ppage.io.portA.dataIn <= io.ppageBRAM.dataIn @[proc.scala 106:16]
    ppage.io.portA.addr <= io.ppageBRAM.addr @[proc.scala 106:16]
    ppage.io.portA.en <= io.ppageBRAM.en @[proc.scala 106:16]
    ppage.io.portA.writeEn <= io.ppageBRAM.writeEn @[proc.scala 106:16]
    io.stateBRAM.dataOut <= state.io.portA.dataOut @[proc.scala 107:16]
    state.io.portA.dataIn <= io.stateBRAM.dataIn @[proc.scala 107:16]
    state.io.portA.addr <= io.stateBRAM.addr @[proc.scala 107:16]
    state.io.portA.en <= io.stateBRAM.en @[proc.scala 107:16]
    state.io.portA.writeEn <= io.stateBRAM.writeEn @[proc.scala 107:16]
    io.host2tpu.doneTag <= tpu.io.host2tpu.doneTag @[proc.scala 109:15]
    io.host2tpu.done <= tpu.io.host2tpu.done @[proc.scala 109:15]
    tpu.io.host2tpu.fireTag <= io.host2tpu.fireTag @[proc.scala 109:15]
    tpu.io.host2tpu.fire <= io.host2tpu.fire @[proc.scala 109:15]
    tpu.io.stateBRAM.dataOut <= state.io.portB.dataOut @[proc.scala 112:20]
    state.io.portB.dataIn <= tpu.io.stateBRAM.dataIn @[proc.scala 112:20]
    state.io.portB.addr <= tpu.io.stateBRAM.addr @[proc.scala 112:20]
    state.io.portB.en <= tpu.io.stateBRAM.en @[proc.scala 112:20]
    state.io.portB.writeEn <= tpu.io.stateBRAM.writeEn @[proc.scala 112:20]
    tpu.io.tpu2cpu.done <= UInt<1>("h00") @[proc.scala 113:23]
    tpu.io.tpu2cpu.doneTag <= UInt<1>("h00") @[proc.scala 114:26]
    fetch.io.ppageBRAM.dataOut <= ppage.io.portB.dataOut @[proc.scala 117:22]
    ppage.io.portB.dataIn <= fetch.io.ppageBRAM.dataIn @[proc.scala 117:22]
    ppage.io.portB.addr <= fetch.io.ppageBRAM.addr @[proc.scala 117:22]
    ppage.io.portB.en <= fetch.io.ppageBRAM.en @[proc.scala 117:22]
    ppage.io.portB.writeEn <= fetch.io.ppageBRAM.writeEn @[proc.scala 117:22]
    wire fetch_tag : UInt
    fetch_tag <= UInt<1>("h00")
    when fetch_en[0] : @[proc.scala 121:23]
      fetch_tag <= UInt<1>("h00") @[proc.scala 122:17]
      skip @[proc.scala 121:23]
    when fetch_en[1] : @[proc.scala 121:23]
      fetch_tag <= UInt<1>("h01") @[proc.scala 122:17]
      skip @[proc.scala 121:23]
    fetch.io.tagIn <= fetch_tag @[proc.scala 125:18]
    node _T_183 = or(fetch_tag, UInt<1>("h00"))
    node _T_184 = bits(_T_183, 0, 0)
    fetch.io.en <= fetch_en[_T_184] @[proc.scala 126:15]
    fetch.io.PC <= fake_PC @[proc.scala 127:15]
    when fetch.io.incr : @[proc.scala 128:23]
      node _T_186 = add(fake_PC, UInt<3>("h04")) @[proc.scala 129:24]
      node _T_187 = tail(_T_186, 1) @[proc.scala 129:24]
      fake_PC <= _T_187 @[proc.scala 129:13]
      skip @[proc.scala 128:23]
    decoder.io.finst.pc <= fetch.io.deq.bits.pc @[proc.scala 133:20]
    decoder.io.finst.tag <= fetch.io.deq.bits.tag @[proc.scala 133:20]
    decoder.io.finst.inst <= fetch.io.deq.bits.inst @[proc.scala 133:20]
    decReg.io.enq.bits.pc <= decoder.io.dinst.pc @[proc.scala 134:22]
    decReg.io.enq.bits.inst <= decoder.io.dinst.inst @[proc.scala 134:22]
    decReg.io.enq.bits.tag <= decoder.io.dinst.tag @[proc.scala 134:22]
    decReg.io.enq.bits.inst_en <= decoder.io.dinst.inst_en @[proc.scala 134:22]
    decReg.io.enq.bits.nzcv_en <= decoder.io.dinst.nzcv_en @[proc.scala 134:22]
    decReg.io.enq.bits.cond_en <= decoder.io.dinst.cond_en @[proc.scala 134:22]
    decReg.io.enq.bits.shift_en <= decoder.io.dinst.shift_en @[proc.scala 134:22]
    decReg.io.enq.bits.imm_en <= decoder.io.dinst.imm_en @[proc.scala 134:22]
    decReg.io.enq.bits.rs2_en <= decoder.io.dinst.rs2_en @[proc.scala 134:22]
    decReg.io.enq.bits.rs1_en <= decoder.io.dinst.rs1_en @[proc.scala 134:22]
    decReg.io.enq.bits.rd_en <= decoder.io.dinst.rd_en @[proc.scala 134:22]
    decReg.io.enq.bits.op <= decoder.io.dinst.op @[proc.scala 134:22]
    decReg.io.enq.bits.itype <= decoder.io.dinst.itype @[proc.scala 134:22]
    decReg.io.enq.bits.cond <= decoder.io.dinst.cond @[proc.scala 134:22]
    decReg.io.enq.bits.shift_type <= decoder.io.dinst.shift_type @[proc.scala 134:22]
    decReg.io.enq.bits.shift_val <= decoder.io.dinst.shift_val @[proc.scala 134:22]
    decReg.io.enq.bits.imm <= decoder.io.dinst.imm @[proc.scala 134:22]
    decReg.io.enq.bits.rs2 <= decoder.io.dinst.rs2 @[proc.scala 134:22]
    decReg.io.enq.bits.rs1 <= decoder.io.dinst.rs1 @[proc.scala 134:22]
    decReg.io.enq.bits.rd <= decoder.io.dinst.rd @[proc.scala 134:22]
    fetch.io.deq.ready <= decReg.io.enq.ready @[proc.scala 136:22]
    decReg.io.enq.valid <= fetch.io.deq.valid @[proc.scala 137:23]
    issuer.io.enq.bits.pc <= decReg.io.deq.bits.pc @[proc.scala 140:17]
    issuer.io.enq.bits.inst <= decReg.io.deq.bits.inst @[proc.scala 140:17]
    issuer.io.enq.bits.tag <= decReg.io.deq.bits.tag @[proc.scala 140:17]
    issuer.io.enq.bits.inst_en <= decReg.io.deq.bits.inst_en @[proc.scala 140:17]
    issuer.io.enq.bits.nzcv_en <= decReg.io.deq.bits.nzcv_en @[proc.scala 140:17]
    issuer.io.enq.bits.cond_en <= decReg.io.deq.bits.cond_en @[proc.scala 140:17]
    issuer.io.enq.bits.shift_en <= decReg.io.deq.bits.shift_en @[proc.scala 140:17]
    issuer.io.enq.bits.imm_en <= decReg.io.deq.bits.imm_en @[proc.scala 140:17]
    issuer.io.enq.bits.rs2_en <= decReg.io.deq.bits.rs2_en @[proc.scala 140:17]
    issuer.io.enq.bits.rs1_en <= decReg.io.deq.bits.rs1_en @[proc.scala 140:17]
    issuer.io.enq.bits.rd_en <= decReg.io.deq.bits.rd_en @[proc.scala 140:17]
    issuer.io.enq.bits.op <= decReg.io.deq.bits.op @[proc.scala 140:17]
    issuer.io.enq.bits.itype <= decReg.io.deq.bits.itype @[proc.scala 140:17]
    issuer.io.enq.bits.cond <= decReg.io.deq.bits.cond @[proc.scala 140:17]
    issuer.io.enq.bits.shift_type <= decReg.io.deq.bits.shift_type @[proc.scala 140:17]
    issuer.io.enq.bits.shift_val <= decReg.io.deq.bits.shift_val @[proc.scala 140:17]
    issuer.io.enq.bits.imm <= decReg.io.deq.bits.imm @[proc.scala 140:17]
    issuer.io.enq.bits.rs2 <= decReg.io.deq.bits.rs2 @[proc.scala 140:17]
    issuer.io.enq.bits.rs1 <= decReg.io.deq.bits.rs1 @[proc.scala 140:17]
    issuer.io.enq.bits.rd <= decReg.io.deq.bits.rd @[proc.scala 140:17]
    issuer.io.enq.valid <= decReg.io.deq.valid @[proc.scala 140:17]
    decReg.io.deq.ready <= issuer.io.enq.ready @[proc.scala 140:17]
    node _T_188 = or(exeReg.io.enq.ready, brReg.io.enq.ready) @[proc.scala 145:46]
    issuer.io.deq.ready <= _T_188 @[proc.scala 145:23]
    issuer.io.exeReg.bits.nzcv_en <= exeReg.io.deq.bits.nzcv_en @[proc.scala 147:26]
    issuer.io.exeReg.bits.nzcv <= exeReg.io.deq.bits.nzcv @[proc.scala 147:26]
    issuer.io.exeReg.bits.tag <= exeReg.io.deq.bits.tag @[proc.scala 147:26]
    issuer.io.exeReg.bits.rd_en <= exeReg.io.deq.bits.rd_en @[proc.scala 147:26]
    issuer.io.exeReg.bits.rd <= exeReg.io.deq.bits.rd @[proc.scala 147:26]
    issuer.io.exeReg.bits.res <= exeReg.io.deq.bits.res @[proc.scala 147:26]
    issuer.io.exeReg.valid <= exeReg.io.deq.valid @[proc.scala 148:26]
    vec_rfile[0].rs1_addr <= issuer.io.deq.bits.rs1 @[proc.scala 153:20]
    vec_rfile[0].rs2_addr <= issuer.io.deq.bits.rs2 @[proc.scala 154:20]
    vec_rfile[1].rs1_addr <= issuer.io.deq.bits.rs1 @[proc.scala 153:20]
    vec_rfile[1].rs2_addr <= issuer.io.deq.bits.rs2 @[proc.scala 154:20]
    executer.io.dinst.pc <= issuer.io.deq.bits.pc @[proc.scala 161:21]
    executer.io.dinst.inst <= issuer.io.deq.bits.inst @[proc.scala 161:21]
    executer.io.dinst.tag <= issuer.io.deq.bits.tag @[proc.scala 161:21]
    executer.io.dinst.inst_en <= issuer.io.deq.bits.inst_en @[proc.scala 161:21]
    executer.io.dinst.nzcv_en <= issuer.io.deq.bits.nzcv_en @[proc.scala 161:21]
    executer.io.dinst.cond_en <= issuer.io.deq.bits.cond_en @[proc.scala 161:21]
    executer.io.dinst.shift_en <= issuer.io.deq.bits.shift_en @[proc.scala 161:21]
    executer.io.dinst.imm_en <= issuer.io.deq.bits.imm_en @[proc.scala 161:21]
    executer.io.dinst.rs2_en <= issuer.io.deq.bits.rs2_en @[proc.scala 161:21]
    executer.io.dinst.rs1_en <= issuer.io.deq.bits.rs1_en @[proc.scala 161:21]
    executer.io.dinst.rd_en <= issuer.io.deq.bits.rd_en @[proc.scala 161:21]
    executer.io.dinst.op <= issuer.io.deq.bits.op @[proc.scala 161:21]
    executer.io.dinst.itype <= issuer.io.deq.bits.itype @[proc.scala 161:21]
    executer.io.dinst.cond <= issuer.io.deq.bits.cond @[proc.scala 161:21]
    executer.io.dinst.shift_type <= issuer.io.deq.bits.shift_type @[proc.scala 161:21]
    executer.io.dinst.shift_val <= issuer.io.deq.bits.shift_val @[proc.scala 161:21]
    executer.io.dinst.imm <= issuer.io.deq.bits.imm @[proc.scala 161:21]
    executer.io.dinst.rs2 <= issuer.io.deq.bits.rs2 @[proc.scala 161:21]
    executer.io.dinst.rs1 <= issuer.io.deq.bits.rs1 @[proc.scala 161:21]
    executer.io.dinst.rd <= issuer.io.deq.bits.rd @[proc.scala 161:21]
    executer.io.rVal1 <= vec_rfile[issuer.io.deq.bits.tag].rs1_data @[proc.scala 162:21]
    executer.io.rVal2 <= vec_rfile[issuer.io.deq.bits.tag].rs2_data @[proc.scala 163:21]
    node _T_219 = and(executer.io.einst.valid, issuer.io.deq.valid) @[proc.scala 165:50]
    node _T_220 = and(_T_219, exeReg.io.enq.ready) @[proc.scala 165:73]
    exeReg.io.enq.valid <= _T_220 @[proc.scala 165:23]
    exeReg.io.enq.bits.nzcv_en <= executer.io.einst.bits.nzcv_en @[proc.scala 166:23]
    exeReg.io.enq.bits.nzcv <= executer.io.einst.bits.nzcv @[proc.scala 166:23]
    exeReg.io.enq.bits.tag <= executer.io.einst.bits.tag @[proc.scala 166:23]
    exeReg.io.enq.bits.rd_en <= executer.io.einst.bits.rd_en @[proc.scala 166:23]
    exeReg.io.enq.bits.rd <= executer.io.einst.bits.rd @[proc.scala 166:23]
    exeReg.io.enq.bits.res <= executer.io.einst.bits.res @[proc.scala 166:23]
    brancher.io.dinst.pc <= issuer.io.deq.bits.pc @[proc.scala 169:21]
    brancher.io.dinst.inst <= issuer.io.deq.bits.inst @[proc.scala 169:21]
    brancher.io.dinst.tag <= issuer.io.deq.bits.tag @[proc.scala 169:21]
    brancher.io.dinst.inst_en <= issuer.io.deq.bits.inst_en @[proc.scala 169:21]
    brancher.io.dinst.nzcv_en <= issuer.io.deq.bits.nzcv_en @[proc.scala 169:21]
    brancher.io.dinst.cond_en <= issuer.io.deq.bits.cond_en @[proc.scala 169:21]
    brancher.io.dinst.shift_en <= issuer.io.deq.bits.shift_en @[proc.scala 169:21]
    brancher.io.dinst.imm_en <= issuer.io.deq.bits.imm_en @[proc.scala 169:21]
    brancher.io.dinst.rs2_en <= issuer.io.deq.bits.rs2_en @[proc.scala 169:21]
    brancher.io.dinst.rs1_en <= issuer.io.deq.bits.rs1_en @[proc.scala 169:21]
    brancher.io.dinst.rd_en <= issuer.io.deq.bits.rd_en @[proc.scala 169:21]
    brancher.io.dinst.op <= issuer.io.deq.bits.op @[proc.scala 169:21]
    brancher.io.dinst.itype <= issuer.io.deq.bits.itype @[proc.scala 169:21]
    brancher.io.dinst.cond <= issuer.io.deq.bits.cond @[proc.scala 169:21]
    brancher.io.dinst.shift_type <= issuer.io.deq.bits.shift_type @[proc.scala 169:21]
    brancher.io.dinst.shift_val <= issuer.io.deq.bits.shift_val @[proc.scala 169:21]
    brancher.io.dinst.imm <= issuer.io.deq.bits.imm @[proc.scala 169:21]
    brancher.io.dinst.rs2 <= issuer.io.deq.bits.rs2 @[proc.scala 169:21]
    brancher.io.dinst.rs1 <= issuer.io.deq.bits.rs1 @[proc.scala 169:21]
    brancher.io.dinst.rd <= issuer.io.deq.bits.rd @[proc.scala 169:21]
    brancher.io.nzcv <= vec_pregs[issuer.io.deq.bits.tag].NZCV @[proc.scala 170:20]
    node _T_224 = and(issuer.io.deq.valid, brancher.io.binst.valid) @[proc.scala 173:45]
    brReg.io.enq.valid <= _T_224 @[proc.scala 173:22]
    brReg.io.enq.bits.offset <= brancher.io.binst.bits.offset @[proc.scala 174:28]
    brReg.io.enq.bits.tag <= brancher.io.binst.bits.tag @[proc.scala 175:25]
    ldstU.io.dinst.bits.pc <= issuer.io.deq.bits.pc @[proc.scala 178:23]
    ldstU.io.dinst.bits.inst <= issuer.io.deq.bits.inst @[proc.scala 178:23]
    ldstU.io.dinst.bits.tag <= issuer.io.deq.bits.tag @[proc.scala 178:23]
    ldstU.io.dinst.bits.inst_en <= issuer.io.deq.bits.inst_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.nzcv_en <= issuer.io.deq.bits.nzcv_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.cond_en <= issuer.io.deq.bits.cond_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.shift_en <= issuer.io.deq.bits.shift_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.imm_en <= issuer.io.deq.bits.imm_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.rs2_en <= issuer.io.deq.bits.rs2_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.rs1_en <= issuer.io.deq.bits.rs1_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.rd_en <= issuer.io.deq.bits.rd_en @[proc.scala 178:23]
    ldstU.io.dinst.bits.op <= issuer.io.deq.bits.op @[proc.scala 178:23]
    ldstU.io.dinst.bits.itype <= issuer.io.deq.bits.itype @[proc.scala 178:23]
    ldstU.io.dinst.bits.cond <= issuer.io.deq.bits.cond @[proc.scala 178:23]
    ldstU.io.dinst.bits.shift_type <= issuer.io.deq.bits.shift_type @[proc.scala 178:23]
    ldstU.io.dinst.bits.shift_val <= issuer.io.deq.bits.shift_val @[proc.scala 178:23]
    ldstU.io.dinst.bits.imm <= issuer.io.deq.bits.imm @[proc.scala 178:23]
    ldstU.io.dinst.bits.rs2 <= issuer.io.deq.bits.rs2 @[proc.scala 178:23]
    ldstU.io.dinst.bits.rs1 <= issuer.io.deq.bits.rs1 @[proc.scala 178:23]
    ldstU.io.dinst.bits.rd <= issuer.io.deq.bits.rd @[proc.scala 178:23]
    ldstU.io.dinst.valid <= issuer.io.deq.valid @[proc.scala 179:24]
    ldstU.io.rVal1 <= vec_rfile[issuer.io.deq.bits.tag].rs1_data @[proc.scala 180:18]
    ldstU.io.rVal2 <= vec_rfile[issuer.io.deq.bits.tag].rs2_data @[proc.scala 181:18]
    ldstU.io.pc <= vec_pregs[issuer.io.deq.bits.tag].PC @[proc.scala 182:18]
    ldstU.io.memRes.valid <= UInt<1>("h00") @[proc.scala 184:25]
    ldstU.io.memRes.bits.data <= UInt<1>("h00") @[proc.scala 185:29]
    ldstU.io.write_tlb_vaddr.bits.offset is invalid @[proc.scala 189:28]
    ldstU.io.write_tlb_vaddr.bits.set is invalid @[proc.scala 189:28]
    ldstU.io.write_tlb_vaddr.bits.tag is invalid @[proc.scala 189:28]
    ldstU.io.write_tlb_vaddr.valid is invalid @[proc.scala 189:28]
    ldstU.io.write_tlb_entry is invalid @[proc.scala 190:28]
    node _T_230 = and(ldstU.io.minst.valid, issuer.io.deq.valid) @[proc.scala 193:49]
    ldstUReg.io.enq.valid <= _T_230 @[proc.scala 193:25]
    ldstUReg.io.enq.bits.tag <= ldstU.io.minst.bits.tag @[proc.scala 194:24]
    ldstUReg.io.enq.bits.rd_en <= ldstU.io.minst.bits.rd_en @[proc.scala 194:24]
    ldstUReg.io.enq.bits.rd <= ldstU.io.minst.bits.rd @[proc.scala 194:24]
    ldstUReg.io.enq.bits.res <= ldstU.io.minst.bits.res @[proc.scala 194:24]
    exeReg.io.deq.ready <= UInt<1>("h01") @[proc.scala 199:23]
    brReg.io.deq.ready <= UInt<1>("h01") @[proc.scala 200:22]
    ldstUReg.io.deq.ready <= UInt<1>("h01") @[proc.scala 201:25]
    when exeReg.io.deq.valid : @[proc.scala 205:31]
      vec_rfile[0].waddr <= exeReg.io.deq.bits.rd @[proc.scala 206:28]
      vec_rfile[0].wdata <= exeReg.io.deq.bits.res @[proc.scala 207:28]
      skip @[proc.scala 205:31]
    else : @[proc.scala 208:39]
      when ldstUReg.io.deq.valid : @[proc.scala 208:39]
        vec_rfile[0].waddr <= ldstUReg.io.deq.bits.rd @[proc.scala 209:28]
        vec_rfile[0].wdata <= ldstUReg.io.deq.bits.res @[proc.scala 210:28]
        skip @[proc.scala 208:39]
      else : @[proc.scala 211:16]
        vec_rfile[0].waddr <= exeReg.io.deq.bits.rd @[proc.scala 212:28]
        vec_rfile[0].wdata <= exeReg.io.deq.bits.res @[proc.scala 213:28]
        skip @[proc.scala 211:16]
    vec_rfile[0].wen <= UInt<1>("h00") @[proc.scala 215:24]
    when exeReg.io.deq.valid : @[proc.scala 205:31]
      vec_rfile[1].waddr <= exeReg.io.deq.bits.rd @[proc.scala 206:28]
      vec_rfile[1].wdata <= exeReg.io.deq.bits.res @[proc.scala 207:28]
      skip @[proc.scala 205:31]
    else : @[proc.scala 208:39]
      when ldstUReg.io.deq.valid : @[proc.scala 208:39]
        vec_rfile[1].waddr <= ldstUReg.io.deq.bits.rd @[proc.scala 209:28]
        vec_rfile[1].wdata <= ldstUReg.io.deq.bits.res @[proc.scala 210:28]
        skip @[proc.scala 208:39]
      else : @[proc.scala 211:16]
        vec_rfile[1].waddr <= exeReg.io.deq.bits.rd @[proc.scala 212:28]
        vec_rfile[1].wdata <= exeReg.io.deq.bits.res @[proc.scala 213:28]
        skip @[proc.scala 211:16]
    vec_rfile[1].wen <= UInt<1>("h00") @[proc.scala 215:24]
    when exeReg.io.deq.valid : @[proc.scala 217:29]
      vec_rfile[exeReg.io.deq.bits.tag].wen <= exeReg.io.deq.bits.rd_en @[proc.scala 218:43]
      skip @[proc.scala 217:29]
    else : @[proc.scala 219:37]
      when ldstUReg.io.deq.valid : @[proc.scala 219:37]
        vec_rfile[ldstUReg.io.deq.bits.tag].wen <= ldstUReg.io.deq.bits.rd_en @[proc.scala 220:45]
        skip @[proc.scala 219:37]
    node _T_266 = and(exeReg.io.deq.valid, exeReg.io.deq.bits.nzcv_en) @[proc.scala 224:29]
    when _T_266 : @[proc.scala 224:60]
      vec_pregs[exeReg.io.deq.bits.tag].NZCV <= exeReg.io.deq.bits.nzcv @[proc.scala 225:44]
      skip @[proc.scala 224:60]
    reg last_thread : UInt<1>, clock @[proc.scala 228:24]
    when brReg.io.deq.valid : @[proc.scala 231:28]
      node _T_274 = cvt(vec_pregs[brReg.io.deq.bits.tag].PC) @[proc.scala 232:53]
      node _T_275 = asSInt(brReg.io.deq.bits.offset) @[proc.scala 232:85]
      node _T_276 = add(_T_274, _T_275) @[proc.scala 232:58]
      node _T_277 = tail(_T_276, 1) @[proc.scala 232:58]
      node _T_278 = asSInt(_T_277) @[proc.scala 232:58]
      node _T_279 = asUInt(_T_278) @[proc.scala 232:99]
      fake_PC <= _T_279 @[proc.scala 232:13]
      node _T_286 = cvt(vec_pregs[brReg.io.deq.bits.tag].PC) @[proc.scala 233:81]
      node _T_287 = asSInt(brReg.io.deq.bits.offset) @[proc.scala 233:113]
      node _T_288 = add(_T_286, _T_287) @[proc.scala 233:86]
      node _T_289 = tail(_T_288, 1) @[proc.scala 233:86]
      node _T_290 = asSInt(_T_289) @[proc.scala 233:86]
      node _T_291 = asUInt(_T_290) @[proc.scala 233:127]
      vec_pregs[brReg.io.deq.bits.tag].PC <= _T_291 @[proc.scala 233:41]
      last_thread <= brReg.io.deq.bits.tag @[proc.scala 234:17]
      skip @[proc.scala 231:28]
    else : @[proc.scala 235:35]
      when exeReg.io.deq.valid : @[proc.scala 235:35]
        node _T_299 = add(vec_pregs[exeReg.io.deq.bits.tag].PC, UInt<3>("h04")) @[proc.scala 236:82]
        node _T_300 = tail(_T_299, 1) @[proc.scala 236:82]
        vec_pregs[exeReg.io.deq.bits.tag].PC <= _T_300 @[proc.scala 236:42]
        last_thread <= exeReg.io.deq.bits.tag @[proc.scala 237:17]
        skip @[proc.scala 235:35]
      else : @[proc.scala 238:37]
        when ldstUReg.io.deq.valid : @[proc.scala 238:37]
          node _T_308 = add(vec_pregs[ldstUReg.io.deq.bits.tag].PC, UInt<3>("h04")) @[proc.scala 239:86]
          node _T_309 = tail(_T_308, 1) @[proc.scala 239:86]
          vec_pregs[ldstUReg.io.deq.bits.tag].PC <= _T_309 @[proc.scala 239:44]
          last_thread <= exeReg.io.deq.bits.tag @[proc.scala 240:17]
          skip @[proc.scala 238:37]
    when tpu.io.tpu2cpu.fire : @[proc.scala 244:29]
      fake_PC <= vec_pregs[tpu.io.tpu2cpu.fireTag].PC @[proc.scala 245:13]
      fetch_en[tpu.io.tpu2cpu.fireTag] <= UInt<1>("h01") @[proc.scala 246:38]
      skip @[proc.scala 244:29]
    node _T_317 = eq(issuer.io.deq.bits.itype, UInt<3>("h00")) @[proc.scala 248:68]
    node _T_318 = and(issuer.io.deq.valid, _T_317) @[proc.scala 248:46]
    tpu.io.tpu2cpu.done <= _T_318 @[proc.scala 248:23]
    tpu.io.tpu2cpu.doneTag <= issuer.io.deq.bits.tag @[proc.scala 249:26]
    node _T_319 = eq(issuer.io.deq.bits.itype, UInt<3>("h00")) @[proc.scala 250:50]
    node _T_320 = and(issuer.io.deq.valid, _T_319) @[proc.scala 250:28]
    when _T_320 : @[proc.scala 250:82]
      fetch_en[tpu.io.tpu2cpu.flushTag] <= UInt<1>("h00") @[proc.scala 251:39]
      skip @[proc.scala 250:82]
    issuer.io.flushTag <= tpu.io.tpu2cpu.flushTag @[proc.scala 256:22]
    when tpu.io.tpu2cpu.flush : @[proc.scala 257:30]
      node _T_325 = eq(fetch.io.deq.bits.tag, tpu.io.tpu2cpu.flushTag) @[proc.scala 258:45]
      fetch.io.flush <= _T_325 @[proc.scala 258:20]
      issuer.io.flush <= tpu.io.tpu2cpu.flush @[proc.scala 259:21]
      node _T_326 = eq(decReg.io.deq.bits.tag, tpu.io.tpu2cpu.flushTag) @[proc.scala 260:47]
      decReg.io.flush <= _T_326 @[proc.scala 260:21]
      node _T_327 = eq(brReg.io.deq.bits.tag, tpu.io.tpu2cpu.flushTag) @[proc.scala 261:45]
      brReg.io.flush <= _T_327 @[proc.scala 261:20]
      node _T_328 = eq(exeReg.io.deq.bits.tag, tpu.io.tpu2cpu.flushTag) @[proc.scala 262:47]
      exeReg.io.flush <= _T_328 @[proc.scala 262:21]
      node _T_329 = eq(ldstUReg.io.deq.bits.tag, tpu.io.tpu2cpu.flushTag) @[proc.scala 263:51]
      ldstUReg.io.flush <= _T_329 @[proc.scala 263:23]
      skip @[proc.scala 257:30]
    else : @[proc.scala 264:15]
      fetch.io.flush <= UInt<1>("h00") @[proc.scala 265:20]
      issuer.io.flush <= UInt<1>("h00") @[proc.scala 266:21]
      decReg.io.flush <= UInt<1>("h00") @[proc.scala 267:21]
      brReg.io.flush <= UInt<1>("h00") @[proc.scala 268:20]
      exeReg.io.flush <= UInt<1>("h00") @[proc.scala 269:21]
      ldstUReg.io.flush <= UInt<1>("h00") @[proc.scala 270:23]
      skip @[proc.scala 264:15]
    tpu.io.cpu2tpuState.NZCV <= vec_pregs[tpu.io.tpu2cpu.freezeTag].NZCV @[proc.scala 275:23]
    tpu.io.cpu2tpuState.EL <= vec_pregs[tpu.io.tpu2cpu.freezeTag].EL @[proc.scala 275:23]
    tpu.io.cpu2tpuState.SP <= vec_pregs[tpu.io.tpu2cpu.freezeTag].SP @[proc.scala 275:23]
    tpu.io.cpu2tpuState.PC <= vec_pregs[tpu.io.tpu2cpu.freezeTag].PC @[proc.scala 275:23]
    tpu.io.rfile.rs1_data <= vec_rfile[0].rs1_data @[proc.scala 276:25]
    tpu.io.rfile.rs2_data <= vec_rfile[0].rs2_data @[proc.scala 277:25]
    when tpu.io.tpu2cpu.freeze : @[proc.scala 279:31]
      vec_rfile[tpu.io.tpu2cpu.freezeTag].wen <= tpu.io.rfile.wen @[proc.scala 281:41]
      vec_rfile[tpu.io.tpu2cpu.freezeTag].wdata <= tpu.io.rfile.wdata @[proc.scala 281:41]
      vec_rfile[tpu.io.tpu2cpu.freezeTag].waddr <= tpu.io.rfile.waddr @[proc.scala 281:41]
      tpu.io.rfile.rs2_data <= vec_rfile[tpu.io.tpu2cpu.freezeTag].rs2_data @[proc.scala 281:41]
      vec_rfile[tpu.io.tpu2cpu.freezeTag].rs2_addr <= tpu.io.rfile.rs2_addr @[proc.scala 281:41]
      tpu.io.rfile.rs1_data <= vec_rfile[tpu.io.tpu2cpu.freezeTag].rs1_data @[proc.scala 281:41]
      vec_rfile[tpu.io.tpu2cpu.freezeTag].rs1_addr <= tpu.io.rfile.rs1_addr @[proc.scala 281:41]
      vec_pregs[tpu.io.tpu2cpu.freezeTag].NZCV <= vec_pregs[tpu.io.tpu2cpu.freezeTag].NZCV @[proc.scala 283:41]
      vec_pregs[tpu.io.tpu2cpu.freezeTag].EL <= vec_pregs[tpu.io.tpu2cpu.freezeTag].EL @[proc.scala 283:41]
      vec_pregs[tpu.io.tpu2cpu.freezeTag].SP <= vec_pregs[tpu.io.tpu2cpu.freezeTag].SP @[proc.scala 283:41]
      vec_pregs[tpu.io.tpu2cpu.freezeTag].PC <= vec_pregs[tpu.io.tpu2cpu.freezeTag].PC @[proc.scala 283:41]
      when tpu.io.tpu2cpuStateReg.valid : @[proc.scala 284:40]
        node _T_360 = eq(tpu.io.tpu2cpuStateReg.bits, UInt<2>("h02")) @[proc.scala 285:40]
        when _T_360 : @[proc.scala 285:60]
          vec_pregs[tpu.io.tpu2cpu.freezeTag].PC <= tpu.io.tpu2cpuState.PC @[proc.scala 286:48]
          skip @[proc.scala 285:60]
        else : @[proc.scala 287:73]
          node _T_364 = eq(tpu.io.tpu2cpuStateReg.bits, UInt<2>("h03")) @[proc.scala 287:46]
          when _T_364 : @[proc.scala 287:73]
            vec_pregs[tpu.io.tpu2cpu.freezeTag].SP <= tpu.io.tpu2cpuState.SP @[proc.scala 288:48]
            vec_pregs[tpu.io.tpu2cpu.freezeTag].EL <= tpu.io.tpu2cpuState.EL @[proc.scala 289:48]
            vec_pregs[tpu.io.tpu2cpu.freezeTag].NZCV <= tpu.io.tpu2cpuState.NZCV @[proc.scala 290:50]
            skip @[proc.scala 287:73]
        skip @[proc.scala 284:40]
      skip @[proc.scala 279:31]
    
  module ProcAxiWrap : 
    input clock : Clock
    input reset : UInt<1>
    output io : {axiLite : {flip awaddr : UInt<4>, flip awprot : UInt<3>, flip awvalid : UInt<1>, awready : UInt<1>, flip wdata : UInt<32>, flip wstrb : UInt<4>, flip wvalid : UInt<1>, wready : UInt<1>, bresp : UInt<2>, bvalid : UInt<1>, flip bready : UInt<1>, flip araddr : UInt<4>, flip arprot : UInt<3>, flip arvalid : UInt<1>, arready : UInt<1>, rdata : UInt<32>, rresp : UInt<2>, rvalid : UInt<1>, flip rready : UInt<1>}, ppageBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}, stateBRAM : {flip writeEn : UInt<1>, flip en : UInt<1>, flip addr : UInt<10>, flip dataIn : UInt<36>, dataOut : UInt<36>}}
    
    inst regFile of AxiMemoryMappedWithRegs @[ProcAxi.scala 22:24]
    regFile.clock <= clock
    regFile.reset <= reset
    inst proc of Proc @[ProcAxi.scala 23:20]
    proc.clock <= clock
    proc.reset <= reset
    io.ppageBRAM.dataOut <= proc.io.ppageBRAM.dataOut @[ProcAxi.scala 33:16]
    proc.io.ppageBRAM.dataIn <= io.ppageBRAM.dataIn @[ProcAxi.scala 33:16]
    proc.io.ppageBRAM.addr <= io.ppageBRAM.addr @[ProcAxi.scala 33:16]
    proc.io.ppageBRAM.en <= io.ppageBRAM.en @[ProcAxi.scala 33:16]
    proc.io.ppageBRAM.writeEn <= io.ppageBRAM.writeEn @[ProcAxi.scala 33:16]
    io.stateBRAM.dataOut <= proc.io.stateBRAM.dataOut @[ProcAxi.scala 34:16]
    proc.io.stateBRAM.dataIn <= io.stateBRAM.dataIn @[ProcAxi.scala 34:16]
    proc.io.stateBRAM.addr <= io.stateBRAM.addr @[ProcAxi.scala 34:16]
    proc.io.stateBRAM.en <= io.stateBRAM.en @[ProcAxi.scala 34:16]
    proc.io.stateBRAM.writeEn <= io.stateBRAM.writeEn @[ProcAxi.scala 34:16]
    regFile.io.axiLite.rready <= io.axiLite.rready @[ProcAxi.scala 35:14]
    io.axiLite.rvalid <= regFile.io.axiLite.rvalid @[ProcAxi.scala 35:14]
    io.axiLite.rresp <= regFile.io.axiLite.rresp @[ProcAxi.scala 35:14]
    io.axiLite.rdata <= regFile.io.axiLite.rdata @[ProcAxi.scala 35:14]
    io.axiLite.arready <= regFile.io.axiLite.arready @[ProcAxi.scala 35:14]
    regFile.io.axiLite.arvalid <= io.axiLite.arvalid @[ProcAxi.scala 35:14]
    regFile.io.axiLite.arprot <= io.axiLite.arprot @[ProcAxi.scala 35:14]
    regFile.io.axiLite.araddr <= io.axiLite.araddr @[ProcAxi.scala 35:14]
    regFile.io.axiLite.bready <= io.axiLite.bready @[ProcAxi.scala 35:14]
    io.axiLite.bvalid <= regFile.io.axiLite.bvalid @[ProcAxi.scala 35:14]
    io.axiLite.bresp <= regFile.io.axiLite.bresp @[ProcAxi.scala 35:14]
    io.axiLite.wready <= regFile.io.axiLite.wready @[ProcAxi.scala 35:14]
    regFile.io.axiLite.wvalid <= io.axiLite.wvalid @[ProcAxi.scala 35:14]
    regFile.io.axiLite.wstrb <= io.axiLite.wstrb @[ProcAxi.scala 35:14]
    regFile.io.axiLite.wdata <= io.axiLite.wdata @[ProcAxi.scala 35:14]
    io.axiLite.awready <= regFile.io.axiLite.awready @[ProcAxi.scala 35:14]
    regFile.io.axiLite.awvalid <= io.axiLite.awvalid @[ProcAxi.scala 35:14]
    regFile.io.axiLite.awprot <= io.axiLite.awprot @[ProcAxi.scala 35:14]
    regFile.io.axiLite.awaddr <= io.axiLite.awaddr @[ProcAxi.scala 35:14]
    wire _T_70 : UInt<32>[4] @[ProcAxi.scala 38:35]
    _T_70[0] <= UInt<32>("h00") @[ProcAxi.scala 38:35]
    _T_70[1] <= UInt<32>("h00") @[ProcAxi.scala 38:35]
    _T_70[2] <= UInt<32>("h00") @[ProcAxi.scala 38:35]
    _T_70[3] <= UInt<32>("h00") @[ProcAxi.scala 38:35]
    wire regValues : UInt<32>[4]
    regValues[0] <= _T_70[0]
    regValues[1] <= _T_70[1]
    regValues[2] <= _T_70[2]
    regValues[3] <= _T_70[3]
    regFile.io.moduleInputs[0] <= regValues[0] @[ProcAxi.scala 41:27]
    regFile.io.moduleInputs[1] <= regValues[1] @[ProcAxi.scala 41:27]
    regFile.io.moduleInputs[2] <= regValues[2] @[ProcAxi.scala 41:27]
    regFile.io.moduleInputs[3] <= regValues[3] @[ProcAxi.scala 41:27]
    node _T_105 = bits(regFile.io.regsValues[0], 31, 31) @[ProcAxi.scala 39:72]
    node fireReg = bits(_T_105, 0, 0) @[ProcAxi.scala 53:37]
    node fireTagReg = bits(regFile.io.regsValues[0], 1, 0) @[ProcAxi.scala 39:72]
    proc.io.host2tpu.fire <= fireReg @[ProcAxi.scala 55:28]
    proc.io.host2tpu.fireTag <= fireTagReg @[ProcAxi.scala 56:28]
    wire _T_111 : UInt<1>[2] @[ProcAxi.scala 68:32]
    _T_111[0] <= UInt<1>("h00") @[ProcAxi.scala 68:32]
    _T_111[1] <= UInt<1>("h00") @[ProcAxi.scala 68:32]
    reg doneVec : UInt<1>[2], clock with : (reset => (reset, _T_111)) @[ProcAxi.scala 68:24]
    node _T_135 = cat(doneVec[1], doneVec[0]) @[ProcAxi.scala 69:31]
    node _T_136 = cat(UInt<1>("h00"), _T_135) @[Cat.scala 30:58]
    regValues[1] <= _T_136 @[ProcAxi.scala 69:11]
    when proc.io.host2tpu.done : @[ProcAxi.scala 71:31]
      doneVec[proc.io.host2tpu.doneTag] <= UInt<1>("h01") @[ProcAxi.scala 72:39]
      skip @[ProcAxi.scala 71:31]
    when fireReg : @[ProcAxi.scala 74:17]
      node _T_144 = bits(fireTagReg, 0, 0)
      doneVec[_T_144] <= UInt<1>("h00") @[ProcAxi.scala 75:25]
      skip @[ProcAxi.scala 74:17]
    
